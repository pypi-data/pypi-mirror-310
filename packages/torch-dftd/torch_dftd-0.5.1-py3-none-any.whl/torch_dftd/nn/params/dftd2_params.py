from typing import Tuple

import torch
from torch import Tensor

# for converting distance from bohr to angstrom
d3_autoang = 0.52917726
# J/mol nm^6 - > au
c6conv = 1.0e-3 / 2625.4999 / (0.052917726**6)

r0 = torch.tensor(
    [
        0.0,
        0.91,
        0.92,
        0.75,
        1.28,
        1.35,
        1.32,
        1.27,
        1.22,
        1.17,
        1.13,
        1.04,
        1.24,
        1.49,
        1.56,
        1.55,
        1.53,
        1.49,
        1.45,
        1.35,
        1.34,
        1.42,
        1.42,
        1.42,
        1.42,
        1.42,
        1.42,
        1.42,
        1.42,
        1.42,
        1.42,
        1.50,
        1.57,
        1.60,
        1.61,
        1.59,
        1.57,
        1.48,
        1.46,
        1.49,
        1.49,
        1.49,
        1.49,
        1.49,
        1.49,
        1.49,
        1.49,
        1.49,
        1.49,
        1.52,
        1.64,
        1.71,
        1.72,
        1.72,
        1.71,
        1.638,
        1.602,
        1.564,
        1.594,
        1.594,
        1.594,
        1.594,
        1.594,
        1.594,
        1.594,
        1.594,
        1.594,
        1.594,
        1.594,
        1.594,
        1.594,
        1.594,
        1.625,
        1.611,
        1.611,
        1.611,
        1.611,
        1.611,
        1.611,
        1.611,
        1.598,
        1.805,
        1.767,
        1.725,
        1.823,
        1.810,
        1.749,
    ],
    dtype=torch.float64,
)
c6 = torch.tensor(
    [
        0.0,
        0.14,
        0.08,
        1.61,
        1.61,
        3.13,
        1.75,
        1.23,
        0.70,
        0.75,
        0.63,
        5.71,
        5.71,
        10.79,
        9.23,
        7.84,
        5.57,
        5.07,
        4.61,
        10.8,
        10.8,
        10.8,
        10.8,
        10.8,
        10.8,
        10.8,
        10.8,
        10.8,
        10.8,
        10.8,
        10.8,
        16.99,
        17.10,
        16.37,
        12.64,
        12.47,
        12.01,
        24.67,
        24.67,
        24.67,
        24.67,
        24.67,
        24.67,
        24.67,
        24.67,
        24.67,
        24.67,
        24.67,
        24.67,
        37.32,
        38.71,
        38.44,
        31.74,
        31.50,
        29.99,
        315.275,
        226.994,
        176.252,
        140.68,
        140.68,
        140.68,
        140.68,
        140.68,
        140.68,
        140.68,
        140.68,
        140.68,
        140.68,
        140.68,
        140.68,
        140.68,
        140.68,
        105.112,
        81.24,
        81.24,
        81.24,
        81.24,
        81.24,
        81.24,
        81.24,
        57.364,
        57.254,
        63.162,
        63.540,
        55.283,
        57.171,
        56.64,
    ],
    dtype=torch.float64,
)


def get_dftd2_params() -> Tuple[Tensor, Tensor]:
    r0ab = (r0[:, None] + r0[None, :]) / d3_autoang
    c6ab = torch.sqrt(c6[:, None] * c6[None, :]) * c6conv
    return r0ab, c6ab
