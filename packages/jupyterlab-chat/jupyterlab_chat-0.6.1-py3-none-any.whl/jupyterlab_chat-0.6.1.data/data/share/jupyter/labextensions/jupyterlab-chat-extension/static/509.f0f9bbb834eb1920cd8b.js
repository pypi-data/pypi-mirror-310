"use strict";(self.webpackChunkjupyterlab_chat_extension=self.webpackChunkjupyterlab_chat_extension||[]).push([[509],{8509:(e,t,a)=>{a.r(t),a.d(t,{default:()=>w});var n=a(5749),o=a(4715),r=a(3782),c=a(6501),i=a(314),l=a(3856),s=a(295),d=a(9448),h=a(9981),m=a(2877),u=a(7963),g=a(9146);const p="Chat",y="jupyterlab-chat-extension:factory",C={id:"jupyterlab-chat-extension:autocompletionRegistry",description:"The autocompletion registry.",autoStart:!0,provides:n.IAutocompletionRegistry,activate:e=>new n.AutocompletionRegistry},f={id:y,description:"Document factories for chat.",autoStart:!0,requires:[d.IRenderMimeRegistry],optional:[g.IActiveCellManagerToken,n.IAutocompletionRegistry,o.ICollaborativeDrive,r.ILayoutRestorer,g.ISelectionWatcherToken,h.ISettingRegistry,c.IThemeManager,c.IToolbarWidgetRegistry,m.ITranslator],provides:g.IChatFactory,activate:(e,t,a,n,o,r,i,l,s,d,h)=>{const u=null!=h?h:m.nullTranslator;let C;const f=new g.WidgetConfig({});function v(e){const t=f.config.defaultDirectory,a=e.get("defaultDirectory").composite;o&&t&&t!==a&&o.get(t).then((e=>{0===e.content.length&&o.delete(t).catch((e=>{}))})).catch((()=>{}));let n=Promise.resolve(null);o&&a&&t!==a&&(n=o.get(a,{content:!1}).catch((async()=>o.newUntitled({type:"directory"}).then((async e=>o.rename(e.path,a).catch((t=>{throw o.delete(e.path),new Error(t)})))).catch((e=>{throw new Error(e)}))))),n.then((()=>{f.config={sendWithShiftEnter:e.get("sendWithShiftEnter").composite,stackMessages:e.get("stackMessages").composite,unreadNotifications:e.get("unreadNotifications").composite,enableCodeToolbar:e.get("enableCodeToolbar").composite,sendTypingNotification:e.get("sendTypingNotification").composite,defaultDirectory:a}}))}l&&(d&&(C=(0,c.createToolbarFactory)(d,l,p,y,u)),Promise.all([e.restored,l.load(y)]).then((([,e])=>{v(e),e.changed.connect(v)})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)})));const I=new c.WidgetTracker({namespace:"chat"});if(e.docRegistry.addFileType(g.chatFileType),o){const e=()=>g.YChat.create();o.sharedModelFactory.registerDocumentFactory("chat",e)}e.serviceManager.ready.then((()=>{const t=e.serviceManager.user.identity,n=new g.LabChatModelFactory({user:t,widgetConfig:f,commands:e.commands,activeCellManager:a,selectionWatcher:i});e.docRegistry.addModelFactory(n)})).catch((e=>console.error("The jupyterlab chat model factory is not initialized",e)));const w=new g.ChatWidgetFactory({name:p,label:"Chat",modelName:"chat",fileTypes:["chat"],defaultFor:["chat"],themeManager:s,rmRegistry:t,toolbarFactory:C,translator:u,autocompletionRegistry:n});return w.widgetCreated.connect(((t,a)=>{a.context.pathChanged.connect((()=>{I.save(a)})),I.add(a),a.model.unreadChanged.connect((()=>e.commands.notifyCommandChanged(g.CommandIDs.markAsRead)))})),e.docRegistry.addWidgetFactory(w),r&&r.restore(I,{command:"docmanager:open",args:e=>({path:e.context.path,factory:p}),name:e=>e.context.path,when:e.serviceManager.ready}),{widgetConfig:f,tracker:I}}},v={id:"jupyterlab-chat-extension:commands",description:"The commands to create or open a chat.",autoStart:!0,requires:[o.ICollaborativeDrive,g.IChatFactory],optional:[g.IActiveCellManagerToken,g.IChatPanel,c.ICommandPalette,l.ILauncher,g.ISelectionWatcherToken],activate:(e,t,a,o,r,l,s,d)=>{const{commands:h}=e,{tracker:m,widgetConfig:u}=a;h.addCommand(g.CommandIDs.createChat,{label:e=>e.isPalette?"Create a new chat":"Chat",caption:"Create a chat",icon:e=>e.isPalette?void 0:n.chatIcon,execute:async e=>{var a,n;const o=null!==(a=e.inSidePanel)&&void 0!==a&&a;let r=null!==(n=e.name)&&void 0!==n?n:null,l="";if(r||(r=(await c.InputDialog.getText({label:"Name",placeholder:"untitled",title:"Create a new chat"})).value),null===r)return;r&&(l=r.endsWith(g.chatFileType.extensions[0])?r:`${r}${g.chatFileType.extensions[0]}`,l=i.PathExt.join(u.config.defaultDirectory||"",l));let s=!0;if(l?await t.get(l,{content:!1}).catch((()=>{s=!1})):s=!1,!s){let e=await t.newUntitled({type:"file",ext:g.chatFileType.extensions[0]});if(l&&(e=await t.rename(e.path,l)),!e)return(0,c.showErrorMessage)("Error creating a chat","An error occurred while creating the chat"),"";l=e.path}if(h.hasCommand(g.CommandIDs.openChat))return h.execute(g.CommandIDs.openChat,{filepath:l,inSidePanel:o});h.execute("docmanager:open",{path:`RTC:${l}`,factory:p})}}),l&&l.addItem({category:"Chat",command:g.CommandIDs.createChat,args:{isPalette:!0}}),s&&s.add({command:g.CommandIDs.createChat,category:"Chat",rank:1}),h.addCommand(g.CommandIDs.markAsRead,{caption:"Mark chat as read",icon:n.readIcon,isEnabled:()=>null!==m.currentWidget&&m.currentWidget===e.shell.currentWidget&&m.currentWidget.model.unreadMessages.length>0,execute:async t=>{const a=e.shell.currentWidget;a&&a instanceof g.LabChatPanel&&Array.from(e.shell.widgets("main")).includes(a)?a.model.unreadMessages=[]:console.error(`The command '${g.CommandIDs.markAsRead}' should be executed from the toolbar button only`)}}),m.currentChanged.connect((()=>{h.notifyCommandChanged(g.CommandIDs.markAsRead)})),e.serviceManager.ready.then((()=>{const a=e.serviceManager.user.identity;h.addCommand(g.CommandIDs.openChat,{label:"Open a chat",execute:async n=>{var i,l;const s=null!==(i=n.inSidePanel)&&void 0!==i&&i;let m=null!==(l=n.filepath)&&void 0!==l?l:null;if(null===m&&(m=(await c.InputDialog.getText({label:"File path",placeholder:"/path/to/the/chat/file",title:"Path of the chat"})).value),!m)return;let y=!0;if(await t.get(m,{content:!1}).catch((()=>{y=!1})),y)if(s&&r){if(e.shell.activateById(r.id),r.openIfExists(m))return;const n=await t.get(m),c=t.sharedModelFactory.createNew({path:n.path,format:n.format,contentType:g.chatFileType.contentType,collaborative:!0}),i=new g.LabChatModel({user:a,sharedModel:c,widgetConfig:u,commands:e.commands,activeCellManager:o,selectionWatcher:d});r.addChat(i,n.path)}else h.execute("docmanager:open",{path:`RTC:${m}`,factory:p});else(0,c.showErrorMessage)("Error opening chat",`'${m}' is not a valid path`)}}),l&&l.addItem({category:"Chat",command:g.CommandIDs.openChat})})).catch((e=>console.error("The command to open a chat is not initialized\n",e))),h.addCommand(g.CommandIDs.focusInput,{caption:"Focus the input of the current chat widget",isEnabled:()=>null!==m.currentWidget,execute:async()=>{const t=m.currentWidget;t&&t instanceof g.LabChatPanel&&Array.from(e.shell.widgets("main")).includes(t)&&(e.shell.activateById(t.id),t.model.focusInput())}})}},I={id:"jupyterlab-chat-extension:chat-panel",description:"The chat panel widget.",autoStart:!0,provides:g.IChatPanel,requires:[g.IChatFactory,o.ICollaborativeDrive,d.IRenderMimeRegistry],optional:[n.IAutocompletionRegistry,r.ILayoutRestorer,c.IThemeManager],activate:(e,t,a,o,r,c,i)=>{const{commands:l}=e,s=t.widgetConfig.config.defaultDirectory||"",d=new g.ChatPanel({commands:l,drive:a,rmRegistry:o,themeManager:i,defaultDirectory:s,autocompletionRegistry:r});d.id="JupyterlabChat:sidepanel",d.title.icon=n.chatIcon,d.title.caption="Jupyter Chat",t.widgetConfig.configChanged.connect(((e,t)=>{void 0!==t.defaultDirectory&&(d.defaultDirectory=t.defaultDirectory)})),e.shell.add(d,"left",{rank:2e3}),c&&c.add(d,"jupyter-chat");const h=["create","delete","rename"];return e.serviceManager.events.stream.connect(((e,t)=>{if("https://events.jupyter.org/jupyter_server/contents_service/v1"===t.schema_id){const e=t.action;h.includes(e)&&t.path.endsWith(g.chatFileType.extensions[0])&&d.updateChatList()}})),l.addCommand(g.CommandIDs.moveToSide,{label:"Move the chat to the side panel",caption:"Move the chat to the side panel",icon:u.launchIcon,isEnabled:()=>l.hasCommand(g.CommandIDs.openChat),execute:async()=>{const t=e.shell.currentWidget;if(!(t&&t instanceof g.LabChatPanel&&Array.from(e.shell.widgets("main")).includes(t)))return void console.error(`The command '${g.CommandIDs.moveToSide}' should be executed from the toolbar button only`);const a=t.context.path.split(":").pop();l.execute(g.CommandIDs.openChat,{filepath:a,inSidePanel:!0}),t.dispose()}}),d}},w=[{id:"jupyterlab-chat-extension:activeCellManager",description:"The active cell manager plugin.",autoStart:!0,requires:[s.INotebookTracker],provides:g.IActiveCellManagerToken,activate:(e,t)=>new n.ActiveCellManager({tracker:t,shell:e.shell})},C,v,I,f,{id:"jupyterlab-chat-extension:selectionWatcher",description:"The selection watcher plugin.",autoStart:!0,requires:[],provides:g.ISelectionWatcherToken,activate:e=>new n.SelectionWatcher({shell:e.shell})}]}}]);