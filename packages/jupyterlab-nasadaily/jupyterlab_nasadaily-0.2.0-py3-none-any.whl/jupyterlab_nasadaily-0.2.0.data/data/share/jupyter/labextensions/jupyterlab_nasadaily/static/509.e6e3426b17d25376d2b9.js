"use strict";(self.webpackChunkjupyterlab_nasadaily=self.webpackChunkjupyterlab_nasadaily||[]).push([[509],{509:(t,e,n)=>{n.r(e),n.d(e,{default:()=>g});var a=n(782),i=n(501),s=n(981),o=n(856),r=n(256),l=n(602),c=n(963);const d=new c.LabIcon({name:"jupyterlab_nasadaily:rocket-icon",svgstr:'<svg xmlns="http://www.w3.org/2000/svg" height="16" width="16" viewBox="0 0 512 512">\x3c!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--\x3e<path fill="navy" d="M156.6 384.9L125.7 354c-8.5-8.5-11.5-20.8-7.7-32.2c3-8.9 7-20.5 11.8-33.8L24 288c-8.6 0-16.6-4.6-20.9-12.1s-4.2-16.7 .2-24.1l52.5-88.5c13-21.9 36.5-35.3 61.9-35.3l82.3 0c2.4-4 4.8-7.7 7.2-11.3C289.1-4.1 411.1-8.1 483.9 5.3c11.6 2.1 20.6 11.2 22.8 22.8c13.4 72.9 9.3 194.8-111.4 276.7c-3.5 2.4-7.3 4.8-11.3 7.2v82.3c0 25.4-13.4 49-35.3 61.9l-88.5 52.5c-7.4 4.4-16.6 4.5-24.1 .2s-12.1-12.2-12.1-20.9V380.8c-14.1 4.9-26.4 8.9-35.7 11.9c-11.2 3.6-23.4 .5-31.8-7.8zM384 168a40 40 0 1 0 0-80 40 40 0 1 0 0 80z"/></svg>'});class h extends r.Widget{constructor(t={node:document.createElement("button")}){super(t),this._count={clickCount:0},this._stateChanged=new l.Signal(this),this.addClass("jp-button-widget"),this.spinner=document.createElement("div"),this.spinner.className="fa fa-sync-alt",this.spinner.style.display="",this.node.appendChild(this.spinner),this.node.addEventListener("click",(()=>{this._count.clickCount=this._count.clickCount+1,this._stateChanged.emit(this._count)}))}get stateChanged(){return this._stateChanged}}class p extends r.Widget{constructor(t){super({node:document.createElement("input")}),this.addClass("jp-Toolbar-dateInput");const e=this.node;e.placeholder="Enter date",e.addEventListener("keydown",(n=>{"Enter"===n.key&&(t(e.value),e.value="")}))}}class m extends r.Widget{constructor(t){super(),this.addClass("nasa-widget"),this.apiKey=(null==t?void 0:t.composite.api_key)||"DEMO_KEY";const e=(null==t?void 0:t.composite.min_date)||"1995-07-01";this.minDate=isNaN(Date.parse(e))?new Date("1995-07-01"):new Date(e),this.refreshbutton=new h,this.node.appendChild(this.refreshbutton.node),this.refreshbutton.stateChanged.connect(this._onRefresh,this),this.imageContainer=document.createElement("div"),this.imageContainer.className="image-container",this.img=document.createElement("img"),this.imageContainer.appendChild(this.img),this.imgtitle=document.createElement("p"),this.imgtitle.className="nasa-imgtitle",this.node.appendChild(this.imgtitle),this.copyright=document.createElement("p"),this.copyright.className="nasa-copyright",this.imageContainer.appendChild(this.copyright),this.spinner=document.createElement("div"),this.spinner.className="fa fa-spinner fa-spin",this.spinner.style.display="none",this.node.appendChild(this.spinner),this.node.appendChild(this.imageContainer),this.img.onload=()=>{this.onImageLoaded()},this.currentDate=new Date}formatDate(t){return t.toISOString().slice(0,10)}_onRefresh(t,e){this.updateNASAImage(void 0,!0),console.log("Hey, a Signal has been received from",t),console.log(`Image refreshed ${e.clickCount} times.`)}onImageLoaded(){this.refreshbutton.spinner.className="fa fa-sync-alt",this.spinner.style.display="none",this.img.style.display="",this.imgtitle.style.display="",this.copyright.style.display=""}async updateNASAImage(t,e=!1){let n;t?(n=t,this.currentDate=new Date(t)):e?(n=this.randomDate(),this.currentDate=new Date(n)):(n=this.formatDate(new Date),this.currentDate=new Date(n));const a=await fetch(`https://api.nasa.gov/planetary/apod?api_key=${this.apiKey}&date=${n}`);if(this.refreshbutton.spinner.className="fa fa-sync-alt fa-spin",this.spinner.style.display="",this.img.style.display="none",this.imgtitle.style.display="none",this.copyright.style.display="none",!a.ok){const t=await a.json();if(404===t.code){const t=new Date(this.currentDate);return t.setDate(t.getDate()-1),this.currentDate=t,void await this.updateNASAImage(this.formatDate(t),e)}return t.error?this.imgtitle.innerText=t.error.message:this.imgtitle.innerText=a.statusText,this.refreshbutton.spinner.className="fa fa-sync-alt",this.spinner.style.display="none",void(this.imgtitle.style.display="")}const i=await a.json();"image"===i.media_type?(this.img.src=i.url,this.img.title=i.title,this.imgtitle.innerText=i.title,(i.date||i.copyright||i.explanation||i.url||i.hdurl)&&(this.copyright.innerHTML=`\n        <span style="color: cyan; font-weight: bold;">${i.date||""}</span> : \n        ${i.explanation||""} || \n        <em>Copyright: ${i.copyright||"NASA"}</em> || \n        <a href="${i.url}" target="_blank">Image Link</a> ||\n        <a href="${i.hdurl}" target="_blank">HD Image Link</a>\n        `.replace(/[\r\n]/g,""))):"video"===i.media_type?(console.log("This is a video. Please refresh again."),this.imgtitle.innerHTML=`\n        <span style="color: cyan; font-weight: bold;">${i.date||""}</span> :\n        <span style="color: skyblue; font-weight: bold;">${i.title||""}</span> || \n        <a href="${i.url}" target="_blank" style="color: blue; font-weight: bold;">Video Link</a> <br>\n        ${i.explanation||""}\n        `.replace(/[\r\n]/g,""),this.refreshbutton.spinner.className="fa fa-sync-alt",this.spinner.style.display="none",this.imgtitle.style.display=""):(this.imgtitle.innerText="This random fetch is not an image. Please refresh again.",this.refreshbutton.spinner.className="fa fa-sync-alt",this.spinner.style.display="none",this.imgtitle.style.display="")}randomDate(){const t=this.minDate,e=new Date;return new Date(t.getTime()+Math.random()*(e.getTime()-t.getTime())).toISOString().slice(0,10)}handleDateInput(t){const e=this.extractDate(t);let n;n=e?new Date(e):new Date;const a=new Date;n>a&&(n=a),n<this.minDate&&(n=this.minDate),this.updateNASAImage(this.formatDate(n))}extractDate(t){const e=[/^(\d{4})(\d{2})(\d{2})$/,/^(\d{2})(\d{2})(\d{2})$/,/^(\d{4})-(\d{2})-(\d{2})$/];for(const n of e){const e=t.match(n);if(e){let t=e[1];const n=e[2],a=e[3];return 2===t.length&&(t=parseInt(t,10)>=90?"19"+t:"20"+t),`${t}-${n}-${a}`}}return null}}const g={id:"jupyterlab_nasadaily:plugin",description:"JupyterLab Extension to Show Astronomy Picture of the Day from NASA",autoStart:!0,requires:[i.ICommandPalette,s.ISettingRegistry],optional:[a.ILayoutRestorer,o.ILauncher],activate:function(t,e,n,a,s){let o,r;console.log("JupyterLab extension jupyterlab_nasadaily:plugin is activated!"),n&&n.load("jupyterlab_nasadaily:plugin").then((t=>{r=t})).catch((t=>{console.error("failed to load settings for jupyterlab_nasadaily:plugin.",t)}));const l="nasa:open";t.commands.addCommand(l,{label:"Random NASA Picture",execute:()=>{if(!o||o.isDisposed){const t=new m(r);o=new i.MainAreaWidget({content:t}),o.id="nasa-pic",o.title.label="NASA Picture",o.title.icon=d,o.title.closable=!0}h.has(o)||h.add(o),o.isAttached||t.shell.add(o,"main"),o.content.updateNASAImage();const e=new i.ToolbarButton({label:"Today",icon:c.ellipsesIcon,onClick:()=>{const t=new Date;o.content.updateNASAImage(o.content.formatDate(t))}});o.toolbar.addItem("today",e);const n=new i.ToolbarButton({label:"Prev Day",icon:c.caretLeftIcon,onClick:()=>{o.content.currentDate.setDate(o.content.currentDate.getDate()-1),o.content.updateNASAImage(o.content.formatDate(o.content.currentDate))}});o.toolbar.addItem("previous",n);const a=new i.ToolbarButton({label:"Next Day",icon:c.caretRightIcon,onClick:()=>{o.content.currentDate.setDate(o.content.currentDate.getDate()+1),o.content.updateNASAImage(o.content.formatDate(o.content.currentDate))}});o.toolbar.addItem("next",a);const s=new i.ToolbarButton({label:"Random Day",icon:c.refreshIcon,onClick:()=>o.content.updateNASAImage(void 0,!0)});o.toolbar.addItem("refresh",s);const l=new p((t=>{o.content.handleDateInput(t)}));o.toolbar.addItem("dateInput",l),t.shell.activateById(o.id)},icon:d}),e.addItem({command:l,category:"NASA"});const h=new i.WidgetTracker({namespace:"nasa"});a&&a.restore(h,{command:l,name:()=>"nasa"}),s&&s.add({command:l,category:"Other",rank:1})}}}}]);