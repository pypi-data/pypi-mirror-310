[tool.poetry]
name = "swarmauri-community"
version = "0.5.2.dev20"
description = "This repository includes Swarmauri community components."
authors = ["Jacob Stewart <jacob@swarmauri.com>"]
license = "Apache-2.0"
readme = "README.md"
repository = "http://github.com/swarmauri/swarmauri-sdk"
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
swarmauri = "==0.5.2"
typing_extensions = "*"
matplotlib = { version = ">=3.9.2", optional = true }
nltk = { version = "^3.9.1", optional = true }
gensim = { version = "==4.3.3", optional = true }
transformers = { version = "^4.45.0", optional = true }
spacy = { version = ">=3.0.0,<=3.8.2", optional = true }
textblob = { version = "^0.18.0", optional = true }
torch = { version = "^2.5.0", optional = true }
leptonai = { version = "==0.22.0", optional = true }
redis = { version = "^4.0", optional = true }
pinecone-client = { version = ">=2.0.0", optional = true, extras = ["grpc"] }
#protobuf = { version = "^3.20.0", optional = true }
#numba = { version = ">=0.59.0", optional = true }
#pacmap = { version = "==0.7.3", optional = true }

[tool.poetry.extras]
# Grouped optional dependencies
nlp = ["nltk", "textblob", "textstat", "gensim"]
ml_toolkits = ["transformers", "annoy"]
visualization = ["folium", "matplotlib"]
storage = ["redis", "duckdb", "neo4j", "chromadb", "qdrant_client", "weaviate-client", "pinecone-client"]
document_processing = ["PyPDF2", "pymupdf", "pypdftk"]
cloud_integration = ["psutil", "qrcode", "pygithub"]
spacy = ["spacy"]
transformers = ["transformers"]
torch = ["torch"]
gradio = ["gradio"]
model_clients = ["leptonai", "google-generativeai", "openai"]
tiktoken = ["tiktoken"]
#protobuf = ["protobuf"]
#pacmap = ["numba", "pacmap"]

# Full installation
full = [
    "nltk", "gensim", "textstat",
    "transformers", "annoy",
    "folium", "matplotlib",
    "redis", "duckdb", "neo4j", "chromadb", "qdrant_client", "weaviate-client", "pinecone-client",
    "PyPDF2", "pymupdf", "pypdftk",
    "psutil", "qrcode", "pygithub",
    "scipy", "spacy",
    "torch",
    "gradio",
    "leptonai", "google-generativeai", "openai"
    #"pacmap", "numba"
]

[tool.poetry.dev-dependencies]
flake8 = "^7.0"
pytest = "^8.0"
pytest-asyncio = ">=0.24.0"
pytest-xdist = "^3.6.1"
python-dotenv = "^1.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
norecursedirs = ["combined", "scripts"]

markers = [
    "test: standard test",
    "unit: Unit tests",
    "integration: Integration tests",
    "acceptance: Acceptance tests",
    "experimental: Experimental tests"
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_default_fixture_loop_scope = "function"