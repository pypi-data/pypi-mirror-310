[project]
description = "A Python management solution for C++ dependencies"
name = "cppython"
authors = [
    { name = "Synodic Software", email = "contact@synodic.software" },
]
readme = "README.md"
dynamic = []
requires-python = ">=3.13"
dependencies = [
    "typer>=0.13.1",
    "pydantic>=2.8.2",
    "packaging>=24.1",
]
version = "0.7.1.dev36"

[project.license]
text = "MIT"

[project.optional-dependencies]
pytest = [
    "pytest>=8.3.3",
    "pytest-mock>=3.14.0",
]
git = [
    "dulwich>=0.22.5",
]
pdm = [
    "pdm>=2.20.1",
]

[project.urls]
homepage = "https://github.com/Synodic-Software/CPPython"
repository = "https://github.com/Synodic-Software/CPPython"

[project.entry-points."cppython.scm"]
git = "cppython.plugins.git.plugin:GitSCM"

[project.entry-points."cppython.generator"]
cmake = "cppython.plugins.cmake.plugin:CMakeGenerator"

[project.entry-points.pdm]
cppython = "cppython.plugins.pdm.plugin:CPPythonPlugin"

[project.entry-points."cppython.provider"]
vcpkg = "cppython.plugins.vcpkg.plugin:VcpkgProvider"

[project.scripts]
cppython = "cppython.console.entry:app"

[dependency-groups]
lint = [
    "ruff>=0.7.4",
    "mypy>=1.13",
    "isort>=5.13.2",
]
test = [
    "pytest>=8.3.3",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
]

[tool.pytest.ini_options]
log_cli = true
testpaths = [
    "tests",
]

[tool.mypy]
exclude = "__pypackages__"
plugins = [
    "pydantic.mypy",
]
strict = true

[tool.isort]
profile = "black"

[tool.ruff]
line-length = 120
preview = true

[tool.ruff.lint]
ignore = [
    "D206",
    "D300",
    "D415",
    "E111",
    "E114",
    "E117",
]
select = [
    "D",
    "F",
    "I",
    "PL",
    "UP",
    "E",
    "B",
    "SIM",
    "PT",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
docstring-code-format = true
indent-style = "space"
quote-style = "single"

[tool.coverage.report]
skip_empty = true

[tool.pdm.options]
update = [
    "--update-all",
]

[tool.pdm.version]
source = "scm"

[tool.pdm.scripts.analyze]
shell = "ruff check cppython tests"

[tool.pdm.scripts.format]
shell = "ruff format"

[tool.pdm.scripts.lint]
composite = [
    "analyze",
    "format",
    "sort-imports",
    "type-check",
]

[tool.pdm.scripts.sort-imports]
shell = "isort --check-only --diff ."

[tool.pdm.scripts.test]
shell = "pytest --cov=cppython --verbose tests"

[tool.pdm.scripts.type-check]
shell = "mypy ."

[build-system]
build-backend = "pdm.backend"
requires = [
    "pdm.backend",
]
