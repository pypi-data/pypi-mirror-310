[tool.poetry]
name = "pepperpy"
description = "A modern, modular Python utility library"
authors = ["Felipe Pimentel <fpimentel88@gmail.com>"]
version = "1.3.7"
repository = "https://github.com/felipepimentel/pepperpy"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
pydantic = "^2.9.2"
python-dotenv = "^1.0.1"

rich = { version = "13.9.4", optional = true }
markdown-it-py = { version = "3.0.0", optional = true }
pypdf = { version = "5.1.0", optional = true }
python-magic = { version = "0.4.27", optional = true }
ebooklib = { version = "0.18", optional = true }
beautifulsoup4 = { version = "4.12.3", optional = true }
lxml = { version = "5.3.0", optional = true }
soundfile = { version = "0.12.1", optional = true }
pillow = { version = "11.0.0", optional = true }
opencv-python = { version = "4.10.0.84", optional = true }
cryptography = { version = "43.0.3", optional = true }
bcrypt = { version = "4.2.0", optional = true }
pyjwt = { version = "2.9.0", optional = true }
sqlalchemy = { version = "2.0.36", optional = true }
alembic = { version = "1.14.0", optional = true }
asyncpg = { version = "0.30.0", optional = true }
httpx = { version = "0.27.2", optional = true }
aiohttp = { version = "3.11.0", optional = true }
aiofiles = { version = "24.1.0", optional = true }
numpy = { version = ">=1.17.0,<2", optional = true }
scikit-learn = { version = "1.5.2", optional = true }
torch = { version = "2.5.1", optional = true }
redis = { version = "5.2.0", extras = ["hiredis"], optional = true }
orjson = { version = "3.10.11", optional = true }
websockets = { version = "14.1", optional = true }
langdetect = { version = "1.0.9", optional = true }
typer = { extras = ["all"], version = "0.13.0", optional = true }
msgpack = { version = "1.1.0", optional = true }
aiosqlite = { version = "0.20.0", optional = true }
python-docx = { version = "1.1.2", optional = true }
PyMuPDF = { version = "1.24.13", optional = true }
pandas = { version = "2.2.3", optional = true }
openpyxl = { version = "3.1.5", optional = true }
duckdb = { version = "1.1.3", optional = true }
moviepy = { version = "1.0.3", optional = true }
pydub = { version = "0.25.1", optional = true }
pymediainfo = { version = "6.1.0", optional = true }
toml = { version = "0.10.2", optional = true }
jsonschema = { version = "4.23.0", optional = true }
tomli = { version = "2.1.0", optional = true }
tomli-w = { version = "1.1.0", optional = true }
psutil = { version = "6.1.0", optional = true }
transformers = { version = "4.46.2", optional = true }
openai = { version = "1.54.4", optional = true }
sentence-transformers = { version = "3.3.0", optional = true }
pyyaml = { version = "6.0.2", optional = true }
pypub3 = { version = "^1.0.0", optional = true }
autogen-agentchat = { version = "^0.2.38", optional = true }

[tool.poetry.extras]
core = ["pydantic"]
config = ["toml", "tomli", "tomli-w", "jsonschema", "pyyaml"]
logging = ["rich"]

cli = ["typer"]
console = ["rich"]
console_full = ["rich", "markdown-it-py"]

docs_base = ["python-magic"]
docs_markdown = ["markdown-it-py"]
docs_pdf = ["pypdf", "PyMuPDF"]
docs_word = ["python-docx"]
docs_epub = ["ebooklib", "beautifulsoup4", "lxml", "pypub3"]
docs_html = ["beautifulsoup4", "lxml"]
docs_full = [
    "pypdf",
    "PyMuPDF",
    "python-docx",
    "ebooklib",
    "beautifulsoup4",
    "lxml",
    "markdown-it-py",
    "python-magic",
]

media_audio = ["soundfile", "pydub"]
media_video = ["opencv-python", "moviepy", "pymediainfo"]
media_image = ["pillow"]
media_full = [
    "soundfile",
    "pydub",
    "moviepy",
    "opencv-python",
    "pymediainfo",
    "pillow",
]

security_crypto = ["cryptography"]
security_auth = ["bcrypt", "pyjwt"]
security_full = ["cryptography", "bcrypt", "pyjwt"]

db_sql = ["sqlalchemy"]
db_migrations = ["alembic"]
db_postgres = ["asyncpg"]
db_sqlite = ["aiosqlite"]
db_duckdb = ["duckdb"]
db_full = ["sqlalchemy", "alembic", "asyncpg", "aiosqlite", "duckdb"]

data_numpy = ["numpy"]
data_pandas = ["pandas", "openpyxl"]
data_full = ["numpy", "pandas", "openpyxl", "duckdb"]

http_sync = ["httpx"]
http_async = ["aiohttp"]
http_websockets = ["websockets"]
http_full = ["httpx", "aiohttp", "websockets"]

files_async = ["aiofiles"]
files_magic = ["python-magic"]
files_full = ["aiofiles", "python-magic"]

ai_numpy = ["numpy"]
ai_torch = ["torch"]
ai_sklearn = ["scikit-learn"]
ai_nlp = ["transformers", "sentence-transformers"]
ai_openai = ["openai", "httpx"]
ai_autogen = ["autogen-agentchat"]
ai_full = [
    "numpy",
    "torch",
    "scikit-learn",
    "transformers",
    "sentence-transformers",
    "openai",
    "httpx",
    "autogen-agentchat",
]

cache_redis = ["redis", "hiredis"]
cache_local = ["msgpack"]
cache_full = ["redis", "hiredis", "msgpack"]

system = ["psutil"]

text_basic = ["langdetect"]
text_full = ["langdetect", "markdown-it-py", "beautifulsoup4", "lxml"]

serialization = ["orjson", "msgpack", "toml", "pyyaml"]

minimal = ["pydantic", "rich", "python-dotenv"]
standard = [
    "pydantic",
    "rich",
    "python-dotenv",
    "httpx",
    "sqlalchemy",
    "aiofiles",
]
all = [
    "autogen-agentchat",
    "pydantic",
    "typing-extensions",
    "python-dotenv",
    "pyyaml",
    "toml",
    "tomli",
    "tomli-w",
    "orjson",
    "msgpack",
    "jsonschema",
    "rich",
    "typer",
    "markdown-it-py",
    "pypdf",
    "PyMuPDF",
    "python-docx",
    "python-magic",
    "ebooklib",
    "beautifulsoup4",
    "lxml",
    "soundfile",
    "opencv-python",
    "pillow",
    "moviepy",
    "pydub",
    "pymediainfo",
    "cryptography",
    "bcrypt",
    "pyjwt",
    "sqlalchemy",
    "alembic",
    "asyncpg",
    "aiosqlite",
    "duckdb",
    "httpx",
    "aiohttp",
    "websockets",
    "aiofiles",
    "numpy",
    "pandas",
    "openpyxl",
    "torch",
    "scikit-learn",
    "transformers",
    "sentence-transformers",
    "openai",
    "redis",
    "hiredis",
    "psutil",
    "langdetect",
    "pypub3",
]

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
ruff = "^0.7.3"
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"
black = "^24.10.0"
typing-extensions = "^4.12.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
fix = true
line-length = 100

[tool.ruff.lint]
select = ["E", "F", "B", "I", "N", "ANN"]
ignore = [
    "E501",
    "N812",
    "B006",
    "ANN101",
    "ANN102",
    "ANN401",
    "ANN204",
    "ANN003",
    "ANN001",
    "ANN202",
    "ANN205",
    "ANN002",
    "B904",
]

[tool.ruff.lint.per-file-ignores]
"pepperpy/ai/optimization/*.py" = ["N803"]
"tests/*" = ["ANN"]

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.12"
strict = true
plugins = ["sqlalchemy.ext.mypy.plugin"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_default_fixture_loop_scope = "function"
addopts = "--cov=pepperpy --cov-report=term-missing"
[tool.poetry.scripts]
lint = "scripts.lint:run_linters"

[tool.semantic_release]
version_variable = [
    "pepperpy/__init__.py:__version__",
    "pyproject.toml:tool.poetry.version",
]
branch = "main"
upload_to_pypi = true
build_command = "poetry build"
