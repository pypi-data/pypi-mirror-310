name: CD

on:
  workflow_dispatch:
  release:
    types:
      - published

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 3

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build SDist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  build_wheels:
    name: Build ${{ matrix.platform }}-${{ matrix.arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # emulated linux: generate 6 matrix combinations with qemu on ubuntu:
        arch: [aarch64, ppc64le, s390x]
        platform: [manylinux, musllinux]
        os: [ubuntu-latest]
        emulation: [qemu]
        exclude:
          # conditionally skip jobs requiring emulation:
          - os: ubuntu-latest
            emulation: ''
        include:
          # linux
          - os: ubuntu-latest
            platform: manylinux
            arch: x86_64
          - os: ubuntu-latest
            platform: manylinux
            arch: i686
          - os: ubuntu-latest
            platform: musllinux
            arch: x86_64
          - os: ubuntu-latest
            platform: musllinux
            arch: i686
          # windows
          - os: windows-2019
            platform: win
            arch: AMD64
          - os: windows-2019
            platform: win
            arch: x86
          # macos
          - os: macos-13
            platform: macos
            arch: x86_64
          - os: macos-latest
            platform: macos
            arch: arm64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Support long paths on Windows
        if: runner.os == 'Windows'
        run: git config --system core.longpaths true

      - name: Set up msvc on Windows
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0
        if: runner.os == 'Linux' && matrix.emulation == 'qemu'

      - name: Check architecture and set environment variable
        if: runner.os == 'Linux'
        run: |
          echo "Checking architecture..."
          if [[ ${{ matrix.arch }} == 'aarch64' ||
                ${{ matrix.arch }} == 'ppc64le' ||
                ${{ matrix.arch }} == 's390x' ]]; then
            echo "Setting CIBW_ENVIRONMENT to 1"
            echo "CIBW_ENVIRONMENT=VCPKG_FORCE_SYSTEM_BINARIES=1" >> $GITHUB_ENV
          fi

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          # restrict to a single Python version as wheel does not depend on Python:
          CIBW_BUILD: cp311-${{ matrix.platform }}*

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-${{ runner.os }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: wheelhouse/*.whl


  check_dist:
    name: Check dist
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - run: pipx run twine check --strict dist/*

  upload_all:
    needs: [build_wheels, build_sdist]
    environment: pypi
    permissions:
      id-token: write
    runs-on: ubuntu-22.04
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN  }}
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-22.04
    if: ${{ github.ref_name == github.event.repository.default_branch || (github.event_name == 'release' && github.event.action == 'published') }}
    permissions:
      contents: write
      id-token: write
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}

      - name: Cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
        with:
          path: |
            ~/vcpkg
            ~/.cache/pip
            ~/.cache/vcpkg
          key: cd-pages-${{ hashFiles('vcpkg.json') }}
          restore-keys: cd-pages-${{ hashFiles('vcpkg.json') }}

      - uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3 # v5
        with:
          python-version: 3.x

      - name: Build Docs
        run: pipx run nox -s docs

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e # v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
