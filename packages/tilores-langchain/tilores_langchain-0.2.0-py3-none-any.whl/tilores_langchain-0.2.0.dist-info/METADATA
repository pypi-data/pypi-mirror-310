Metadata-Version: 2.1
Name: tilores-langchain
Version: 0.2.0
Summary: This package contains tools to work with Tilores entity resolution database within Langchain.
Author-email: Lukas Rieder <lukas@parlant.co>, Stefan Berkner <stefan.berkner@tilores.io>
License: MIT License
        
        Copyright (c) 2024 Tilo Tech GmbH
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
        
Project-URL: Homepage, https://github.com/tilotech/tilores-langchain
Project-URL: Issues, https://github.com/tilotech/tilores-langchain/issues
Keywords: entity-resolution,tilores,graph-raq,identity-raq,langchain,langchain-tool
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: tilores-sdk>=0.4.0
Provides-Extra: all
Requires-Dist: tilores-langchain[langchain]; extra == "all"
Provides-Extra: langchain
Requires-Dist: langchain; extra == "langchain"
Requires-Dist: openai; extra == "langchain"
Provides-Extra: test
Requires-Dist: pytest==8.3.2; extra == "test"

# LangChain Using Tilores

This repository provides the building blocks for integrating LangChain, LangGraph, and the
[Tilores entity resolution system](https://docs.tilotech.io/tilores/).

Developers can use these tools to create powerful systems that leverage entity resolution
for record retrieval, search, and entity resolution.

## Examples

* **Human-in-the-Loop Chat:** [`examples/chat`](https://github.com/tilotech/tilores-langchain/tree/main/examples/chat)

    This example demonstrates how to build a chat application using Chainlit and LangGraph to explore a Tilores instance through natural language. It guides users through search functionality and explains the search results.

* **Basic Usage:** [`examples/basic`](https://github.com/tilotech/tilores-langchain/tree/main/examples/basic)

    This example shows how to use tools with an LLM model in a basic setup.

## Usage

```python
from tilores import TiloresAPI
from tilores_langchain import TiloresTools
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage

# Initialize the Tilores API.
tilores = TiloresAPI.from_environ()
# TiloresTools helps you build typed tools from a specific Tilores instance, typed according to
# the schema of the instance.
tilores_tools = TiloresTools(tilores)

# Setup a LLM model for inference bound with a set of tools.
tools = [tilores_tools.search_tool]
tools_dict = {tool.name: tool for tool in tools}
model = ChatOpenAI(temperature=0, streaming=True, model_name="gpt-4o")
model = model.bind_tools(tools)

# The basic loop works like this, that a list of messages is passed to the LLM
messages = [
    HumanMessage("Find me an entity by the first name Emma, surname Schulz, born on 1988-03-12")
]
ai_message = model.invoke(messages)
messages.append(ai_message)

# And for each AiMessage, you must check if it wants to invoke tools.
for tool_call in ai_message.tool_calls:
    # Perform the tool call and append the ToolMessage to the list of messages
    selected_tool = tools_dict[tool_call['name']]
    tool_message = selected_tool.invoke(tool_call)
    messages.append(tool_message)

# Then continue the basic loop by invoking the LLM with the current state, passing the list of messages.
ai_response = model.invoke(messages)
print(ai_response.content)
```

```console
$ cd examples/basic/
$ pip install -r requirements.txt
$ python llm_with_tools.py
I found multiple records for an entity with the first name Emma, surname Schulz, born on 1988-03-12. Here are the details:

1. **Record ID:** cc001001-0006-4000-c000-000000000006
   - **First Name:** Emma
   - **Last Name:** Schulz
   - **Date of Birth:** 1988-03-12

2. **Record ID:** cc001001-0002-4000-c000-000000000002
   - **First Name:** Emma
   - **Last Name:** Schulz
   - **Date of Birth:** 1988-03-12

[... snip ...]

If you need more specific information or further assistance, please let me know!
```

## Provided tools

- [x] `tilores_search`

