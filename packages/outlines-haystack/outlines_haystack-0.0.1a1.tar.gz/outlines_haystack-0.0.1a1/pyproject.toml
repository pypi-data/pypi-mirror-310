[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "outlines-haystack"
dynamic = ["version"]
description = 'Haystack integration with outlines.'
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
keywords = [
  "nlp",
  "machine-learning",
  "ai",
  "haystack",
  "llm",
  "outlines",
  "structured-generation",
  "generative-ai",
]
authors = [{ name = "Edoardo Abati" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "haystack-ai>=2.5.0",
  "outlines>=0.1.0",
]
[project.optional-dependencies]
mlxlm = ["mlx", "mlx-lm<0.19"]
openai = ["openai"]
transformers = ["torch", "transformers", "datasets"]

[project.urls]
Documentation = "https://github.com/EdAbati/outlines-haystack#readme"
Issues = "https://github.com/EdAbati/outlines-haystack/issues"
Source = "https://github.com/EdAbati/outlines-haystack"

[tool.hatch.version]
path = "src/outlines_haystack/__about__.py"

# Default environment
[tool.hatch.envs.default]
installer = "uv"
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
features = ["openai", "transformers"]
python = "3.9" # This is the minimum supported version

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
test-cov-all = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11", "3.12"]


# Environment for documentation
[tool.hatch.envs.docs]
dependencies = [
  "notebook",
  "ipywidgets",
]


# Type checking
[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/outlines_haystack tests}"


# Linting
[tool.hatch.envs.lint]
detached = true
dependencies = ["black>=24.3.0", "nbqa>=1.8.5", "ruff>=0.3.4"]
[tool.hatch.envs.lint.scripts]
style = [
  "ruff check {args:.}",
  "black --check --diff {args:.}",
  "nbqa black --check --diff notebooks/*",
]
fmt = [
  "black {args:.}",
  "ruff check --fix {args:.}",
  "nbqa black notebooks/*",
  "style",
]


# Tools
[tool.black]
target-version = ["py39"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py39"
line-length = 120
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # No required doctstring for modules, packages
  "D100",
  "D104",
  # No future annotations
  "FA100",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
]

[tool.ruff.lint.isort]
known-first-party = ["outlines_haystack"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/*" = ["PLR2004", "S101", "TID252", "D100", "D103"]

[tool.coverage.run]
source_pkgs = ["outlines_haystack", "tests"]
branch = true
parallel = true
omit = [
  "src/outlines_haystack/__about__.py",
]

[tool.coverage.paths]
outlines_haystack = [
  "src/outlines_haystack",
  "*/outlines-haystack/src/outlines_haystack",
]
tests = ["tests", "*/outlines-haystack/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
