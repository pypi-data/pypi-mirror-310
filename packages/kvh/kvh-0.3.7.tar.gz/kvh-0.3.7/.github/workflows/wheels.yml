name: Wheels

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
     - main
  release:
    types:
      - published
jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v4
      with:
        path: dist/*.tar.gz
        name: cibw-sdist


  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
    
    - name: install deps
      run: python -m pip install pytest meson ninja

    - uses: pypa/cibuildwheel@v2.21.3
      env:
        CIBW_ARCHS: auto64
        CIBW_ARCHS_WINDOWS: AMD64
        #CIBW_ARCHS_MACOS: auto
        CIBW_TEST_SKIP: cp38-macosx_*:arm64
        CIBW_TEST_REQUIRES: pytest
        CIBW_TEST_COMMAND: "pytest {project}/tests"
        CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"

    - name: Verify clean directory
      run: git diff --exit-code
      shell: bash

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        path: ./wheelhouse/*.whl
        name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}

  upload_all:
    name: Upload if release
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    if: github.event_name == 'push'

    steps:
    - uses: actions/download-artifact@v4
      # unpacks all CIBW artifacts into dist/
      with:
        pattern: cibw-*
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@release/v1
