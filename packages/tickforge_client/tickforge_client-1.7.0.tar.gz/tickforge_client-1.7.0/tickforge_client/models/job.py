# coding: utf-8

"""
    Tickforge API

    An API to interact with Uptick Internal Resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from tickforge_client.models.batch_id import BatchId
from tickforge_client.models.job_status import JobStatus

class Job(BaseModel):
    """
    Job
    """
    id: StrictStr = Field(...)
    app_name: StrictStr = Field(...)
    name: StrictStr = Field(...)
    batch_id: BatchId = Field(...)
    template: StrictStr = Field(...)
    cluster: StrictStr = Field(...)
    namespace: StrictStr = Field(...)
    status: JobStatus = Field(...)
    __properties = ["id", "app_name", "name", "batch_id", "template", "cluster", "namespace", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Job:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of batch_id
        if self.batch_id:
            _dict['batch_id'] = self.batch_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Job:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Job.parse_obj(obj)

        _obj = Job.parse_obj({
            "id": obj.get("id"),
            "app_name": obj.get("app_name"),
            "name": obj.get("name"),
            "batch_id": BatchId.from_dict(obj.get("batch_id")) if obj.get("batch_id") is not None else None,
            "template": obj.get("template"),
            "cluster": obj.get("cluster"),
            "namespace": obj.get("namespace"),
            "status": obj.get("status")
        })
        return _obj


