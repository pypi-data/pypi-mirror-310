# coding: utf-8

"""
    Tickforge API

    An API to interact with Uptick Internal Resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class VersionsConfig(BaseModel):
    """
    Parsed configuration from `setup.cfg` in the cluster directory.  # noqa: E501
    """
    gitops: StrictStr = Field(...)
    aws: StrictStr = Field(...)
    python: StrictStr = Field(...)
    current_release: StrictStr = Field(...)
    previous_release: StrictStr = Field(...)
    penultimate_release: StrictStr = Field(...)
    __properties = ["gitops", "aws", "python", "current_release", "previous_release", "penultimate_release"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VersionsConfig:
        """Create an instance of VersionsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VersionsConfig:
        """Create an instance of VersionsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VersionsConfig.parse_obj(obj)

        _obj = VersionsConfig.parse_obj({
            "gitops": obj.get("gitops"),
            "aws": obj.get("aws"),
            "python": obj.get("python"),
            "current_release": obj.get("current_release"),
            "previous_release": obj.get("previous_release"),
            "penultimate_release": obj.get("penultimate_release")
        })
        return _obj


