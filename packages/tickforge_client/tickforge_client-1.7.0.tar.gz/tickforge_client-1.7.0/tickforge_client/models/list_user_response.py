# coding: utf-8

"""
    Tickforge API

    An API to interact with Uptick Internal Resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, conlist
from tickforge_client.models.error import Error
from tickforge_client.models.offset import Offset
from tickforge_client.models.response_metadata import ResponseMetadata
from tickforge_client.models.slack_member import SlackMember

class ListUserResponse(BaseModel):
    """
    ListUserResponse
    """
    ok: StrictBool = Field(...)
    offset: Optional[Offset] = None
    members: conlist(SlackMember) = Field(...)
    cache_ts: StrictInt = Field(...)
    response_metadata: ResponseMetadata = Field(...)
    error: Optional[Error] = None
    __properties = ["ok", "offset", "members", "cache_ts", "response_metadata", "error"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListUserResponse:
        """Create an instance of ListUserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of offset
        if self.offset:
            _dict['offset'] = self.offset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        _items = []
        if self.members:
            for _item in self.members:
                if _item:
                    _items.append(_item.to_dict())
            _dict['members'] = _items
        # override the default output from pydantic by calling `to_dict()` of response_metadata
        if self.response_metadata:
            _dict['response_metadata'] = self.response_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListUserResponse:
        """Create an instance of ListUserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListUserResponse.parse_obj(obj)

        _obj = ListUserResponse.parse_obj({
            "ok": obj.get("ok"),
            "offset": Offset.from_dict(obj.get("offset")) if obj.get("offset") is not None else None,
            "members": [SlackMember.from_dict(_item) for _item in obj.get("members")] if obj.get("members") is not None else None,
            "cache_ts": obj.get("cache_ts"),
            "response_metadata": ResponseMetadata.from_dict(obj.get("response_metadata")) if obj.get("response_metadata") is not None else None,
            "error": Error.from_dict(obj.get("error")) if obj.get("error") is not None else None
        })
        return _obj


