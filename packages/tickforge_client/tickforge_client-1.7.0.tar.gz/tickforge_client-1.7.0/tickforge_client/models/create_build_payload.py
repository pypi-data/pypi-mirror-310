# coding: utf-8

"""
    Tickforge API

    An API to interact with Uptick Internal Resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict
from pydantic import BaseModel, Field, StrictStr

class CreateBuildPayload(BaseModel):
    """
    CreateBuildPayload
    """
    commit: StrictStr = Field(...)
    branch: StrictStr = Field(...)
    build_tags: Dict[str, Any] = Field(...)
    image_tag: StrictStr = Field(...)
    image_prefix: StrictStr = Field(...)
    author_email: StrictStr = Field(...)
    docker_repository: StrictStr = Field(...)
    github_repository: StrictStr = Field(...)
    __properties = ["commit", "branch", "build_tags", "image_tag", "image_prefix", "author_email", "docker_repository", "github_repository"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateBuildPayload:
        """Create an instance of CreateBuildPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateBuildPayload:
        """Create an instance of CreateBuildPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateBuildPayload.parse_obj(obj)

        _obj = CreateBuildPayload.parse_obj({
            "commit": obj.get("commit"),
            "branch": obj.get("branch"),
            "build_tags": obj.get("build_tags"),
            "image_tag": obj.get("image_tag"),
            "image_prefix": obj.get("image_prefix"),
            "author_email": obj.get("author_email"),
            "docker_repository": obj.get("docker_repository"),
            "github_repository": obj.get("github_repository")
        })
        return _obj


