# coding: utf-8

"""
    Tickforge API

    An API to interact with Uptick Internal Resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class CopyDBPayload(BaseModel):
    """
    CopyDBPayload
    """
    source: StrictStr = Field(...)
    destination: StrictStr = Field(...)
    skip_backup: Optional[StrictBool] = False
    exclude_tables: Optional[StrictStr] = ''
    __properties = ["source", "destination", "skip_backup", "exclude_tables"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CopyDBPayload:
        """Create an instance of CopyDBPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CopyDBPayload:
        """Create an instance of CopyDBPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CopyDBPayload.parse_obj(obj)

        _obj = CopyDBPayload.parse_obj({
            "source": obj.get("source"),
            "destination": obj.get("destination"),
            "skip_backup": obj.get("skip_backup") if obj.get("skip_backup") is not None else False,
            "exclude_tables": obj.get("exclude_tables") if obj.get("exclude_tables") is not None else ''
        })
        return _obj


