# coding: utf-8

"""
    Tickforge API

    An API to interact with Uptick Internal Resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class BodyBumpApiWorkspacesBumpPost(BaseModel):
    """
    BodyBumpApiWorkspacesBumpPost
    """
    filter: Optional[StrictStr] = ''
    exclude: Optional[StrictStr] = ''
    author_name: StrictStr = Field(...)
    author_email: StrictStr = Field(...)
    redeploy: Optional[StrictBool] = False
    __properties = ["filter", "exclude", "author_name", "author_email", "redeploy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BodyBumpApiWorkspacesBumpPost:
        """Create an instance of BodyBumpApiWorkspacesBumpPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BodyBumpApiWorkspacesBumpPost:
        """Create an instance of BodyBumpApiWorkspacesBumpPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BodyBumpApiWorkspacesBumpPost.parse_obj(obj)

        _obj = BodyBumpApiWorkspacesBumpPost.parse_obj({
            "filter": obj.get("filter") if obj.get("filter") is not None else '',
            "exclude": obj.get("exclude") if obj.get("exclude") is not None else '',
            "author_name": obj.get("author_name"),
            "author_email": obj.get("author_email"),
            "redeploy": obj.get("redeploy") if obj.get("redeploy") is not None else False
        })
        return _obj


