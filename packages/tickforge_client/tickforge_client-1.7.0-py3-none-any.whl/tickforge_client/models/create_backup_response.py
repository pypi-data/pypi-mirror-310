# coding: utf-8

"""
    Tickforge API

    An API to interact with Uptick Internal Resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, constr
from tickforge_client.models.job import Job

class CreateBackupResponse(BaseModel):
    """
    CreateBackupResponse
    """
    job: Job = Field(...)
    job_url: constr(strict=True, min_length=1) = Field(...)
    __properties = ["job", "job_url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateBackupResponse:
        """Create an instance of CreateBackupResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of job
        if self.job:
            _dict['job'] = self.job.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateBackupResponse:
        """Create an instance of CreateBackupResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateBackupResponse.parse_obj(obj)

        _obj = CreateBackupResponse.parse_obj({
            "job": Job.from_dict(obj.get("job")) if obj.get("job") is not None else None,
            "job_url": obj.get("job_url")
        })
        return _obj


