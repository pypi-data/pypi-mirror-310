# coding: utf-8

"""
    Tickforge API

    An API to interact with Uptick Internal Resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from tickforge_client.models.deleted import Deleted
from tickforge_client.models.is_admin import IsAdmin
from tickforge_client.models.is_app_user import IsAppUser
from tickforge_client.models.is_bot import IsBot
from tickforge_client.models.is_email_confirmed import IsEmailConfirmed
from tickforge_client.models.is_owner import IsOwner
from tickforge_client.models.is_primary_owner import IsPrimaryOwner
from tickforge_client.models.is_restricted import IsRestricted
from tickforge_client.models.profile import Profile
from tickforge_client.models.real_name import RealName
from tickforge_client.models.team_id import TeamId
from tickforge_client.models.tz import Tz
from tickforge_client.models.tz_label import TzLabel
from tickforge_client.models.tz_offset import TzOffset
from tickforge_client.models.updated import Updated

class SlackMember(BaseModel):
    """
    SlackMember
    """
    id: StrictStr = Field(...)
    team_id: Optional[TeamId] = None
    name: StrictStr = Field(...)
    deleted: Optional[Deleted] = None
    real_name: Optional[RealName] = None
    tz: Optional[Tz] = None
    tz_label: Optional[TzLabel] = None
    tz_offset: Optional[TzOffset] = None
    profile: Profile = Field(...)
    is_admin: Optional[IsAdmin] = None
    is_owner: Optional[IsOwner] = None
    is_primary_owner: Optional[IsPrimaryOwner] = None
    is_restricted: Optional[IsRestricted] = None
    is_bot: Optional[IsBot] = None
    is_app_user: Optional[IsAppUser] = None
    updated: Optional[Updated] = None
    is_email_confirmed: Optional[IsEmailConfirmed] = None
    __properties = ["id", "team_id", "name", "deleted", "real_name", "tz", "tz_label", "tz_offset", "profile", "is_admin", "is_owner", "is_primary_owner", "is_restricted", "is_bot", "is_app_user", "updated", "is_email_confirmed"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SlackMember:
        """Create an instance of SlackMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of team_id
        if self.team_id:
            _dict['team_id'] = self.team_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deleted
        if self.deleted:
            _dict['deleted'] = self.deleted.to_dict()
        # override the default output from pydantic by calling `to_dict()` of real_name
        if self.real_name:
            _dict['real_name'] = self.real_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tz
        if self.tz:
            _dict['tz'] = self.tz.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tz_label
        if self.tz_label:
            _dict['tz_label'] = self.tz_label.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tz_offset
        if self.tz_offset:
            _dict['tz_offset'] = self.tz_offset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_admin
        if self.is_admin:
            _dict['is_admin'] = self.is_admin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_owner
        if self.is_owner:
            _dict['is_owner'] = self.is_owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_primary_owner
        if self.is_primary_owner:
            _dict['is_primary_owner'] = self.is_primary_owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_restricted
        if self.is_restricted:
            _dict['is_restricted'] = self.is_restricted.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_bot
        if self.is_bot:
            _dict['is_bot'] = self.is_bot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_app_user
        if self.is_app_user:
            _dict['is_app_user'] = self.is_app_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated
        if self.updated:
            _dict['updated'] = self.updated.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_email_confirmed
        if self.is_email_confirmed:
            _dict['is_email_confirmed'] = self.is_email_confirmed.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SlackMember:
        """Create an instance of SlackMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SlackMember.parse_obj(obj)

        _obj = SlackMember.parse_obj({
            "id": obj.get("id"),
            "team_id": TeamId.from_dict(obj.get("team_id")) if obj.get("team_id") is not None else None,
            "name": obj.get("name"),
            "deleted": Deleted.from_dict(obj.get("deleted")) if obj.get("deleted") is not None else None,
            "real_name": RealName.from_dict(obj.get("real_name")) if obj.get("real_name") is not None else None,
            "tz": Tz.from_dict(obj.get("tz")) if obj.get("tz") is not None else None,
            "tz_label": TzLabel.from_dict(obj.get("tz_label")) if obj.get("tz_label") is not None else None,
            "tz_offset": TzOffset.from_dict(obj.get("tz_offset")) if obj.get("tz_offset") is not None else None,
            "profile": Profile.from_dict(obj.get("profile")) if obj.get("profile") is not None else None,
            "is_admin": IsAdmin.from_dict(obj.get("is_admin")) if obj.get("is_admin") is not None else None,
            "is_owner": IsOwner.from_dict(obj.get("is_owner")) if obj.get("is_owner") is not None else None,
            "is_primary_owner": IsPrimaryOwner.from_dict(obj.get("is_primary_owner")) if obj.get("is_primary_owner") is not None else None,
            "is_restricted": IsRestricted.from_dict(obj.get("is_restricted")) if obj.get("is_restricted") is not None else None,
            "is_bot": IsBot.from_dict(obj.get("is_bot")) if obj.get("is_bot") is not None else None,
            "is_app_user": IsAppUser.from_dict(obj.get("is_app_user")) if obj.get("is_app_user") is not None else None,
            "updated": Updated.from_dict(obj.get("updated")) if obj.get("updated") is not None else None,
            "is_email_confirmed": IsEmailConfirmed.from_dict(obj.get("is_email_confirmed")) if obj.get("is_email_confirmed") is not None else None
        })
        return _obj


