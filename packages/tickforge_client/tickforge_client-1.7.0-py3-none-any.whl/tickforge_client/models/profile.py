# coding: utf-8

"""
    Tickforge API

    An API to interact with Uptick Internal Resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from tickforge_client.models.always_active import AlwaysActive
from tickforge_client.models.display_name import DisplayName
from tickforge_client.models.email import Email
from tickforge_client.models.first_name import FirstName
from tickforge_client.models.image32 import Image32
from tickforge_client.models.last_name import LastName
from tickforge_client.models.real_name import RealName
from tickforge_client.models.team import Team
from tickforge_client.models.title import Title

class Profile(BaseModel):
    """
    Profile
    """
    title: Optional[Title] = None
    real_name: Optional[RealName] = None
    display_name: Optional[DisplayName] = None
    always_active: Optional[AlwaysActive] = None
    first_name: Optional[FirstName] = None
    last_name: Optional[LastName] = None
    image_32: Optional[Image32] = None
    team: Optional[Team] = None
    email: Optional[Email] = None
    __properties = ["title", "real_name", "display_name", "always_active", "first_name", "last_name", "image_32", "team", "email"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Profile:
        """Create an instance of Profile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of title
        if self.title:
            _dict['title'] = self.title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of real_name
        if self.real_name:
            _dict['real_name'] = self.real_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of display_name
        if self.display_name:
            _dict['display_name'] = self.display_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of always_active
        if self.always_active:
            _dict['always_active'] = self.always_active.to_dict()
        # override the default output from pydantic by calling `to_dict()` of first_name
        if self.first_name:
            _dict['first_name'] = self.first_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_name
        if self.last_name:
            _dict['last_name'] = self.last_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_32
        if self.image_32:
            _dict['image_32'] = self.image_32.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team
        if self.team:
            _dict['team'] = self.team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email
        if self.email:
            _dict['email'] = self.email.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Profile:
        """Create an instance of Profile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Profile.parse_obj(obj)

        _obj = Profile.parse_obj({
            "title": Title.from_dict(obj.get("title")) if obj.get("title") is not None else None,
            "real_name": RealName.from_dict(obj.get("real_name")) if obj.get("real_name") is not None else None,
            "display_name": DisplayName.from_dict(obj.get("display_name")) if obj.get("display_name") is not None else None,
            "always_active": AlwaysActive.from_dict(obj.get("always_active")) if obj.get("always_active") is not None else None,
            "first_name": FirstName.from_dict(obj.get("first_name")) if obj.get("first_name") is not None else None,
            "last_name": LastName.from_dict(obj.get("last_name")) if obj.get("last_name") is not None else None,
            "image_32": Image32.from_dict(obj.get("image_32")) if obj.get("image_32") is not None else None,
            "team": Team.from_dict(obj.get("team")) if obj.get("team") is not None else None,
            "email": Email.from_dict(obj.get("email")) if obj.get("email") is not None else None
        })
        return _obj


