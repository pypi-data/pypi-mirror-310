# coding: utf-8

"""
    Tickforge API

    An API to interact with Uptick Internal Resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictInt, StrictStr
from tickforge_client.models.size import Size

class Backup(BaseModel):
    """
    Backup
    """
    name: StrictStr = Field(...)
    var_date: datetime = Field(..., alias="date")
    size: Size = Field(...)
    size_human: StrictStr = Field(...)
    path: StrictStr = Field(...)
    idx: StrictInt = Field(...)
    __properties = ["name", "date", "size", "size_human", "path", "idx"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Backup:
        """Create an instance of Backup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Backup:
        """Create an instance of Backup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Backup.parse_obj(obj)

        _obj = Backup.parse_obj({
            "name": obj.get("name"),
            "var_date": obj.get("date"),
            "size": Size.from_dict(obj.get("size")) if obj.get("size") is not None else None,
            "size_human": obj.get("size_human"),
            "path": obj.get("path"),
            "idx": obj.get("idx")
        })
        return _obj


