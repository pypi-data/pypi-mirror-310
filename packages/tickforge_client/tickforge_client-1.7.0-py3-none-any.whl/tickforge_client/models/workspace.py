# coding: utf-8

"""
    Tickforge API

    An API to interact with Uptick Internal Resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr
from tickforge_client.models.server_timezone import ServerTimezone
from tickforge_client.models.workspace_cluster import WorkspaceCluster

class Workspace(BaseModel):
    """
    An abstraction over a gitops App  # noqa: E501
    """
    name: constr(strict=True, max_length=30, min_length=3) = Field(...)
    customer: constr(strict=True, max_length=30, min_length=3) = Field(...)
    timezone: ServerTimezone = Field(...)
    cluster: WorkspaceCluster = Field(...)
    tags: Optional[conlist(StrictStr)] = None
    __properties = ["name", "customer", "timezone", "cluster", "tags"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Workspace:
        """Create an instance of Workspace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cluster
        if self.cluster:
            _dict['cluster'] = self.cluster.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Workspace:
        """Create an instance of Workspace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Workspace.parse_obj(obj)

        _obj = Workspace.parse_obj({
            "name": obj.get("name"),
            "customer": obj.get("customer"),
            "timezone": obj.get("timezone"),
            "cluster": WorkspaceCluster.from_dict(obj.get("cluster")) if obj.get("cluster") is not None else None,
            "tags": obj.get("tags")
        })
        return _obj


