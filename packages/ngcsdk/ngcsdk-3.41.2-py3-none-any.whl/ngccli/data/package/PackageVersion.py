"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .PackageFile import PackageFile

# Unused import over optimization prevention
str(repr(PackageFile))


if sys.version_info > (3,):
    long = int
    unicode = str

class PackageVersion(object):
    """Package version object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.architectures = (
            None if not fromDict or propDict.get(
                "architectures"
            ) is None
            else propDict["architectures"])
        self.operatingSystems = (
            None if not fromDict or propDict.get(
                "operatingSystems"
            ) is None
            else propDict["operatingSystems"])
        self.releaseDate = (
            None if not fromDict or propDict.get(
                "releaseDate"
            ) is None
            else propDict["releaseDate"])
        self.releaseNotes = (
            None if not fromDict or propDict.get(
                "releaseNotes"
            ) is None
            else propDict["releaseNotes"])
        self.version = (
            None if not fromDict or propDict.get(
                "version"
            ) is None
            else propDict["version"])
        self.versionFiles = (
            None if not fromDict or propDict.get(
                "versionFiles"
            ) is None
            else [ PackageFile(i)
            for i in propDict["versionFiles"] ])

    @property
    def architectures(self):
        """list: A list of available architectures available for the package v
        ersion"""
        return self._architectures

    @architectures.setter
    def architectures(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._architectures = value
        else:
            raise TypeError(
                'Property "architectures" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def operatingSystems(self):
        """list: A list of operating systems supported by this package version
        """
        return self._operatingSystems

    @operatingSystems.setter
    def operatingSystems(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._operatingSystems = value
        else:
            raise TypeError(
                'Property "operatingSystems" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def releaseDate(self):
        """str: Release date in SO-8601 format"""
        return self._releaseDate

    @releaseDate.setter
    def releaseDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._releaseDate = value
        else:
            raise TypeError(
                'Property "releaseDate" of type "list<str>" set to wrong type'
            )

    @property
    def releaseNotes(self):
        """list: Release notes for the package version"""
        return self._releaseNotes

    @releaseNotes.setter
    def releaseNotes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._releaseNotes = value
        else:
            raise TypeError(
                'Property "releaseNotes" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def version(self):
        """str: Version string for the package version. Must adhere to semanti
        c versioning standards"""
        return self._version

    @version.setter
    def version(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._version = value
        else:
            raise TypeError(
                'Property "version" of type "list<str>" set to wrong type'
            )

    @property
    def versionFiles(self):
        """list: Files available for download for the requested package versio
        n"""
        return self._versionFiles

    @versionFiles.setter
    def versionFiles(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._versionFiles = value
        else:
            raise TypeError(
                'Property "versionFiles" of type "list<PackageFile>" set to w'
                'rong type'
            )

    def toDict(self):
        result = {}
        if self._architectures is not None:
            result["architectures"] = \
                self._architectures
        if self._operatingSystems is not None:
            result["operatingSystems"] = \
                self._operatingSystems
        if self._releaseDate is not None:
            result["releaseDate"] = \
                self._releaseDate
        if self._releaseNotes is not None:
            result["releaseNotes"] = \
                self._releaseNotes
        if self._version is not None:
            result["version"] = \
                self._version
        if self._versionFiles:
            result["versionFiles"] = [
                i.toDict() for i in self._versionFiles 
            ] if self._versionFiles else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._releaseDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._releaseDate)):
            raise ValueError(
                "PackageVersion.releaseDate: " + str(self._releaseDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._versionFiles is not None):
            for obj in self._versionFiles:
                if (obj is not None): obj.isValid()
        return True
    

