"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class UpdateGpuInfo(object):
    """GPU information in a node"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.enableMig = (
            None if not fromDict or propDict.get(
                "enableMig"
            ) is None
            else propDict["enableMig"])
        self.gpuId = (
            None if not fromDict or propDict.get(
                "gpuId"
            ) is None
            else propDict["gpuId"])
        self.migProfileName = (
            None if not fromDict or propDict.get(
                "migProfileName"
            ) is None
            else propDict["migProfileName"])

    @property
    def enableMig(self):
        """bool: enabled MIG on the GPU"""
        return self._enableMig

    @enableMig.setter
    def enableMig(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._enableMig = value
        else:
            raise TypeError(
                'Property "enableMig" of type "list<bool>" set to wrong type'
            )

    @property
    def gpuId(self):
        """str: The unique identifier of a GPU"""
        return self._gpuId

    @gpuId.setter
    def gpuId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gpuId = value
        else:
            raise TypeError(
                'Property "gpuId" of type "list<str>" set to wrong type'
            )

    @property
    def migProfileName(self):
        """str: MIG profile name from available MIG profile"""
        return self._migProfileName

    @migProfileName.setter
    def migProfileName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._migProfileName = value
        else:
            raise TypeError(
                'Property "migProfileName" of type "list<str>" set to wrong t'
                'ype'
            )

    def toDict(self):
        result = {}
        if self._enableMig is not None:
            result["enableMig"] = \
                self._enableMig
        if self._gpuId is not None:
            result["gpuId"] = \
                self._gpuId
        if self._migProfileName is not None:
            result["migProfileName"] = \
                self._migProfileName
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

