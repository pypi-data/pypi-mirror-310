"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ValidationStatus import ValidationStatus
from .BuildStatus import BuildStatus

# Unused import over optimization prevention
str(repr(ValidationStatus))
str(repr(BuildStatus))


if sys.version_info > (3,):
    long = int
    unicode = str

class CustomInstaller(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.buildStatus = (
            None if not fromDict or propDict.get(
                "buildStatus"
            ) is None
            else propDict["buildStatus"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.deviceName = (
            None if not fromDict or propDict.get(
                "deviceName"
            ) is None
            else propDict["deviceName"])
        self.installerImage = (
            None if not fromDict or propDict.get(
                "installerImage"
            ) is None
            else propDict["installerImage"])
        self.otaRunnerImage = (
            None if not fromDict or propDict.get(
                "otaRunnerImage"
            ) is None
            else propDict["otaRunnerImage"])
        self.previousVersions = (
            None if not fromDict or propDict.get(
                "previousVersions"
            ) is None
            else propDict["previousVersions"])
        self.rootfsImage = (
            None if not fromDict or propDict.get(
                "rootfsImage"
            ) is None
            else propDict["rootfsImage"])
        self.uploadedArtifacts = (
            None if not fromDict or propDict.get(
                "uploadedArtifacts"
            ) is None
            else propDict["uploadedArtifacts"])
        self.validation = (
            None if not fromDict or propDict.get(
                "validation"
            ) is None
            else propDict["validation"])
        self.version = (
            None if not fromDict or propDict.get(
                "version"
            ) is None
            else propDict["version"])

    @property
    def buildStatus(self):
        """ """
        return self._buildStatus

    @buildStatus.setter
    def buildStatus(self, value):
        if value is not None and not isinstance(value, BuildStatus):
            value = BuildStatus(value)
        if (value is None) or isinstance(value, BuildStatus):
            self._buildStatus = value
        else:
            raise TypeError(
                'Property "buildStatus" of type "list<BuildStatus>" set to wr'
                'ong type'
            )

    @property
    def description(self):
        """str: Description of the custom build"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def deviceName(self):
        """str: The device name for the installer"""
        return self._deviceName

    @deviceName.setter
    def deviceName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._deviceName = value
        else:
            raise TypeError(
                'Property "deviceName" of type "list<str>" set to wrong type'
            )

    @property
    def installerImage(self):
        """str: URL of installer image"""
        return self._installerImage

    @installerImage.setter
    def installerImage(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._installerImage = value
        else:
            raise TypeError(
                'Property "installerImage" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def otaRunnerImage(self):
        """str: URL of the runner image"""
        return self._otaRunnerImage

    @otaRunnerImage.setter
    def otaRunnerImage(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._otaRunnerImage = value
        else:
            raise TypeError(
                'Property "otaRunnerImage" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def previousVersions(self):
        """list: List of strings that tell which previous versions will OTA di
        rectly to this build"""
        return self._previousVersions

    @previousVersions.setter
    def previousVersions(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._previousVersions = value
        else:
            raise TypeError(
                'Property "previousVersions" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def rootfsImage(self):
        """str: URL of the system image"""
        return self._rootfsImage

    @rootfsImage.setter
    def rootfsImage(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._rootfsImage = value
        else:
            raise TypeError(
                'Property "rootfsImage" of type "list<str>" set to wrong type'
            )

    @property
    def uploadedArtifacts(self):
        """list: urls to uploaded artficats"""
        return self._uploadedArtifacts

    @uploadedArtifacts.setter
    def uploadedArtifacts(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._uploadedArtifacts = value
        else:
            raise TypeError(
                'Property "uploadedArtifacts" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def validation(self):
        """ """
        return self._validation

    @validation.setter
    def validation(self, value):
        if value is not None and not isinstance(value, ValidationStatus):
            value = ValidationStatus(value)
        if (value is None) or isinstance(value, ValidationStatus):
            self._validation = value
        else:
            raise TypeError(
                'Property "validation" of type "list<ValidationStatus>" set t'
                'o wrong type'
            )

    @property
    def version(self):
        """ """
        return self._version

    @version.setter
    def version(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._version = value
        else:
            raise TypeError(
                'Property "version" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._buildStatus:
            result["buildStatus"] = \
                self._buildStatus.toDict() if self._buildStatus is not None else None
        if self._description is not None:
            result["description"] = \
                self._description
        if self._deviceName is not None:
            result["deviceName"] = \
                self._deviceName
        if self._installerImage is not None:
            result["installerImage"] = \
                self._installerImage
        if self._otaRunnerImage is not None:
            result["otaRunnerImage"] = \
                self._otaRunnerImage
        if self._previousVersions is not None:
            result["previousVersions"] = \
                self._previousVersions
        if self._rootfsImage is not None:
            result["rootfsImage"] = \
                self._rootfsImage
        if self._uploadedArtifacts is not None:
            result["uploadedArtifacts"] = \
                self._uploadedArtifacts
        if self._validation:
            result["validation"] = \
                self._validation.toDict() if self._validation is not None else None
        if self._version is not None:
            result["version"] = \
                self._version
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._validation is not None): self._validation.isValid()
        if (self._buildStatus is not None): self._buildStatus.isValid()
        return True
    

