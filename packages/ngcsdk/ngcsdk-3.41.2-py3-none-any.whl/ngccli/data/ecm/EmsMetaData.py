"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class EmsMetaData(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.creationTimestamp = (
            None if not fromDict or propDict.get(
                "creationTimestamp"
            ) is None
            else propDict["creationTimestamp"])
        self.icon = (
            None if not fromDict or propDict.get(
                "icon"
            ) is None
            else propDict["icon"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.namespace = (
            None if not fromDict or propDict.get(
                "namespace"
            ) is None
            else propDict["namespace"])
        self.resourceVersion = (
            None if not fromDict or propDict.get(
                "resourceVersion"
            ) is None
            else propDict["resourceVersion"])
        self.selfLink = (
            None if not fromDict or propDict.get(
                "selfLink"
            ) is None
            else propDict["selfLink"])
        self.uid = (
            None if not fromDict or propDict.get(
                "uid"
            ) is None
            else propDict["uid"])

    @property
    def creationTimestamp(self):
        """ """
        return self._creationTimestamp

    @creationTimestamp.setter
    def creationTimestamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._creationTimestamp = value
        else:
            raise TypeError(
                'Property "creationTimestamp" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def icon(self):
        """ """
        return self._icon

    @icon.setter
    def icon(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._icon = value
        else:
            raise TypeError(
                'Property "icon" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """ """
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def namespace(self):
        """ """
        return self._namespace

    @namespace.setter
    def namespace(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._namespace = value
        else:
            raise TypeError(
                'Property "namespace" of type "list<str>" set to wrong type'
            )

    @property
    def resourceVersion(self):
        """ """
        return self._resourceVersion

    @resourceVersion.setter
    def resourceVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._resourceVersion = value
        else:
            raise TypeError(
                'Property "resourceVersion" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def selfLink(self):
        """ """
        return self._selfLink

    @selfLink.setter
    def selfLink(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._selfLink = value
        else:
            raise TypeError(
                'Property "selfLink" of type "list<str>" set to wrong type'
            )

    @property
    def uid(self):
        """ """
        return self._uid

    @uid.setter
    def uid(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._uid = value
        else:
            raise TypeError(
                'Property "uid" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._creationTimestamp is not None:
            result["creationTimestamp"] = \
                self._creationTimestamp
        if self._icon is not None:
            result["icon"] = \
                self._icon
        if self._name is not None:
            result["name"] = \
                self._name
        if self._namespace is not None:
            result["namespace"] = \
                self._namespace
        if self._resourceVersion is not None:
            result["resourceVersion"] = \
                self._resourceVersion
        if self._selfLink is not None:
            result["selfLink"] = \
                self._selfLink
        if self._uid is not None:
            result["uid"] = \
                self._uid
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

