"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ValidationStatus(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.notes = (
            None if not fromDict or propDict.get(
                "notes"
            ) is None
            else propDict["notes"])
        self.signedBy = (
            None if not fromDict or propDict.get(
                "signedBy"
            ) is None
            else propDict["signedBy"])
        self.validated = (
            None if not fromDict or propDict.get(
                "validated"
            ) is None
            else propDict["validated"])
        self.validatedTime = (
            None if not fromDict or propDict.get(
                "validatedTime"
            ) is None
            else propDict["validatedTime"])

    @property
    def notes(self):
        """ """
        return self._notes

    @notes.setter
    def notes(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._notes = value
        else:
            raise TypeError(
                'Property "notes" of type "list<str>" set to wrong type'
            )

    @property
    def signedBy(self):
        """ """
        return self._signedBy

    @signedBy.setter
    def signedBy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._signedBy = value
        else:
            raise TypeError(
                'Property "signedBy" of type "list<str>" set to wrong type'
            )

    @property
    def validated(self):
        """ """
        return self._validated

    @validated.setter
    def validated(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._validated = value
        else:
            raise TypeError(
                'Property "validated" of type "list<bool>" set to wrong type'
            )

    @property
    def validatedTime(self):
        """ """
        return self._validatedTime

    @validatedTime.setter
    def validatedTime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._validatedTime = value
        else:
            raise TypeError(
                'Property "validatedTime" of type "list<str>" set to wrong ty'
                'pe'
            )

    def toDict(self):
        result = {}
        if self._notes is not None:
            result["notes"] = \
                self._notes
        if self._signedBy is not None:
            result["signedBy"] = \
                self._signedBy
        if self._validated is not None:
            result["validated"] = \
                self._validated
        if self._validatedTime is not None:
            result["validatedTime"] = \
                self._validatedTime
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

