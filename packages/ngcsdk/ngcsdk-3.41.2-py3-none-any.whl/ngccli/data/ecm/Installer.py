"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class Installer(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.command = (
            None if not fromDict or propDict.get(
                "command"
            ) is None
            else propDict["command"])
        self.device = (
            None if not fromDict or propDict.get(
                "device"
            ) is None
            else propDict["device"])

    @property
    def command(self):
        """str: The command of the installer"""
        return self._command

    @command.setter
    def command(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._command = value
        else:
            raise TypeError(
                'Property "command" of type "list<str>" set to wrong type'
            )

    @property
    def device(self):
        """str: The device type of the installer"""
        return self._device

    @device.setter
    def device(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._device = value
        else:
            raise TypeError(
                'Property "device" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._command is not None:
            result["command"] = \
                self._command
        if self._device is not None:
            result["device"] = \
                self._device
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

