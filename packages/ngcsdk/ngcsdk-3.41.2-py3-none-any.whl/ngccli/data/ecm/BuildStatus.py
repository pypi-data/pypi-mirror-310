"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ScanResultsStatusEnum import ScanResultsStatusEnum
from .BuildStatusEnum import BuildStatusEnum

# Unused import over optimization prevention
str(repr(ScanResultsStatusEnum))
str(repr(BuildStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class BuildStatus(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.buildLog = (
            None if not fromDict or propDict.get(
                "buildLog"
            ) is None
            else propDict["buildLog"])
        self.buildStatus = (
            None if not fromDict or propDict.get(
                "buildStatus"
            ) is None
            else propDict["buildStatus"])
        self.scanResults = (
            None if not fromDict or propDict.get(
                "scanResults"
            ) is None
            else propDict["scanResults"])
        self.scanResultsStatus = (
            None if not fromDict or propDict.get(
                "scanResultsStatus"
            ) is None
            else propDict["scanResultsStatus"])

    @property
    def buildLog(self):
        """ """
        return self._buildLog

    @buildLog.setter
    def buildLog(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._buildLog = value
        else:
            raise TypeError(
                'Property "buildLog" of type "list<str>" set to wrong type'
            )

    @property
    def buildStatus(self):
        """BuildStatusEnum: All possible node status enums"""
        return self._buildStatus

    @buildStatus.setter
    def buildStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._buildStatus = value
        else:
            raise TypeError(
                'Property "buildStatus" of type "list<BuildStatusEnum>" set t'
                'o wrong type'
            )

    @property
    def scanResults(self):
        """str: The device name for the installer"""
        return self._scanResults

    @scanResults.setter
    def scanResults(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._scanResults = value
        else:
            raise TypeError(
                'Property "scanResults" of type "list<str>" set to wrong type'
            )

    @property
    def scanResultsStatus(self):
        """ScanResultsStatusEnum: All possible scan results status enums"""
        return self._scanResultsStatus

    @scanResultsStatus.setter
    def scanResultsStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._scanResultsStatus = value
        else:
            raise TypeError(
                'Property "scanResultsStatus" of type "list<ScanResultsStatus'
                'Enum>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._buildLog is not None:
            result["buildLog"] = \
                self._buildLog
        if self._buildStatus is not None:
            result["buildStatus"] = \
                self._buildStatus
        if self._scanResults is not None:
            result["scanResults"] = \
                self._scanResults
        if self._scanResultsStatus is not None:
            result["scanResultsStatus"] = \
                self._scanResultsStatus
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

