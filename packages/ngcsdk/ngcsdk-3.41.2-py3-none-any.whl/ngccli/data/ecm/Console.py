"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RemoteManagerStatusTypeEnum import RemoteManagerStatusTypeEnum

# Unused import over optimization prevention
str(repr(RemoteManagerStatusTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class Console(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.consoleUrl = (
            None if not fromDict or propDict.get(
                "consoleUrl"
            ) is None
            else propDict["consoleUrl"])
        self.locationName = (
            None if not fromDict or propDict.get(
                "locationName"
            ) is None
            else propDict["locationName"])
        self.nodeName = (
            None if not fromDict or propDict.get(
                "nodeName"
            ) is None
            else propDict["nodeName"])
        self.sessionRemainingTime = (
            None if not fromDict or propDict.get(
                "sessionRemainingTime"
            ) is None
            else propDict["sessionRemainingTime"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])

    @property
    def consoleUrl(self):
        """ """
        return self._consoleUrl

    @consoleUrl.setter
    def consoleUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._consoleUrl = value
        else:
            raise TypeError(
                'Property "consoleUrl" of type "list<str>" set to wrong type'
            )

    @property
    def locationName(self):
        """ """
        return self._locationName

    @locationName.setter
    def locationName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._locationName = value
        else:
            raise TypeError(
                'Property "locationName" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def nodeName(self):
        """ """
        return self._nodeName

    @nodeName.setter
    def nodeName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._nodeName = value
        else:
            raise TypeError(
                'Property "nodeName" of type "list<str>" set to wrong type'
            )

    @property
    def sessionRemainingTime(self):
        """int: Session remaining time in seconds. Formula: maxSessionDuration
         - (now - sessionCreationTime)"""
        return self._sessionRemainingTime

    @sessionRemainingTime.setter
    def sessionRemainingTime(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._sessionRemainingTime = value
        else:
            raise TypeError(
                'Property "sessionRemainingTime" of type "list<int>" set to w'
                'rong type'
            )

    @property
    def status(self):
        """RemoteManagerStatusTypeEnum: All possible remote manager status enu
        ms"""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<RemoteManagerStatusTypeEnum>'
                '" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._consoleUrl is not None:
            result["consoleUrl"] = \
                self._consoleUrl
        if self._locationName is not None:
            result["locationName"] = \
                self._locationName
        if self._nodeName is not None:
            result["nodeName"] = \
                self._nodeName
        if self._sessionRemainingTime is not None:
            result["sessionRemainingTime"] = \
                self._sessionRemainingTime
        if self._status is not None:
            result["status"] = \
                self._status
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._locationName is not None
            and
            len(self._locationName) > 53):
            raise ValueError(
                "Console.locationName: " + str(self._locationName) + 
                " doesnt match requirement: maxLength: 53")
        if (self._locationName is not None
            and
            not re.match(
                r"^[a-z]([-a-z0-9]*[a-z0-9])?$",
                 self._locationName)):
            raise ValueError(
                "Console.locationName: " + str(self._locationName) + 
                " doesnt match requirement: pattern: ^[a-z]([-a-z0-9]*[a-z0-9"
                "])?$")
        if (self._nodeName is not None
            and
            len(self._nodeName) > 53):
            raise ValueError(
                "Console.nodeName: " + str(self._nodeName) + 
                " doesnt match requirement: maxLength: 53")
        if (self._nodeName is not None
            and
            not re.match(
                r"^[a-z]([-a-z0-9]*[a-z0-9])?$",
                 self._nodeName)):
            raise ValueError(
                "Console.nodeName: " + str(self._nodeName) + 
                " doesnt match requirement: pattern: ^[a-z]([-a-z0-9]*[a-z0-9"
                "])?$")
        return True
    

