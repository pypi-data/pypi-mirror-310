"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .TypeVersion import TypeVersion

# Unused import over optimization prevention
str(repr(TypeVersion))


if sys.version_info > (3,):
    long = int
    unicode = str

class UpdateLocationRequest(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.address = (
            None if not fromDict or propDict.get(
                "address"
            ) is None
            else propDict["address"])
        self.allowHighAvailability = (
            None if not fromDict or propDict.get(
                "allowHighAvailability"
            ) is None
            else propDict["allowHighAvailability"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.locationClusterReset = (
            None if not fromDict or propDict.get(
                "locationClusterReset"
            ) is None
            else propDict["locationClusterReset"])
        self.signedContainersEnabled = (
            None if not fromDict or propDict.get(
                "signedContainersEnabled"
            ) is None
            else propDict["signedContainersEnabled"])
        self.updateCustomVersions = (
            None if not fromDict or propDict.get(
                "updateCustomVersions"
            ) is None
            else [ TypeVersion(i)
            for i in propDict["updateCustomVersions"] ])
        self.updateVersion = (
            None if not fromDict or propDict.get(
                "updateVersion"
            ) is None
            else propDict["updateVersion"])

    @property
    def address(self):
        """str: Address of the location"""
        return self._address

    @address.setter
    def address(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._address = value
        else:
            raise TypeError(
                'Property "address" of type "list<str>" set to wrong type'
            )

    @property
    def allowHighAvailability(self):
        """bool: Location is HA or not"""
        return self._allowHighAvailability

    @allowHighAvailability.setter
    def allowHighAvailability(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowHighAvailability = value
        else:
            raise TypeError(
                'Property "allowHighAvailability" of type "list<bool>" set to'
                ' wrong type'
            )

    @property
    def description(self):
        """str: Description of the location"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: Display name of the location"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def locationClusterReset(self):
        """bool: reset command for each node in the location"""
        return self._locationClusterReset

    @locationClusterReset.setter
    def locationClusterReset(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._locationClusterReset = value
        else:
            raise TypeError(
                'Property "locationClusterReset" of type "list<bool>" set to '
                'wrong type'
            )

    @property
    def signedContainersEnabled(self):
        """bool: Location has signed containers required or not"""
        return self._signedContainersEnabled

    @signedContainersEnabled.setter
    def signedContainersEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._signedContainersEnabled = value
        else:
            raise TypeError(
                'Property "signedContainersEnabled" of type "list<bool>" set '
                'to wrong type'
            )

    @property
    def updateCustomVersions(self):
        """list: Update a system images for types at a location"""
        return self._updateCustomVersions

    @updateCustomVersions.setter
    def updateCustomVersions(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._updateCustomVersions = value
        else:
            raise TypeError(
                'Property "updateCustomVersions" of type "list<TypeVersion>" '
                'set to wrong type'
            )

    @property
    def updateVersion(self):
        """str: update a new version for a location"""
        return self._updateVersion

    @updateVersion.setter
    def updateVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updateVersion = value
        else:
            raise TypeError(
                'Property "updateVersion" of type "list<str>" set to wrong ty'
                'pe'
            )

    def toDict(self):
        result = {}
        if self._address is not None:
            result["address"] = \
                self._address
        if self._allowHighAvailability is not None:
            result["allowHighAvailability"] = \
                self._allowHighAvailability
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._locationClusterReset is not None:
            result["locationClusterReset"] = \
                self._locationClusterReset
        if self._signedContainersEnabled is not None:
            result["signedContainersEnabled"] = \
                self._signedContainersEnabled
        if self._updateCustomVersions:
            result["updateCustomVersions"] = [
                i.toDict() for i in self._updateCustomVersions 
            ] if self._updateCustomVersions else []
        if self._updateVersion is not None:
            result["updateVersion"] = \
                self._updateVersion
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._displayName is not None
            and
            len(self._displayName) > 255):
            raise ValueError(
                "UpdateLocationRequest.displayName: " + str(self._displayName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._updateCustomVersions is not None):
            for obj in self._updateCustomVersions:
                if (obj is not None): obj.isValid()
        return True
    

