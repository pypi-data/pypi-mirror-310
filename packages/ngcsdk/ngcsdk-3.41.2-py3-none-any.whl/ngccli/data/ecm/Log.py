"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .MetaData import MetaData

# Unused import over optimization prevention
str(repr(MetaData))


if sys.version_info > (3,):
    long = int
    unicode = str

class Log(object):
    """Log object includes log message, timestamp and a list of key-value pair
    s (log details)"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.logDetails = (
            None if not fromDict or propDict.get(
                "logDetails"
            ) is None
            else [ MetaData(i)
            for i in propDict["logDetails"] ])
        self.logMessage = (
            None if not fromDict or propDict.get(
                "logMessage"
            ) is None
            else propDict["logMessage"])
        self.timestamp = (
            None if not fromDict or propDict.get(
                "timestamp"
            ) is None
            else propDict["timestamp"])

    @property
    def logDetails(self):
        """list: A list of key value pairs to show log detail"""
        return self._logDetails

    @logDetails.setter
    def logDetails(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._logDetails = value
        else:
            raise TypeError(
                'Property "logDetails" of type "list<MetaData>" set to wrong '
                'type'
            )

    @property
    def logMessage(self):
        """str: Log message"""
        return self._logMessage

    @logMessage.setter
    def logMessage(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logMessage = value
        else:
            raise TypeError(
                'Property "logMessage" of type "list<str>" set to wrong type'
            )

    @property
    def timestamp(self):
        """str: Log timestamp"""
        return self._timestamp

    @timestamp.setter
    def timestamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._timestamp = value
        else:
            raise TypeError(
                'Property "timestamp" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._logDetails:
            result["logDetails"] = [
                i.toDict() for i in self._logDetails 
            ] if self._logDetails else []
        if self._logMessage is not None:
            result["logMessage"] = \
                self._logMessage
        if self._timestamp is not None:
            result["timestamp"] = \
                self._timestamp
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._logDetails is not None):
            for obj in self._logDetails:
                if (obj is not None): obj.isValid()
        return True
    

