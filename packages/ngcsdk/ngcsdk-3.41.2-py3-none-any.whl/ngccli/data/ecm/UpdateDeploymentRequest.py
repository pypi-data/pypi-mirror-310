"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class UpdateDeploymentRequest(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.allowAnyCapability = (
            None if not fromDict or propDict.get(
                "allowAnyCapability"
            ) is None
            else propDict["allowAnyCapability"])
        self.allowAnyHostPath = (
            None if not fromDict or propDict.get(
                "allowAnyHostPath"
            ) is None
            else propDict["allowAnyHostPath"])
        self.allowDevMount = (
            None if not fromDict or propDict.get(
                "allowDevMount"
            ) is None
            else propDict["allowDevMount"])
        self.allowHostNamespace = (
            None if not fromDict or propDict.get(
                "allowHostNamespace"
            ) is None
            else propDict["allowHostNamespace"])
        self.allowHostPathPV = (
            None if not fromDict or propDict.get(
                "allowHostPathPV"
            ) is None
            else propDict["allowHostPathPV"])
        self.allowPrivileged = (
            None if not fromDict or propDict.get(
                "allowPrivileged"
            ) is None
            else propDict["allowPrivileged"])
        self.appConfigName = (
            None if not fromDict or propDict.get(
                "appConfigName"
            ) is None
            else propDict["appConfigName"])
        self.appName = (
            None if not fromDict or propDict.get(
                "appName"
            ) is None
            else propDict["appName"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.locations = (
            None if not fromDict or propDict.get(
                "locations"
            ) is None
            else propDict["locations"])

    @property
    def allowAnyCapability(self):
        """bool: Allow Any Process Capability Flags to the Application Deploym
        ent"""
        return self._allowAnyCapability

    @allowAnyCapability.setter
    def allowAnyCapability(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowAnyCapability = value
        else:
            raise TypeError(
                'Property "allowAnyCapability" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def allowAnyHostPath(self):
        """bool: Allow Any System HostPath Access to the Application Deploymen
        t"""
        return self._allowAnyHostPath

    @allowAnyHostPath.setter
    def allowAnyHostPath(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowAnyHostPath = value
        else:
            raise TypeError(
                'Property "allowAnyHostPath" of type "list<bool>" set to wron'
                'g type'
            )

    @property
    def allowDevMount(self):
        """bool: Allow System Devices Access to the Application Deployment"""
        return self._allowDevMount

    @allowDevMount.setter
    def allowDevMount(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowDevMount = value
        else:
            raise TypeError(
                'Property "allowDevMount" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def allowHostNamespace(self):
        """bool: Allow System Process Access to the Application Deployment"""
        return self._allowHostNamespace

    @allowHostNamespace.setter
    def allowHostNamespace(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowHostNamespace = value
        else:
            raise TypeError(
                'Property "allowHostNamespace" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def allowHostPathPV(self):
        """bool: Allow System HostPath Access for PersistentVolumes to the App
        lication Deployment"""
        return self._allowHostPathPV

    @allowHostPathPV.setter
    def allowHostPathPV(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowHostPathPV = value
        else:
            raise TypeError(
                'Property "allowHostPathPV" of type "list<bool>" set to wrong'
                ' type'
            )

    @property
    def allowPrivileged(self):
        """bool: Allow Privileged Containers to the Application Deployment"""
        return self._allowPrivileged

    @allowPrivileged.setter
    def allowPrivileged(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowPrivileged = value
        else:
            raise TypeError(
                'Property "allowPrivileged" of type "list<bool>" set to wrong'
                ' type'
            )

    @property
    def appConfigName(self):
        """str: App configurations in the deployment"""
        return self._appConfigName

    @appConfigName.setter
    def appConfigName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._appConfigName = value
        else:
            raise TypeError(
                'Property "appConfigName" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def appName(self):
        """str: App in the deployment"""
        return self._appName

    @appName.setter
    def appName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._appName = value
        else:
            raise TypeError(
                'Property "appName" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: Display name of the deployment"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def locations(self):
        """list: App deploys in locations"""
        return self._locations

    @locations.setter
    def locations(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._locations = value
        else:
            raise TypeError(
                'Property "locations" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._allowAnyCapability is not None:
            result["allowAnyCapability"] = \
                self._allowAnyCapability
        if self._allowAnyHostPath is not None:
            result["allowAnyHostPath"] = \
                self._allowAnyHostPath
        if self._allowDevMount is not None:
            result["allowDevMount"] = \
                self._allowDevMount
        if self._allowHostNamespace is not None:
            result["allowHostNamespace"] = \
                self._allowHostNamespace
        if self._allowHostPathPV is not None:
            result["allowHostPathPV"] = \
                self._allowHostPathPV
        if self._allowPrivileged is not None:
            result["allowPrivileged"] = \
                self._allowPrivileged
        if self._appConfigName is not None:
            result["appConfigName"] = \
                self._appConfigName
        if self._appName is not None:
            result["appName"] = \
                self._appName
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._locations is not None:
            result["locations"] = \
                self._locations
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._displayName is not None
            and
            len(self._displayName) > 255):
            raise ValueError(
                "UpdateDeploymentRequest.displayName: " + str(self._displayName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._appName is not None
            and
            len(self._appName) > 53):
            raise ValueError(
                "UpdateDeploymentRequest.appName: " + str(self._appName) + 
                " doesnt match requirement: maxLength: 53")
        return True
    

