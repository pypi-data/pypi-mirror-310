"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .LocationHealthEnum import LocationHealthEnum
from .UpdateStatusEnum import UpdateStatusEnum
from .Node import Node
from .TypeVersions import TypeVersions
from .LocationStatusEnum import LocationStatusEnum
from .LocationAvailabilityEnum import LocationAvailabilityEnum

# Unused import over optimization prevention
str(repr(LocationHealthEnum))
str(repr(LocationAvailabilityEnum))
str(repr(TypeVersions))
str(repr(Node))
str(repr(LocationStatusEnum))
str(repr(UpdateStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class Location(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.address = (
            None if not fromDict or propDict.get(
                "address"
            ) is None
            else propDict["address"])
        self.allowHighAvailability = (
            None if not fromDict or propDict.get(
                "allowHighAvailability"
            ) is None
            else propDict["allowHighAvailability"])
        self.argoCDEnabled = (
            None if not fromDict or propDict.get(
                "argoCDEnabled"
            ) is None
            else propDict["argoCDEnabled"])
        self.availability = (
            None if not fromDict or propDict.get(
                "availability"
            ) is None
            else propDict["availability"])
        self.canBeDeleted = (
            None if not fromDict or propDict.get(
                "canBeDeleted"
            ) is None
            else propDict["canBeDeleted"])
        self.creationTimestamp = (
            None if not fromDict or propDict.get(
                "creationTimestamp"
            ) is None
            else propDict["creationTimestamp"])
        self.currentLocationHealth = (
            None if not fromDict or propDict.get(
                "currentLocationHealth"
            ) is None
            else propDict["currentLocationHealth"])
        self.currentVersion = (
            None if not fromDict or propDict.get(
                "currentVersion"
            ) is None
            else propDict["currentVersion"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.issues = (
            None if not fromDict or propDict.get(
                "issues"
            ) is None
            else propDict["issues"])
        self.lastReportedStatus = (
            None if not fromDict or propDict.get(
                "lastReportedStatus"
            ) is None
            else propDict["lastReportedStatus"])
        self.lastReportedStatusTime = (
            None if not fromDict or propDict.get(
                "lastReportedStatusTime"
            ) is None
            else propDict["lastReportedStatusTime"])
        self.lastUpdatedTimestamp = (
            None if not fromDict or propDict.get(
                "lastUpdatedTimestamp"
            ) is None
            else propDict["lastUpdatedTimestamp"])
        self.logsUrl = (
            None if not fromDict or propDict.get(
                "logsUrl"
            ) is None
            else propDict["logsUrl"])
        self.messages = (
            None if not fromDict or propDict.get(
                "messages"
            ) is None
            else propDict["messages"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.nextAvailableCustomVersions = (
            None if not fromDict or propDict.get(
                "nextAvailableCustomVersions"
            ) is None
            else [ TypeVersions(i)
            for i in propDict["nextAvailableCustomVersions"] ])
        self.nextAvailableVersions = (
            None if not fromDict or propDict.get(
                "nextAvailableVersions"
            ) is None
            else propDict["nextAvailableVersions"])
        self.nodes = (
            None if not fromDict or propDict.get(
                "nodes"
            ) is None
            else [ Node(i)
            for i in propDict["nodes"] ])
        self.signedContainersEnabled = (
            None if not fromDict or propDict.get(
                "signedContainersEnabled"
            ) is None
            else propDict["signedContainersEnabled"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])
        self.updateStatus = (
            None if not fromDict or propDict.get(
                "updateStatus"
            ) is None
            else propDict["updateStatus"])

    @property
    def address(self):
        """str: Address of the location"""
        return self._address

    @address.setter
    def address(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._address = value
        else:
            raise TypeError(
                'Property "address" of type "list<str>" set to wrong type'
            )

    @property
    def allowHighAvailability(self):
        """bool: Location is HA or not"""
        return self._allowHighAvailability

    @allowHighAvailability.setter
    def allowHighAvailability(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowHighAvailability = value
        else:
            raise TypeError(
                'Property "allowHighAvailability" of type "list<bool>" set to'
                ' wrong type'
            )

    @property
    def argoCDEnabled(self):
        """bool: Location has ArgoCD deployments enabled or not"""
        return self._argoCDEnabled

    @argoCDEnabled.setter
    def argoCDEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._argoCDEnabled = value
        else:
            raise TypeError(
                'Property "argoCDEnabled" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def availability(self):
        """LocationAvailabilityEnum: All possible values for location availabi
        lity"""
        return self._availability

    @availability.setter
    def availability(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._availability = value
        else:
            raise TypeError(
                'Property "availability" of type "list<LocationAvailabilityEn'
                'um>" set to wrong type'
            )

    @property
    def canBeDeleted(self):
        """bool: Location cannot be used in deployment and can not have system
        s/nodes"""
        return self._canBeDeleted

    @canBeDeleted.setter
    def canBeDeleted(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._canBeDeleted = value
        else:
            raise TypeError(
                'Property "canBeDeleted" of type "list<bool>" set to wrong ty'
                'pe'
            )

    @property
    def creationTimestamp(self):
        """ """
        return self._creationTimestamp

    @creationTimestamp.setter
    def creationTimestamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._creationTimestamp = value
        else:
            raise TypeError(
                'Property "creationTimestamp" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def currentLocationHealth(self):
        """LocationHealthEnum: All possible location health enums"""
        return self._currentLocationHealth

    @currentLocationHealth.setter
    def currentLocationHealth(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._currentLocationHealth = value
        else:
            raise TypeError(
                'Property "currentLocationHealth" of type "list<LocationHealt'
                'hEnum>" set to wrong type'
            )

    @property
    def currentVersion(self):
        """ """
        return self._currentVersion

    @currentVersion.setter
    def currentVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._currentVersion = value
        else:
            raise TypeError(
                'Property "currentVersion" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def description(self):
        """str: Description of the location"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: Display name of the location"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def issues(self):
        """list: Issues to show in the banner"""
        return self._issues

    @issues.setter
    def issues(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._issues = value
        else:
            raise TypeError(
                'Property "issues" of type "list<str>" set to wrong type'
            )

    @property
    def lastReportedStatus(self):
        """LocationStatusEnum: All possible location status enums"""
        return self._lastReportedStatus

    @lastReportedStatus.setter
    def lastReportedStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._lastReportedStatus = value
        else:
            raise TypeError(
                'Property "lastReportedStatus" of type "list<LocationStatusEn'
                'um>" set to wrong type'
            )

    @property
    def lastReportedStatusTime(self):
        """ """
        return self._lastReportedStatusTime

    @lastReportedStatusTime.setter
    def lastReportedStatusTime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastReportedStatusTime = value
        else:
            raise TypeError(
                'Property "lastReportedStatusTime" of type "list<str>" set to'
                ' wrong type'
            )

    @property
    def lastUpdatedTimestamp(self):
        """ """
        return self._lastUpdatedTimestamp

    @lastUpdatedTimestamp.setter
    def lastUpdatedTimestamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastUpdatedTimestamp = value
        else:
            raise TypeError(
                'Property "lastUpdatedTimestamp" of type "list<str>" set to w'
                'rong type'
            )

    @property
    def logsUrl(self):
        """str: Logs url for location"""
        return self._logsUrl

    @logsUrl.setter
    def logsUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logsUrl = value
        else:
            raise TypeError(
                'Property "logsUrl" of type "list<str>" set to wrong type'
            )

    @property
    def messages(self):
        """list: Messages to show in the banner"""
        return self._messages

    @messages.setter
    def messages(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._messages = value
        else:
            raise TypeError(
                'Property "messages" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Name of the location"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def nextAvailableCustomVersions(self):
        """list: Next available system versions based on type"""
        return self._nextAvailableCustomVersions

    @nextAvailableCustomVersions.setter
    def nextAvailableCustomVersions(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._nextAvailableCustomVersions = value
        else:
            raise TypeError(
                'Property "nextAvailableCustomVersions" of type "list<TypeVer'
                'sions>" set to wrong type'
            )

    @property
    def nextAvailableVersions(self):
        """list: Next available versions in the location"""
        return self._nextAvailableVersions

    @nextAvailableVersions.setter
    def nextAvailableVersions(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._nextAvailableVersions = value
        else:
            raise TypeError(
                'Property "nextAvailableVersions" of type "list<str>" set to '
                'wrong type'
            )

    @property
    def nodes(self):
        """list: array of nodes that in the location"""
        return self._nodes

    @nodes.setter
    def nodes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._nodes = value
        else:
            raise TypeError(
                'Property "nodes" of type "list<Node>" set to wrong type'
            )

    @property
    def signedContainersEnabled(self):
        """bool: Location has signed containers required or not"""
        return self._signedContainersEnabled

    @signedContainersEnabled.setter
    def signedContainersEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._signedContainersEnabled = value
        else:
            raise TypeError(
                'Property "signedContainersEnabled" of type "list<bool>" set '
                'to wrong type'
            )

    @property
    def status(self):
        """LocationStatusEnum: All possible location status enums"""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<LocationStatusEnum>" set to '
                'wrong type'
            )

    @property
    def updateStatus(self):
        """UpdateStatusEnum: All possible update status enums"""
        return self._updateStatus

    @updateStatus.setter
    def updateStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._updateStatus = value
        else:
            raise TypeError(
                'Property "updateStatus" of type "list<UpdateStatusEnum>" set'
                ' to wrong type'
            )

    def toDict(self):
        result = {}
        if self._address is not None:
            result["address"] = \
                self._address
        if self._allowHighAvailability is not None:
            result["allowHighAvailability"] = \
                self._allowHighAvailability
        if self._argoCDEnabled is not None:
            result["argoCDEnabled"] = \
                self._argoCDEnabled
        if self._availability is not None:
            result["availability"] = \
                self._availability
        if self._canBeDeleted is not None:
            result["canBeDeleted"] = \
                self._canBeDeleted
        if self._creationTimestamp is not None:
            result["creationTimestamp"] = \
                self._creationTimestamp
        if self._currentLocationHealth is not None:
            result["currentLocationHealth"] = \
                self._currentLocationHealth
        if self._currentVersion is not None:
            result["currentVersion"] = \
                self._currentVersion
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._issues is not None:
            result["issues"] = \
                self._issues
        if self._lastReportedStatus is not None:
            result["lastReportedStatus"] = \
                self._lastReportedStatus
        if self._lastReportedStatusTime is not None:
            result["lastReportedStatusTime"] = \
                self._lastReportedStatusTime
        if self._lastUpdatedTimestamp is not None:
            result["lastUpdatedTimestamp"] = \
                self._lastUpdatedTimestamp
        if self._logsUrl is not None:
            result["logsUrl"] = \
                self._logsUrl
        if self._messages is not None:
            result["messages"] = \
                self._messages
        if self._name is not None:
            result["name"] = \
                self._name
        if self._nextAvailableCustomVersions:
            result["nextAvailableCustomVersions"] = [
                i.toDict() for i in self._nextAvailableCustomVersions 
            ] if self._nextAvailableCustomVersions else []
        if self._nextAvailableVersions is not None:
            result["nextAvailableVersions"] = \
                self._nextAvailableVersions
        if self._nodes:
            result["nodes"] = [
                i.toDict() for i in self._nodes 
            ] if self._nodes else []
        if self._signedContainersEnabled is not None:
            result["signedContainersEnabled"] = \
                self._signedContainersEnabled
        if self._status is not None:
            result["status"] = \
                self._status
        if self._updateStatus is not None:
            result["updateStatus"] = \
                self._updateStatus
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._name is not None
            and
            len(self._name) > 53):
            raise ValueError(
                "Location.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 53")
        if (self._name is not None
            and
            not re.match(
                r"^[a-z]([-a-z0-9]*[a-z0-9])?$",
                 self._name)):
            raise ValueError(
                "Location.name: " + str(self._name) + 
                " doesnt match requirement: pattern: ^[a-z]([-a-z0-9]*[a-z0-9"
                "])?$")
        if (self._displayName is not None
            and
            len(self._displayName) > 255):
            raise ValueError(
                "Location.displayName: " + str(self._displayName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._nodes is not None):
            for obj in self._nodes:
                if (obj is not None): obj.isValid()
        if (self._nextAvailableCustomVersions is not None):
            for obj in self._nextAvailableCustomVersions:
                if (obj is not None): obj.isValid()
        return True
    

