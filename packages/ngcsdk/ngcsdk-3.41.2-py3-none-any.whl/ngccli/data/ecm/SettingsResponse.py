"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RequestStatus import RequestStatus
from .SecurityMinimunSupportedVersion import SecurityMinimunSupportedVersion
from .Iso import Iso
from .Installer import Installer
from .TypeVersions import TypeVersions
from .Alert import Alert

# Unused import over optimization prevention
str(repr(SecurityMinimunSupportedVersion))
str(repr(Installer))
str(repr(TypeVersions))
str(repr(Alert))
str(repr(RequestStatus))
str(repr(Iso))


if sys.version_info > (3,):
    long = int
    unicode = str

class SettingsResponse(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.alerts = (
            None if not fromDict or propDict.get(
                "alerts"
            ) is None
            else [ Alert(i)
            for i in propDict["alerts"] ])
        self.allowDevMount = (
            None if not fromDict or propDict.get(
                "allowDevMount"
            ) is None
            else propDict["allowDevMount"])
        self.allowSecurityOverrides = (
            None if not fromDict or propDict.get(
                "allowSecurityOverrides"
            ) is None
            else propDict["allowSecurityOverrides"])
        self.availableSystemVersions = (
            None if not fromDict or propDict.get(
                "availableSystemVersions"
            ) is None
            else [ TypeVersions(i)
            for i in propDict["availableSystemVersions"] ])
        self.bannerMessage = (
            None if not fromDict or propDict.get(
                "bannerMessage"
            ) is None
            else propDict["bannerMessage"])
        self.installers = (
            None if not fromDict or propDict.get(
                "installers"
            ) is None
            else [ Installer(i)
            for i in propDict["installers"] ])
        self.isos = (
            None if not fromDict or propDict.get(
                "isos"
            ) is None
            else [ Iso(i)
            for i in propDict["isos"] ])
        self.loggingOptionsEnableApplicationLogs = (
            None if not fromDict or propDict.get(
                "loggingOptionsEnableApplicationLogs"
            ) is None
            else propDict["loggingOptionsEnableApplicationLogs"])
        self.loggingOptionsEnableFullSystemLogs = (
            None if not fromDict or propDict.get(
                "loggingOptionsEnableFullSystemLogs"
            ) is None
            else propDict["loggingOptionsEnableFullSystemLogs"])
        self.remoteAppIsEnabled = (
            None if not fromDict or propDict.get(
                "remoteAppIsEnabled"
            ) is None
            else propDict["remoteAppIsEnabled"])
        self.remoteAppMaxSessionDuration = (
            None if not fromDict or propDict.get(
                "remoteAppMaxSessionDuration"
            ) is None
            else propDict["remoteAppMaxSessionDuration"])
        self.remoteAppMaxSessionDurationUpperLimit = (
            None if not fromDict or propDict.get(
                "remoteAppMaxSessionDurationUpperLimit"
            ) is None
            else propDict["remoteAppMaxSessionDurationUpperLimit"])
        self.remoteManagementIsEnabled = (
            None if not fromDict or propDict.get(
                "remoteManagementIsEnabled"
            ) is None
            else propDict["remoteManagementIsEnabled"])
        self.remoteManagementMaxSessionCount = (
            None if not fromDict or propDict.get(
                "remoteManagementMaxSessionCount"
            ) is None
            else propDict["remoteManagementMaxSessionCount"])
        self.remoteManagementMaxSessionDuration = (
            None if not fromDict or propDict.get(
                "remoteManagementMaxSessionDuration"
            ) is None
            else propDict["remoteManagementMaxSessionDuration"])
        self.remoteManagementMaxSessionDurationUpperLimit = (
            None if not fromDict or propDict.get(
                "remoteManagementMaxSessionDurationUpperLimit"
            ) is None
            else propDict["remoteManagementMaxSessionDurationUpperLimit"])
        self.remoteManagementMaxSessionIdle = (
            None if not fromDict or propDict.get(
                "remoteManagementMaxSessionIdle"
            ) is None
            else propDict["remoteManagementMaxSessionIdle"])
        self.remoteManagementSupportedVersion = (
            None if not fromDict or propDict.get(
                "remoteManagementSupportedVersion"
            ) is None
            else propDict["remoteManagementSupportedVersion"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])
        self.securityOptionSupportInfo = (
            None if not fromDict or propDict.get(
                "securityOptionSupportInfo"
            ) is None
            else [ SecurityMinimunSupportedVersion(i)
            for i in propDict["securityOptionSupportInfo"] ])
        self.supportedLocationVersions = (
            None if not fromDict or propDict.get(
                "supportedLocationVersions"
            ) is None
            else propDict["supportedLocationVersions"])

    @property
    def alerts(self):
        """ """
        return self._alerts

    @alerts.setter
    def alerts(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._alerts = value
        else:
            raise TypeError(
                'Property "alerts" of type "list<Alert>" set to wrong type'
            )

    @property
    def allowDevMount(self):
        """bool: allow users to access /dev in deployments"""
        return self._allowDevMount

    @allowDevMount.setter
    def allowDevMount(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowDevMount = value
        else:
            raise TypeError(
                'Property "allowDevMount" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def allowSecurityOverrides(self):
        """bool: allow users to override security options in deployments"""
        return self._allowSecurityOverrides

    @allowSecurityOverrides.setter
    def allowSecurityOverrides(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowSecurityOverrides = value
        else:
            raise TypeError(
                'Property "allowSecurityOverrides" of type "list<bool>" set t'
                'o wrong type'
            )

    @property
    def availableSystemVersions(self):
        """list: array of available system versions"""
        return self._availableSystemVersions

    @availableSystemVersions.setter
    def availableSystemVersions(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._availableSystemVersions = value
        else:
            raise TypeError(
                'Property "availableSystemVersions" of type "list<TypeVersion'
                's>" set to wrong type'
            )

    @property
    def bannerMessage(self):
        """str: Message text to display on UI banner"""
        return self._bannerMessage

    @bannerMessage.setter
    def bannerMessage(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._bannerMessage = value
        else:
            raise TypeError(
                'Property "bannerMessage" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def installers(self):
        """list: Available FC installers"""
        return self._installers

    @installers.setter
    def installers(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._installers = value
        else:
            raise TypeError(
                'Property "installers" of type "list<Installer>" set to wrong'
                ' type'
            )

    @property
    def isos(self):
        """list: array of object that describes available ISOs"""
        return self._isos

    @isos.setter
    def isos(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._isos = value
        else:
            raise TypeError(
                'Property "isos" of type "list<Iso>" set to wrong type'
            )

    @property
    def loggingOptionsEnableApplicationLogs(self):
        """ """
        return self._loggingOptionsEnableApplicationLogs

    @loggingOptionsEnableApplicationLogs.setter
    def loggingOptionsEnableApplicationLogs(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._loggingOptionsEnableApplicationLogs = value
        else:
            raise TypeError(
                'Property "loggingOptionsEnableApplicationLogs" of type "list'
                '<bool>" set to wrong type'
            )

    @property
    def loggingOptionsEnableFullSystemLogs(self):
        """ """
        return self._loggingOptionsEnableFullSystemLogs

    @loggingOptionsEnableFullSystemLogs.setter
    def loggingOptionsEnableFullSystemLogs(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._loggingOptionsEnableFullSystemLogs = value
        else:
            raise TypeError(
                'Property "loggingOptionsEnableFullSystemLogs" of type "list<'
                'bool>" set to wrong type'
            )

    @property
    def remoteAppIsEnabled(self):
        """bool: Remote app session is enabled"""
        return self._remoteAppIsEnabled

    @remoteAppIsEnabled.setter
    def remoteAppIsEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._remoteAppIsEnabled = value
        else:
            raise TypeError(
                'Property "remoteAppIsEnabled" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def remoteAppMaxSessionDuration(self):
        """int: Max remote app session duration in seconds"""
        return self._remoteAppMaxSessionDuration

    @remoteAppMaxSessionDuration.setter
    def remoteAppMaxSessionDuration(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._remoteAppMaxSessionDuration = value
        else:
            raise TypeError(
                'Property "remoteAppMaxSessionDuration" of type "list<int>" s'
                'et to wrong type'
            )

    @property
    def remoteAppMaxSessionDurationUpperLimit(self):
        """int: Max remote app session upper limit duration in seconds"""
        return self._remoteAppMaxSessionDurationUpperLimit

    @remoteAppMaxSessionDurationUpperLimit.setter
    def remoteAppMaxSessionDurationUpperLimit(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._remoteAppMaxSessionDurationUpperLimit = value
        else:
            raise TypeError(
                'Property "remoteAppMaxSessionDurationUpperLimit" of type "li'
                'st<int>" set to wrong type'
            )

    @property
    def remoteManagementIsEnabled(self):
        """ """
        return self._remoteManagementIsEnabled

    @remoteManagementIsEnabled.setter
    def remoteManagementIsEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._remoteManagementIsEnabled = value
        else:
            raise TypeError(
                'Property "remoteManagementIsEnabled" of type "list<bool>" se'
                't to wrong type'
            )

    @property
    def remoteManagementMaxSessionCount(self):
        """int: Max session count"""
        return self._remoteManagementMaxSessionCount

    @remoteManagementMaxSessionCount.setter
    def remoteManagementMaxSessionCount(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._remoteManagementMaxSessionCount = value
        else:
            raise TypeError(
                'Property "remoteManagementMaxSessionCount" of type "list<int'
                '>" set to wrong type'
            )

    @property
    def remoteManagementMaxSessionDuration(self):
        """int: Max session duration in seconds"""
        return self._remoteManagementMaxSessionDuration

    @remoteManagementMaxSessionDuration.setter
    def remoteManagementMaxSessionDuration(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._remoteManagementMaxSessionDuration = value
        else:
            raise TypeError(
                'Property "remoteManagementMaxSessionDuration" of type "list<'
                'int>" set to wrong type'
            )

    @property
    def remoteManagementMaxSessionDurationUpperLimit(self):
        """int: Max session upper limit duration in seconds"""
        return self._remoteManagementMaxSessionDurationUpperLimit

    @remoteManagementMaxSessionDurationUpperLimit.setter
    def remoteManagementMaxSessionDurationUpperLimit(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._remoteManagementMaxSessionDurationUpperLimit = value
        else:
            raise TypeError(
                'Property "remoteManagementMaxSessionDurationUpperLimit" of t'
                'ype "list<int>" set to wrong type'
            )

    @property
    def remoteManagementMaxSessionIdle(self):
        """int: Max session idle in seconds"""
        return self._remoteManagementMaxSessionIdle

    @remoteManagementMaxSessionIdle.setter
    def remoteManagementMaxSessionIdle(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._remoteManagementMaxSessionIdle = value
        else:
            raise TypeError(
                'Property "remoteManagementMaxSessionIdle" of type "list<int>'
                '" set to wrong type'
            )

    @property
    def remoteManagementSupportedVersion(self):
        """str: Remote management supported version"""
        return self._remoteManagementSupportedVersion

    @remoteManagementSupportedVersion.setter
    def remoteManagementSupportedVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._remoteManagementSupportedVersion = value
        else:
            raise TypeError(
                'Property "remoteManagementSupportedVersion" of type "list<st'
                'r>" set to wrong type'
            )

    @property
    def requestStatus(self):
        """ """
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    @property
    def securityOptionSupportInfo(self):
        """list: array of object that describes security minimum supported ver
        sion"""
        return self._securityOptionSupportInfo

    @securityOptionSupportInfo.setter
    def securityOptionSupportInfo(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._securityOptionSupportInfo = value
        else:
            raise TypeError(
                'Property "securityOptionSupportInfo" of type "list<SecurityM'
                'inimunSupportedVersion>" set to wrong type'
            )

    @property
    def supportedLocationVersions(self):
        """list: array of supported location versions"""
        return self._supportedLocationVersions

    @supportedLocationVersions.setter
    def supportedLocationVersions(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._supportedLocationVersions = value
        else:
            raise TypeError(
                'Property "supportedLocationVersions" of type "list<str>" set'
                ' to wrong type'
            )

    def toDict(self):
        result = {}
        if self._alerts:
            result["alerts"] = [
                i.toDict() for i in self._alerts 
            ] if self._alerts else []
        if self._allowDevMount is not None:
            result["allowDevMount"] = \
                self._allowDevMount
        if self._allowSecurityOverrides is not None:
            result["allowSecurityOverrides"] = \
                self._allowSecurityOverrides
        if self._availableSystemVersions:
            result["availableSystemVersions"] = [
                i.toDict() for i in self._availableSystemVersions 
            ] if self._availableSystemVersions else []
        if self._bannerMessage is not None:
            result["bannerMessage"] = \
                self._bannerMessage
        if self._installers:
            result["installers"] = [
                i.toDict() for i in self._installers 
            ] if self._installers else []
        if self._isos:
            result["isos"] = [
                i.toDict() for i in self._isos 
            ] if self._isos else []
        if self._loggingOptionsEnableApplicationLogs is not None:
            result["loggingOptionsEnableApplicationLogs"] = \
                self._loggingOptionsEnableApplicationLogs
        if self._loggingOptionsEnableFullSystemLogs is not None:
            result["loggingOptionsEnableFullSystemLogs"] = \
                self._loggingOptionsEnableFullSystemLogs
        if self._remoteAppIsEnabled is not None:
            result["remoteAppIsEnabled"] = \
                self._remoteAppIsEnabled
        if self._remoteAppMaxSessionDuration is not None:
            result["remoteAppMaxSessionDuration"] = \
                self._remoteAppMaxSessionDuration
        if self._remoteAppMaxSessionDurationUpperLimit is not None:
            result["remoteAppMaxSessionDurationUpperLimit"] = \
                self._remoteAppMaxSessionDurationUpperLimit
        if self._remoteManagementIsEnabled is not None:
            result["remoteManagementIsEnabled"] = \
                self._remoteManagementIsEnabled
        if self._remoteManagementMaxSessionCount is not None:
            result["remoteManagementMaxSessionCount"] = \
                self._remoteManagementMaxSessionCount
        if self._remoteManagementMaxSessionDuration is not None:
            result["remoteManagementMaxSessionDuration"] = \
                self._remoteManagementMaxSessionDuration
        if self._remoteManagementMaxSessionDurationUpperLimit is not None:
            result["remoteManagementMaxSessionDurationUpperLimit"] = \
                self._remoteManagementMaxSessionDurationUpperLimit
        if self._remoteManagementMaxSessionIdle is not None:
            result["remoteManagementMaxSessionIdle"] = \
                self._remoteManagementMaxSessionIdle
        if self._remoteManagementSupportedVersion is not None:
            result["remoteManagementSupportedVersion"] = \
                self._remoteManagementSupportedVersion
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        if self._securityOptionSupportInfo:
            result["securityOptionSupportInfo"] = [
                i.toDict() for i in self._securityOptionSupportInfo 
            ] if self._securityOptionSupportInfo else []
        if self._supportedLocationVersions is not None:
            result["supportedLocationVersions"] = \
                self._supportedLocationVersions
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._isos is not None):
            for obj in self._isos:
                if (obj is not None): obj.isValid()
        if (self._securityOptionSupportInfo is not None):
            for obj in self._securityOptionSupportInfo:
                if (obj is not None): obj.isValid()
        if (self._availableSystemVersions is not None):
            for obj in self._availableSystemVersions:
                if (obj is not None): obj.isValid()
        if (self._installers is not None):
            for obj in self._installers:
                if (obj is not None): obj.isValid()
        if (self._alerts is not None):
            for obj in self._alerts:
                if (obj is not None): obj.isValid()
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

