"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RequestStatus import RequestStatus
from .AdvancedStorage import AdvancedStorage

# Unused import over optimization prevention
str(repr(AdvancedStorage))
str(repr(RequestStatus))


if sys.version_info > (3,):
    long = int
    unicode = str

class AdvancedStorageResponse(object):
    """listing of advance storage object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.containerdStorage = (
            None if not fromDict or propDict.get(
                "containerdStorage"
            ) is None
            else propDict["containerdStorage"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])
        self.storages = (
            None if not fromDict or propDict.get(
                "storages"
            ) is None
            else [ AdvancedStorage(i)
            for i in propDict["storages"] ])
        self.varlogStorage = (
            None if not fromDict or propDict.get(
                "varlogStorage"
            ) is None
            else propDict["varlogStorage"])

    @property
    def containerdStorage(self):
        """str: containerd storage on the node"""
        return self._containerdStorage

    @containerdStorage.setter
    def containerdStorage(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._containerdStorage = value
        else:
            raise TypeError(
                'Property "containerdStorage" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def requestStatus(self):
        """ """
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    @property
    def storages(self):
        """list: array of advance storage object"""
        return self._storages

    @storages.setter
    def storages(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._storages = value
        else:
            raise TypeError(
                'Property "storages" of type "list<AdvancedStorage>" set to w'
                'rong type'
            )

    @property
    def varlogStorage(self):
        """str: varlog storage on the node"""
        return self._varlogStorage

    @varlogStorage.setter
    def varlogStorage(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._varlogStorage = value
        else:
            raise TypeError(
                'Property "varlogStorage" of type "list<str>" set to wrong ty'
                'pe'
            )

    def toDict(self):
        result = {}
        if self._containerdStorage is not None:
            result["containerdStorage"] = \
                self._containerdStorage
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        if self._storages:
            result["storages"] = [
                i.toDict() for i in self._storages 
            ] if self._storages else []
        if self._varlogStorage is not None:
            result["varlogStorage"] = \
                self._varlogStorage
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._storages is not None):
            for obj in self._storages:
                if (obj is not None): obj.isValid()
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

