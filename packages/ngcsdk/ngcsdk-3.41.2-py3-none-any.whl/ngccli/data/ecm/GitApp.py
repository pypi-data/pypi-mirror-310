"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class GitApp(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.path = (
            None if not fromDict or propDict.get(
                "path"
            ) is None
            else propDict["path"])
        self.repoURL = (
            None if not fromDict or propDict.get(
                "repoURL"
            ) is None
            else propDict["repoURL"])
        self.targetRevision = (
            None if not fromDict or propDict.get(
                "targetRevision"
            ) is None
            else propDict["targetRevision"])

    @property
    def path(self):
        """str: a directory path within the Git repository, and is only valid 
        for applications sourced from Git"""
        return self._path

    @path.setter
    def path(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._path = value
        else:
            raise TypeError(
                'Property "path" of type "list<str>" set to wrong type'
            )

    @property
    def repoURL(self):
        """str: the URL to the repository (Git or Helm) that contains the appl
        ication manifests"""
        return self._repoURL

    @repoURL.setter
    def repoURL(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._repoURL = value
        else:
            raise TypeError(
                'Property "repoURL" of type "list<str>" set to wrong type'
            )

    @property
    def targetRevision(self):
        """str: defines the revision of the source to sync the application to
        """
        return self._targetRevision

    @targetRevision.setter
    def targetRevision(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._targetRevision = value
        else:
            raise TypeError(
                'Property "targetRevision" of type "list<str>" set to wrong t'
                'ype'
            )

    def toDict(self):
        result = {}
        if self._path is not None:
            result["path"] = \
                self._path
        if self._repoURL is not None:
            result["repoURL"] = \
                self._repoURL
        if self._targetRevision is not None:
            result["targetRevision"] = \
                self._targetRevision
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

