"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .DeploymentLocation import DeploymentLocation
from .RemoteAppDetail import RemoteAppDetail

# Unused import over optimization prevention
str(repr(RemoteAppDetail))
str(repr(DeploymentLocation))


if sys.version_info > (3,):
    long = int
    unicode = str

class Deployment(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.allowAnyCapability = (
            None if not fromDict or propDict.get(
                "allowAnyCapability"
            ) is None
            else propDict["allowAnyCapability"])
        self.allowAnyHostPath = (
            None if not fromDict or propDict.get(
                "allowAnyHostPath"
            ) is None
            else propDict["allowAnyHostPath"])
        self.allowDevMount = (
            None if not fromDict or propDict.get(
                "allowDevMount"
            ) is None
            else propDict["allowDevMount"])
        self.allowHostNamespace = (
            None if not fromDict or propDict.get(
                "allowHostNamespace"
            ) is None
            else propDict["allowHostNamespace"])
        self.allowHostPathPV = (
            None if not fromDict or propDict.get(
                "allowHostPathPV"
            ) is None
            else propDict["allowHostPathPV"])
        self.allowPrivileged = (
            None if not fromDict or propDict.get(
                "allowPrivileged"
            ) is None
            else propDict["allowPrivileged"])
        self.app = (
            None if not fromDict or propDict.get(
                "app"
            ) is None
            else propDict["app"])
        self.appConfig = (
            None if not fromDict or propDict.get(
                "appConfig"
            ) is None
            else propDict["appConfig"])
        self.appDisplayName = (
            None if not fromDict or propDict.get(
                "appDisplayName"
            ) is None
            else propDict["appDisplayName"])
        self.appSource = (
            None if not fromDict or propDict.get(
                "appSource"
            ) is None
            else propDict["appSource"])
        self.creationTimestamp = (
            None if not fromDict or propDict.get(
                "creationTimestamp"
            ) is None
            else propDict["creationTimestamp"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.issues = (
            None if not fromDict or propDict.get(
                "issues"
            ) is None
            else propDict["issues"])
        self.lastDeployedTimestamp = (
            None if not fromDict or propDict.get(
                "lastDeployedTimestamp"
            ) is None
            else propDict["lastDeployedTimestamp"])
        self.locations = (
            None if not fromDict or propDict.get(
                "locations"
            ) is None
            else [ DeploymentLocation(i)
            for i in propDict["locations"] ])
        self.logsUrl = (
            None if not fromDict or propDict.get(
                "logsUrl"
            ) is None
            else propDict["logsUrl"])
        self.messages = (
            None if not fromDict or propDict.get(
                "messages"
            ) is None
            else propDict["messages"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.remoteAppMessages = (
            None if not fromDict or propDict.get(
                "remoteAppMessages"
            ) is None
            else [ RemoteAppDetail(i)
            for i in propDict["remoteAppMessages"] ])
        self.targetNamespace = (
            None if not fromDict or propDict.get(
                "targetNamespace"
            ) is None
            else propDict["targetNamespace"])

    @property
    def allowAnyCapability(self):
        """bool: Allow Any Process Capability Flags to the Application Deploym
        ent"""
        return self._allowAnyCapability

    @allowAnyCapability.setter
    def allowAnyCapability(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowAnyCapability = value
        else:
            raise TypeError(
                'Property "allowAnyCapability" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def allowAnyHostPath(self):
        """bool: Allow Any System HostPath Access to the Application Deploymen
        t"""
        return self._allowAnyHostPath

    @allowAnyHostPath.setter
    def allowAnyHostPath(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowAnyHostPath = value
        else:
            raise TypeError(
                'Property "allowAnyHostPath" of type "list<bool>" set to wron'
                'g type'
            )

    @property
    def allowDevMount(self):
        """bool: Allow System Devices Access to the Application Deployment"""
        return self._allowDevMount

    @allowDevMount.setter
    def allowDevMount(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowDevMount = value
        else:
            raise TypeError(
                'Property "allowDevMount" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def allowHostNamespace(self):
        """bool: Allow System Process Access to the Application Deployment"""
        return self._allowHostNamespace

    @allowHostNamespace.setter
    def allowHostNamespace(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowHostNamespace = value
        else:
            raise TypeError(
                'Property "allowHostNamespace" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def allowHostPathPV(self):
        """bool: Allow System HostPath Access for PersistentVolumes to the App
        lication Deployment"""
        return self._allowHostPathPV

    @allowHostPathPV.setter
    def allowHostPathPV(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowHostPathPV = value
        else:
            raise TypeError(
                'Property "allowHostPathPV" of type "list<bool>" set to wrong'
                ' type'
            )

    @property
    def allowPrivileged(self):
        """bool: Allow Privileged Containers to the Application Deployment"""
        return self._allowPrivileged

    @allowPrivileged.setter
    def allowPrivileged(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowPrivileged = value
        else:
            raise TypeError(
                'Property "allowPrivileged" of type "list<bool>" set to wrong'
                ' type'
            )

    @property
    def app(self):
        """str: App in the deployment"""
        return self._app

    @app.setter
    def app(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._app = value
        else:
            raise TypeError(
                'Property "app" of type "list<str>" set to wrong type'
            )

    @property
    def appConfig(self):
        """str: App config in the deployment"""
        return self._appConfig

    @appConfig.setter
    def appConfig(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._appConfig = value
        else:
            raise TypeError(
                'Property "appConfig" of type "list<str>" set to wrong type'
            )

    @property
    def appDisplayName(self):
        """str: App displayname in the deployment"""
        return self._appDisplayName

    @appDisplayName.setter
    def appDisplayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._appDisplayName = value
        else:
            raise TypeError(
                'Property "appDisplayName" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def appSource(self):
        """str: App source in the deployment"""
        return self._appSource

    @appSource.setter
    def appSource(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._appSource = value
        else:
            raise TypeError(
                'Property "appSource" of type "list<str>" set to wrong type'
            )

    @property
    def creationTimestamp(self):
        """ """
        return self._creationTimestamp

    @creationTimestamp.setter
    def creationTimestamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._creationTimestamp = value
        else:
            raise TypeError(
                'Property "creationTimestamp" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def displayName(self):
        """str: Display name of the deployment"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def issues(self):
        """list: Issues to show in the banner"""
        return self._issues

    @issues.setter
    def issues(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._issues = value
        else:
            raise TypeError(
                'Property "issues" of type "list<str>" set to wrong type'
            )

    @property
    def lastDeployedTimestamp(self):
        """ """
        return self._lastDeployedTimestamp

    @lastDeployedTimestamp.setter
    def lastDeployedTimestamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastDeployedTimestamp = value
        else:
            raise TypeError(
                'Property "lastDeployedTimestamp" of type "list<str>" set to '
                'wrong type'
            )

    @property
    def locations(self):
        """list: Deployment in the locations"""
        return self._locations

    @locations.setter
    def locations(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._locations = value
        else:
            raise TypeError(
                'Property "locations" of type "list<DeploymentLocation>" set '
                'to wrong type'
            )

    @property
    def logsUrl(self):
        """str: Logs url for deployment"""
        return self._logsUrl

    @logsUrl.setter
    def logsUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logsUrl = value
        else:
            raise TypeError(
                'Property "logsUrl" of type "list<str>" set to wrong type'
            )

    @property
    def messages(self):
        """list: Messages to show in the banner"""
        return self._messages

    @messages.setter
    def messages(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._messages = value
        else:
            raise TypeError(
                'Property "messages" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Name of the deployment"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def remoteAppMessages(self):
        """list: Array of remote app messages object to show in the banner"""
        return self._remoteAppMessages

    @remoteAppMessages.setter
    def remoteAppMessages(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._remoteAppMessages = value
        else:
            raise TypeError(
                'Property "remoteAppMessages" of type "list<RemoteAppDetail>"'
                ' set to wrong type'
            )

    @property
    def targetNamespace(self):
        """str: The namespace in the edge cluster that the application would b
        e deployed into"""
        return self._targetNamespace

    @targetNamespace.setter
    def targetNamespace(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._targetNamespace = value
        else:
            raise TypeError(
                'Property "targetNamespace" of type "list<str>" set to wrong '
                'type'
            )

    def toDict(self):
        result = {}
        if self._allowAnyCapability is not None:
            result["allowAnyCapability"] = \
                self._allowAnyCapability
        if self._allowAnyHostPath is not None:
            result["allowAnyHostPath"] = \
                self._allowAnyHostPath
        if self._allowDevMount is not None:
            result["allowDevMount"] = \
                self._allowDevMount
        if self._allowHostNamespace is not None:
            result["allowHostNamespace"] = \
                self._allowHostNamespace
        if self._allowHostPathPV is not None:
            result["allowHostPathPV"] = \
                self._allowHostPathPV
        if self._allowPrivileged is not None:
            result["allowPrivileged"] = \
                self._allowPrivileged
        if self._app is not None:
            result["app"] = \
                self._app
        if self._appConfig is not None:
            result["appConfig"] = \
                self._appConfig
        if self._appDisplayName is not None:
            result["appDisplayName"] = \
                self._appDisplayName
        if self._appSource is not None:
            result["appSource"] = \
                self._appSource
        if self._creationTimestamp is not None:
            result["creationTimestamp"] = \
                self._creationTimestamp
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._issues is not None:
            result["issues"] = \
                self._issues
        if self._lastDeployedTimestamp is not None:
            result["lastDeployedTimestamp"] = \
                self._lastDeployedTimestamp
        if self._locations:
            result["locations"] = [
                i.toDict() for i in self._locations 
            ] if self._locations else []
        if self._logsUrl is not None:
            result["logsUrl"] = \
                self._logsUrl
        if self._messages is not None:
            result["messages"] = \
                self._messages
        if self._name is not None:
            result["name"] = \
                self._name
        if self._remoteAppMessages:
            result["remoteAppMessages"] = [
                i.toDict() for i in self._remoteAppMessages 
            ] if self._remoteAppMessages else []
        if self._targetNamespace is not None:
            result["targetNamespace"] = \
                self._targetNamespace
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._name is not None
            and
            len(self._name) > 53):
            raise ValueError(
                "Deployment.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 53")
        if (self._name is not None
            and
            not re.match(
                r"^[a-z]([-a-z0-9]*[a-z0-9])?$",
                 self._name)):
            raise ValueError(
                "Deployment.name: " + str(self._name) + 
                " doesnt match requirement: pattern: ^[a-z]([-a-z0-9]*[a-z0-9"
                "])?$")
        if (self._app is not None
            and
            len(self._app) > 53):
            raise ValueError(
                "Deployment.app: " + str(self._app) + 
                " doesnt match requirement: maxLength: 53")
        if (self._app is not None
            and
            not re.match(
                r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                 self._app)):
            raise ValueError(
                "Deployment.app: " + str(self._app) + 
                " doesnt match requirement: pattern: ^[a-z0-9]([-a-z0-9]*[a-z"
                "0-9])?$")
        if (self._appDisplayName is not None
            and
            len(self._appDisplayName) > 254):
            raise ValueError(
                "Deployment.appDisplayName: " + str(self._appDisplayName) + 
                " doesnt match requirement: maxLength: 254")
        if (self._appConfig is not None
            and
            len(self._appConfig) > 53):
            raise ValueError(
                "Deployment.appConfig: " + str(self._appConfig) + 
                " doesnt match requirement: maxLength: 53")
        if (self._appConfig is not None
            and
            not re.match(
                r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                 self._appConfig)):
            raise ValueError(
                "Deployment.appConfig: " + str(self._appConfig) + 
                " doesnt match requirement: pattern: ^[a-z0-9]([-a-z0-9]*[a-z"
                "0-9])?$")
        if (self._displayName is not None
            and
            len(self._displayName) > 255):
            raise ValueError(
                "Deployment.displayName: " + str(self._displayName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._locations is not None):
            for obj in self._locations:
                if (obj is not None): obj.isValid()
        if (self._remoteAppMessages is not None):
            for obj in self._remoteAppMessages:
                if (obj is not None): obj.isValid()
        return True
    

