"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .GitApp import GitApp

# Unused import over optimization prevention
str(repr(GitApp))


if sys.version_info > (3,):
    long = int
    unicode = str

class Application(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.canBeDeleted = (
            None if not fromDict or propDict.get(
                "canBeDeleted"
            ) is None
            else propDict["canBeDeleted"])
        self.creationTimestamp = (
            None if not fromDict or propDict.get(
                "creationTimestamp"
            ) is None
            else propDict["creationTimestamp"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.gitApp = (
            None if not fromDict or propDict.get(
                "gitApp"
            ) is None
            else propDict["gitApp"])
        self.helmChartName = (
            None if not fromDict or propDict.get(
                "helmChartName"
            ) is None
            else propDict["helmChartName"])
        self.helmChartRepository = (
            None if not fromDict or propDict.get(
                "helmChartRepository"
            ) is None
            else propDict["helmChartRepository"])
        self.helmChartVersion = (
            None if not fromDict or propDict.get(
                "helmChartVersion"
            ) is None
            else propDict["helmChartVersion"])
        self.icon = (
            None if not fromDict or propDict.get(
                "icon"
            ) is None
            else propDict["icon"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])

    @property
    def canBeDeleted(self):
        """bool: Application cannot be deleted if used in a deployment"""
        return self._canBeDeleted

    @canBeDeleted.setter
    def canBeDeleted(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._canBeDeleted = value
        else:
            raise TypeError(
                'Property "canBeDeleted" of type "list<bool>" set to wrong ty'
                'pe'
            )

    @property
    def creationTimestamp(self):
        """ """
        return self._creationTimestamp

    @creationTimestamp.setter
    def creationTimestamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._creationTimestamp = value
        else:
            raise TypeError(
                'Property "creationTimestamp" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def description(self):
        """ """
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """ """
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def gitApp(self):
        """ """
        return self._gitApp

    @gitApp.setter
    def gitApp(self, value):
        if value is not None and not isinstance(value, GitApp):
            value = GitApp(value)
        if (value is None) or isinstance(value, GitApp):
            self._gitApp = value
        else:
            raise TypeError(
                'Property "gitApp" of type "list<GitApp>" set to wrong type'
            )

    @property
    def helmChartName(self):
        """ """
        return self._helmChartName

    @helmChartName.setter
    def helmChartName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._helmChartName = value
        else:
            raise TypeError(
                'Property "helmChartName" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def helmChartRepository(self):
        """ """
        return self._helmChartRepository

    @helmChartRepository.setter
    def helmChartRepository(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._helmChartRepository = value
        else:
            raise TypeError(
                'Property "helmChartRepository" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def helmChartVersion(self):
        """ """
        return self._helmChartVersion

    @helmChartVersion.setter
    def helmChartVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._helmChartVersion = value
        else:
            raise TypeError(
                'Property "helmChartVersion" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def icon(self):
        """ """
        return self._icon

    @icon.setter
    def icon(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._icon = value
        else:
            raise TypeError(
                'Property "icon" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """ """
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._canBeDeleted is not None:
            result["canBeDeleted"] = \
                self._canBeDeleted
        if self._creationTimestamp is not None:
            result["creationTimestamp"] = \
                self._creationTimestamp
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._gitApp:
            result["gitApp"] = \
                self._gitApp.toDict() if self._gitApp is not None else None
        if self._helmChartName is not None:
            result["helmChartName"] = \
                self._helmChartName
        if self._helmChartRepository is not None:
            result["helmChartRepository"] = \
                self._helmChartRepository
        if self._helmChartVersion is not None:
            result["helmChartVersion"] = \
                self._helmChartVersion
        if self._icon is not None:
            result["icon"] = \
                self._icon
        if self._name is not None:
            result["name"] = \
                self._name
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._name is not None
            and
            len(self._name) > 53):
            raise ValueError(
                "Application.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 53")
        if (self._name is not None
            and
            not re.match(
                r"^[a-z]([-a-z0-9]*[a-z0-9])?$",
                 self._name)):
            raise ValueError(
                "Application.name: " + str(self._name) + 
                " doesnt match requirement: pattern: ^[a-z]([-a-z0-9]*[a-z0-9"
                "])?$")
        if (self._displayName is not None
            and
            len(self._displayName) > 254):
            raise ValueError(
                "Application.displayName: " + str(self._displayName) + 
                " doesnt match requirement: maxLength: 254")
        if (self._gitApp is not None): self._gitApp.isValid()
        return True
    

