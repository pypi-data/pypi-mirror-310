"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Alert import Alert

# Unused import over optimization prevention
str(repr(Alert))


if sys.version_info > (3,):
    long = int
    unicode = str

class UpdateSettingsRequest(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.alerts = (
            None if not fromDict or propDict.get(
                "alerts"
            ) is None
            else [ Alert(i)
            for i in propDict["alerts"] ])
        self.allowDevMount = (
            None if not fromDict or propDict.get(
                "allowDevMount"
            ) is None
            else propDict["allowDevMount"])
        self.allowSecurityOverrides = (
            None if not fromDict or propDict.get(
                "allowSecurityOverrides"
            ) is None
            else propDict["allowSecurityOverrides"])
        self.loggingOptionsEnableApplicationLogs = (
            None if not fromDict or propDict.get(
                "loggingOptionsEnableApplicationLogs"
            ) is None
            else propDict["loggingOptionsEnableApplicationLogs"])
        self.loggingOptionsEnableFullSystemLogs = (
            None if not fromDict or propDict.get(
                "loggingOptionsEnableFullSystemLogs"
            ) is None
            else propDict["loggingOptionsEnableFullSystemLogs"])
        self.remoteAppIsEnabled = (
            None if not fromDict or propDict.get(
                "remoteAppIsEnabled"
            ) is None
            else propDict["remoteAppIsEnabled"])
        self.remoteAppMaxSessionDuration = (
            None if not fromDict or propDict.get(
                "remoteAppMaxSessionDuration"
            ) is None
            else propDict["remoteAppMaxSessionDuration"])
        self.remoteManagementIsEnabled = (
            None if not fromDict or propDict.get(
                "remoteManagementIsEnabled"
            ) is None
            else propDict["remoteManagementIsEnabled"])
        self.remoteManagementMaxSessionDuration = (
            None if not fromDict or propDict.get(
                "remoteManagementMaxSessionDuration"
            ) is None
            else propDict["remoteManagementMaxSessionDuration"])
        self.remoteManagementMaxSessionIdle = (
            None if not fromDict or propDict.get(
                "remoteManagementMaxSessionIdle"
            ) is None
            else propDict["remoteManagementMaxSessionIdle"])

    @property
    def alerts(self):
        """ """
        return self._alerts

    @alerts.setter
    def alerts(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._alerts = value
        else:
            raise TypeError(
                'Property "alerts" of type "list<Alert>" set to wrong type'
            )

    @property
    def allowDevMount(self):
        """bool: allow users to access /dev in deployments"""
        return self._allowDevMount

    @allowDevMount.setter
    def allowDevMount(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowDevMount = value
        else:
            raise TypeError(
                'Property "allowDevMount" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def allowSecurityOverrides(self):
        """bool: allow users to override security options in deployments"""
        return self._allowSecurityOverrides

    @allowSecurityOverrides.setter
    def allowSecurityOverrides(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowSecurityOverrides = value
        else:
            raise TypeError(
                'Property "allowSecurityOverrides" of type "list<bool>" set t'
                'o wrong type'
            )

    @property
    def loggingOptionsEnableApplicationLogs(self):
        """ """
        return self._loggingOptionsEnableApplicationLogs

    @loggingOptionsEnableApplicationLogs.setter
    def loggingOptionsEnableApplicationLogs(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._loggingOptionsEnableApplicationLogs = value
        else:
            raise TypeError(
                'Property "loggingOptionsEnableApplicationLogs" of type "list'
                '<bool>" set to wrong type'
            )

    @property
    def loggingOptionsEnableFullSystemLogs(self):
        """ """
        return self._loggingOptionsEnableFullSystemLogs

    @loggingOptionsEnableFullSystemLogs.setter
    def loggingOptionsEnableFullSystemLogs(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._loggingOptionsEnableFullSystemLogs = value
        else:
            raise TypeError(
                'Property "loggingOptionsEnableFullSystemLogs" of type "list<'
                'bool>" set to wrong type'
            )

    @property
    def remoteAppIsEnabled(self):
        """ """
        return self._remoteAppIsEnabled

    @remoteAppIsEnabled.setter
    def remoteAppIsEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._remoteAppIsEnabled = value
        else:
            raise TypeError(
                'Property "remoteAppIsEnabled" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def remoteAppMaxSessionDuration(self):
        """int: Max session duration in seconds"""
        return self._remoteAppMaxSessionDuration

    @remoteAppMaxSessionDuration.setter
    def remoteAppMaxSessionDuration(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._remoteAppMaxSessionDuration = value
        else:
            raise TypeError(
                'Property "remoteAppMaxSessionDuration" of type "list<int>" s'
                'et to wrong type'
            )

    @property
    def remoteManagementIsEnabled(self):
        """ """
        return self._remoteManagementIsEnabled

    @remoteManagementIsEnabled.setter
    def remoteManagementIsEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._remoteManagementIsEnabled = value
        else:
            raise TypeError(
                'Property "remoteManagementIsEnabled" of type "list<bool>" se'
                't to wrong type'
            )

    @property
    def remoteManagementMaxSessionDuration(self):
        """int: Max session duration in seconds"""
        return self._remoteManagementMaxSessionDuration

    @remoteManagementMaxSessionDuration.setter
    def remoteManagementMaxSessionDuration(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._remoteManagementMaxSessionDuration = value
        else:
            raise TypeError(
                'Property "remoteManagementMaxSessionDuration" of type "list<'
                'int>" set to wrong type'
            )

    @property
    def remoteManagementMaxSessionIdle(self):
        """int: Max session idle in seconds"""
        return self._remoteManagementMaxSessionIdle

    @remoteManagementMaxSessionIdle.setter
    def remoteManagementMaxSessionIdle(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._remoteManagementMaxSessionIdle = value
        else:
            raise TypeError(
                'Property "remoteManagementMaxSessionIdle" of type "list<int>'
                '" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._alerts:
            result["alerts"] = [
                i.toDict() for i in self._alerts 
            ] if self._alerts else []
        if self._allowDevMount is not None:
            result["allowDevMount"] = \
                self._allowDevMount
        if self._allowSecurityOverrides is not None:
            result["allowSecurityOverrides"] = \
                self._allowSecurityOverrides
        if self._loggingOptionsEnableApplicationLogs is not None:
            result["loggingOptionsEnableApplicationLogs"] = \
                self._loggingOptionsEnableApplicationLogs
        if self._loggingOptionsEnableFullSystemLogs is not None:
            result["loggingOptionsEnableFullSystemLogs"] = \
                self._loggingOptionsEnableFullSystemLogs
        if self._remoteAppIsEnabled is not None:
            result["remoteAppIsEnabled"] = \
                self._remoteAppIsEnabled
        if self._remoteAppMaxSessionDuration is not None:
            result["remoteAppMaxSessionDuration"] = \
                self._remoteAppMaxSessionDuration
        if self._remoteManagementIsEnabled is not None:
            result["remoteManagementIsEnabled"] = \
                self._remoteManagementIsEnabled
        if self._remoteManagementMaxSessionDuration is not None:
            result["remoteManagementMaxSessionDuration"] = \
                self._remoteManagementMaxSessionDuration
        if self._remoteManagementMaxSessionIdle is not None:
            result["remoteManagementMaxSessionIdle"] = \
                self._remoteManagementMaxSessionIdle
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._remoteManagementMaxSessionIdle is not None
            and
            self._remoteManagementMaxSessionIdle < 60):
            raise ValueError(
                "UpdateSettingsRequest.remoteManagementMaxSessionIdle: " + str(self._remoteManagementMaxSessionIdle) + 
                " doesnt match requirement: minimum: 60")
        if (self._remoteManagementMaxSessionIdle is not None
            and
            self._remoteManagementMaxSessionIdle > 3540):
            raise ValueError(
                "UpdateSettingsRequest.remoteManagementMaxSessionIdle: " + str(self._remoteManagementMaxSessionIdle) + 
                " doesnt match requirement: maximum: 3540")
        if (self._alerts is not None):
            for obj in self._alerts:
                if (obj is not None): obj.isValid()
        return True
    

