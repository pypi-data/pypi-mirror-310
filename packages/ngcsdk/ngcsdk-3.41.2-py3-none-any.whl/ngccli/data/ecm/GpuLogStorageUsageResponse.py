"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RequestStatus import RequestStatus

# Unused import over optimization prevention
str(repr(RequestStatus))


if sys.version_info > (3,):
    long = int
    unicode = str

class GpuLogStorageUsageResponse(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.activeGpuCount = (
            None if not fromDict or propDict.get(
                "activeGpuCount"
            ) is None
            else propDict["activeGpuCount"])
        self.logStorage = (
            None if not fromDict or propDict.get(
                "logStorage"
            ) is None
            else propDict["logStorage"])
        self.maxGpuCount = (
            None if not fromDict or propDict.get(
                "maxGpuCount"
            ) is None
            else propDict["maxGpuCount"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])

    @property
    def activeGpuCount(self):
        """int: Active GPUs count in the org"""
        return self._activeGpuCount

    @activeGpuCount.setter
    def activeGpuCount(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._activeGpuCount = value
        else:
            raise TypeError(
                'Property "activeGpuCount" of type "list<int>" set to wrong t'
                'ype'
            )

    @property
    def logStorage(self):
        """float: Log storage usage in Gb"""
        return self._logStorage

    @logStorage.setter
    def logStorage(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._logStorage = value
        else:
            raise TypeError(
                'Property "logStorage" of type "list<float>" set to wrong typ'
                'e'
            )

    @property
    def maxGpuCount(self):
        """int: Max monthly GPUs count in the org"""
        return self._maxGpuCount

    @maxGpuCount.setter
    def maxGpuCount(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._maxGpuCount = value
        else:
            raise TypeError(
                'Property "maxGpuCount" of type "list<int>" set to wrong type'
            )

    @property
    def requestStatus(self):
        """ """
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    def toDict(self):
        result = {}
        if self._activeGpuCount is not None:
            result["activeGpuCount"] = \
                self._activeGpuCount
        if self._logStorage is not None:
            result["logStorage"] = \
                self._logStorage
        if self._maxGpuCount is not None:
            result["maxGpuCount"] = \
                self._maxGpuCount
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

