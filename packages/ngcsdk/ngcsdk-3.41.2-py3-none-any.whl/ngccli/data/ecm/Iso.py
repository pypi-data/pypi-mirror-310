"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class Iso(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.checksum = (
            None if not fromDict or propDict.get(
                "checksum"
            ) is None
            else propDict["checksum"])
        self.isoSourceCodeUrl = (
            None if not fromDict or propDict.get(
                "isoSourceCodeUrl"
            ) is None
            else propDict["isoSourceCodeUrl"])
        self.isoUrl = (
            None if not fromDict or propDict.get(
                "isoUrl"
            ) is None
            else propDict["isoUrl"])
        self.isoVersion = (
            None if not fromDict or propDict.get(
                "isoVersion"
            ) is None
            else propDict["isoVersion"])

    @property
    def checksum(self):
        """str: SHA256 checksum"""
        return self._checksum

    @checksum.setter
    def checksum(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._checksum = value
        else:
            raise TypeError(
                'Property "checksum" of type "list<str>" set to wrong type'
            )

    @property
    def isoSourceCodeUrl(self):
        """ """
        return self._isoSourceCodeUrl

    @isoSourceCodeUrl.setter
    def isoSourceCodeUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._isoSourceCodeUrl = value
        else:
            raise TypeError(
                'Property "isoSourceCodeUrl" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def isoUrl(self):
        """ """
        return self._isoUrl

    @isoUrl.setter
    def isoUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._isoUrl = value
        else:
            raise TypeError(
                'Property "isoUrl" of type "list<str>" set to wrong type'
            )

    @property
    def isoVersion(self):
        """ """
        return self._isoVersion

    @isoVersion.setter
    def isoVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._isoVersion = value
        else:
            raise TypeError(
                'Property "isoVersion" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._checksum is not None:
            result["checksum"] = \
                self._checksum
        if self._isoSourceCodeUrl is not None:
            result["isoSourceCodeUrl"] = \
                self._isoSourceCodeUrl
        if self._isoUrl is not None:
            result["isoUrl"] = \
                self._isoUrl
        if self._isoVersion is not None:
            result["isoVersion"] = \
                self._isoVersion
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

