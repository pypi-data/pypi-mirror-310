"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .UpdateGpuInfo import UpdateGpuInfo

# Unused import over optimization prevention
str(repr(UpdateGpuInfo))


if sys.version_info > (3,):
    long = int
    unicode = str

class UpdateNodeGpuInfoRequest(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.gpuInfoList = (
            None if not fromDict or propDict.get(
                "gpuInfoList"
            ) is None
            else [ UpdateGpuInfo(i)
            for i in propDict["gpuInfoList"] ])
        self.isMigBackwardCompatible = (
            None if not fromDict or propDict.get(
                "isMigBackwardCompatible"
            ) is None
            else propDict["isMigBackwardCompatible"])

    @property
    def gpuInfoList(self):
        """list: array of GPU info object """
        return self._gpuInfoList

    @gpuInfoList.setter
    def gpuInfoList(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._gpuInfoList = value
        else:
            raise TypeError(
                'Property "gpuInfoList" of type "list<UpdateGpuInfo>" set to '
                'wrong type'
            )

    @property
    def isMigBackwardCompatible(self):
        """bool: Is MIG backward compatible in the node"""
        return self._isMigBackwardCompatible

    @isMigBackwardCompatible.setter
    def isMigBackwardCompatible(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isMigBackwardCompatible = value
        else:
            raise TypeError(
                'Property "isMigBackwardCompatible" of type "list<bool>" set '
                'to wrong type'
            )

    def toDict(self):
        result = {}
        if self._gpuInfoList:
            result["gpuInfoList"] = [
                i.toDict() for i in self._gpuInfoList 
            ] if self._gpuInfoList else []
        if self._isMigBackwardCompatible is not None:
            result["isMigBackwardCompatible"] = \
                self._isMigBackwardCompatible
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._gpuInfoList is not None):
            for obj in self._gpuInfoList:
                if (obj is not None): obj.isValid()
        return True
    

