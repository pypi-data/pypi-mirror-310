"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class AppConfigs(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.creationTimestamp = (
            None if not fromDict or propDict.get(
                "creationTimestamp"
            ) is None
            else propDict["creationTimestamp"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.values = (
            None if not fromDict or propDict.get(
                "values"
            ) is None
            else propDict["values"])

    @property
    def creationTimestamp(self):
        """ """
        return self._creationTimestamp

    @creationTimestamp.setter
    def creationTimestamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._creationTimestamp = value
        else:
            raise TypeError(
                'Property "creationTimestamp" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def name(self):
        """ """
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def values(self):
        """ """
        return self._values

    @values.setter
    def values(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._values = value
        else:
            raise TypeError(
                'Property "values" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._creationTimestamp is not None:
            result["creationTimestamp"] = \
                self._creationTimestamp
        if self._name is not None:
            result["name"] = \
                self._name
        if self._values is not None:
            result["values"] = \
                self._values
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._name is not None
            and
            len(self._name) > 53):
            raise ValueError(
                "AppConfigs.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 53")
        if (self._name is not None
            and
            not re.match(
                r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                 self._name)):
            raise ValueError(
                "AppConfigs.name: " + str(self._name) + 
                " doesnt match requirement: pattern: ^[a-z0-9]([-a-z0-9]*[a-z"
                "0-9])?$")
        return True
    

