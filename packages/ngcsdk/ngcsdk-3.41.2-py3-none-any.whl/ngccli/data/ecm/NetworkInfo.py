"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .NetworkInterface import NetworkInterface

# Unused import over optimization prevention
str(repr(NetworkInterface))


if sys.version_info > (3,):
    long = int
    unicode = str

class NetworkInfo(object):
    """Describes advanced networking information for a node"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.defaultGateway = (
            None if not fromDict or propDict.get(
                "defaultGateway"
            ) is None
            else propDict["defaultGateway"])
        self.defaultInterface = (
            None if not fromDict or propDict.get(
                "defaultInterface"
            ) is None
            else propDict["defaultInterface"])
        self.hostName = (
            None if not fromDict or propDict.get(
                "hostName"
            ) is None
            else propDict["hostName"])
        self.httpProxy = (
            None if not fromDict or propDict.get(
                "httpProxy"
            ) is None
            else propDict["httpProxy"])
        self.httpsProxy = (
            None if not fromDict or propDict.get(
                "httpsProxy"
            ) is None
            else propDict["httpsProxy"])
        self.networkInterfaces = (
            None if not fromDict or propDict.get(
                "networkInterfaces"
            ) is None
            else [ NetworkInterface(i)
            for i in propDict["networkInterfaces"] ])
        self.noProxy = (
            None if not fromDict or propDict.get(
                "noProxy"
            ) is None
            else propDict["noProxy"])
        self.systemType = (
            None if not fromDict or propDict.get(
                "systemType"
            ) is None
            else propDict["systemType"])

    @property
    def defaultGateway(self):
        """str: Describes the default gateway of a node"""
        return self._defaultGateway

    @defaultGateway.setter
    def defaultGateway(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._defaultGateway = value
        else:
            raise TypeError(
                'Property "defaultGateway" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def defaultInterface(self):
        """str: Describes the default network interface of a node"""
        return self._defaultInterface

    @defaultInterface.setter
    def defaultInterface(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._defaultInterface = value
        else:
            raise TypeError(
                'Property "defaultInterface" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def hostName(self):
        """str: Describes the hostname for the node, domain name assigned to a
         computer."""
        return self._hostName

    @hostName.setter
    def hostName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._hostName = value
        else:
            raise TypeError(
                'Property "hostName" of type "list<str>" set to wrong type'
            )

    @property
    def httpProxy(self):
        """str: Describes the HTTP_PROXY environment variable for the node. Th
        is variable should contain the URLs of the proxies for HTTP co
        nnections."""
        return self._httpProxy

    @httpProxy.setter
    def httpProxy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._httpProxy = value
        else:
            raise TypeError(
                'Property "httpProxy" of type "list<str>" set to wrong type'
            )

    @property
    def httpsProxy(self):
        """str: Describes the HTTPS_PROXY environment variable for the node. T
        his variable should contain the URLs of the proxies for HTTPS 
        connections."""
        return self._httpsProxy

    @httpsProxy.setter
    def httpsProxy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._httpsProxy = value
        else:
            raise TypeError(
                'Property "httpsProxy" of type "list<str>" set to wrong type'
            )

    @property
    def networkInterfaces(self):
        """list: Describes a list of all the physical network interfaces on th
        e node"""
        return self._networkInterfaces

    @networkInterfaces.setter
    def networkInterfaces(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._networkInterfaces = value
        else:
            raise TypeError(
                'Property "networkInterfaces" of type "list<NetworkInterface>'
                '" set to wrong type'
            )

    @property
    def noProxy(self):
        """str: Describes the NO_PROXY environment variable for the node. This
         variable should contain a comma-separated list of domain exte
        nsions proxy should not be used for."""
        return self._noProxy

    @noProxy.setter
    def noProxy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._noProxy = value
        else:
            raise TypeError(
                'Property "noProxy" of type "list<str>" set to wrong type'
            )

    @property
    def systemType(self):
        """str: Describes the type of system architecture of the node"""
        return self._systemType

    @systemType.setter
    def systemType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._systemType = value
        else:
            raise TypeError(
                'Property "systemType" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._defaultGateway is not None:
            result["defaultGateway"] = \
                self._defaultGateway
        if self._defaultInterface is not None:
            result["defaultInterface"] = \
                self._defaultInterface
        if self._hostName is not None:
            result["hostName"] = \
                self._hostName
        if self._httpProxy is not None:
            result["httpProxy"] = \
                self._httpProxy
        if self._httpsProxy is not None:
            result["httpsProxy"] = \
                self._httpsProxy
        if self._networkInterfaces:
            result["networkInterfaces"] = [
                i.toDict() for i in self._networkInterfaces 
            ] if self._networkInterfaces else []
        if self._noProxy is not None:
            result["noProxy"] = \
                self._noProxy
        if self._systemType is not None:
            result["systemType"] = \
                self._systemType
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._networkInterfaces is not None):
            for obj in self._networkInterfaces:
                if (obj is not None): obj.isValid()
        return True
    

