"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .NodeHealthEnum import NodeHealthEnum
from .NodeConnectionEnum import NodeConnectionEnum
from .Console import Console
from .NodeStatusEnum import NodeStatusEnum

# Unused import over optimization prevention
str(repr(NodeStatusEnum))
str(repr(Console))
str(repr(NodeHealthEnum))
str(repr(NodeConnectionEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class Node(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.addresses = (
            None if not fromDict or propDict.get(
                "addresses"
            ) is None
            else propDict["addresses"])
        self.canBeDeleted = (
            None if not fromDict or propDict.get(
                "canBeDeleted"
            ) is None
            else propDict["canBeDeleted"])
        self.connection = (
            None if not fromDict or propDict.get(
                "connection"
            ) is None
            else propDict["connection"])
        self.console = (
            None if not fromDict or propDict.get(
                "console"
            ) is None
            else propDict["console"])
        self.currentNodeHealth = (
            None if not fromDict or propDict.get(
                "currentNodeHealth"
            ) is None
            else propDict["currentNodeHealth"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.gnac = (
            None if not fromDict or propDict.get(
                "gnac"
            ) is None
            else propDict["gnac"])
        self.ipAddress = (
            None if not fromDict or propDict.get(
                "ipAddress"
            ) is None
            else propDict["ipAddress"])
        self.isQuarantined = (
            None if not fromDict or propDict.get(
                "isQuarantined"
            ) is None
            else propDict["isQuarantined"])
        self.issues = (
            None if not fromDict or propDict.get(
                "issues"
            ) is None
            else propDict["issues"])
        self.lastReportedConnection = (
            None if not fromDict or propDict.get(
                "lastReportedConnection"
            ) is None
            else propDict["lastReportedConnection"])
        self.lastReportedStatus = (
            None if not fromDict or propDict.get(
                "lastReportedStatus"
            ) is None
            else propDict["lastReportedStatus"])
        self.lastReportedStatusTime = (
            None if not fromDict or propDict.get(
                "lastReportedStatusTime"
            ) is None
            else propDict["lastReportedStatusTime"])
        self.logsUrl = (
            None if not fromDict or propDict.get(
                "logsUrl"
            ) is None
            else propDict["logsUrl"])
        self.markedForDelete = (
            None if not fromDict or propDict.get(
                "markedForDelete"
            ) is None
            else propDict["markedForDelete"])
        self.messages = (
            None if not fromDict or propDict.get(
                "messages"
            ) is None
            else propDict["messages"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.role = (
            None if not fromDict or propDict.get(
                "role"
            ) is None
            else propDict["role"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])
        self.ttl = (
            None if not fromDict or propDict.get(
                "ttl"
            ) is None
            else propDict["ttl"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])
        self.version = (
            None if not fromDict or propDict.get(
                "version"
            ) is None
            else propDict["version"])

    @property
    def addresses(self):
        """list: addresses and ipAddress are the same fields"""
        return self._addresses

    @addresses.setter
    def addresses(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._addresses = value
        else:
            raise TypeError(
                'Property "addresses" of type "list<str>" set to wrong type'
            )

    @property
    def canBeDeleted(self):
        """bool: Master node cannot be deleted if worker nodes exist"""
        return self._canBeDeleted

    @canBeDeleted.setter
    def canBeDeleted(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._canBeDeleted = value
        else:
            raise TypeError(
                'Property "canBeDeleted" of type "list<bool>" set to wrong ty'
                'pe'
            )

    @property
    def connection(self):
        """NodeConnectionEnum: All possible values to know current node connec
        tion status"""
        return self._connection

    @connection.setter
    def connection(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._connection = value
        else:
            raise TypeError(
                'Property "connection" of type "list<NodeConnectionEnum>" set'
                ' to wrong type'
            )

    @property
    def console(self):
        """ """
        return self._console

    @console.setter
    def console(self, value):
        if value is not None and not isinstance(value, Console):
            value = Console(value)
        if (value is None) or isinstance(value, Console):
            self._console = value
        else:
            raise TypeError(
                'Property "console" of type "list<Console>" set to wrong type'
            )

    @property
    def currentNodeHealth(self):
        """NodeHealthEnum: All possible node health enums"""
        return self._currentNodeHealth

    @currentNodeHealth.setter
    def currentNodeHealth(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._currentNodeHealth = value
        else:
            raise TypeError(
                'Property "currentNodeHealth" of type "list<NodeHealthEnum>" '
                'set to wrong type'
            )

    @property
    def description(self):
        """ """
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """ """
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def gnac(self):
        """ """
        return self._gnac

    @gnac.setter
    def gnac(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gnac = value
        else:
            raise TypeError(
                'Property "gnac" of type "list<str>" set to wrong type'
            )

    @property
    def ipAddress(self):
        """list: [DEPRECATED] use field addresses instead"""
        return self._ipAddress

    @ipAddress.setter
    def ipAddress(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._ipAddress = value
        else:
            raise TypeError(
                'Property "ipAddress" of type "list<str>" set to wrong type'
            )

    @property
    def isQuarantined(self):
        """bool: Is node in quarantined"""
        return self._isQuarantined

    @isQuarantined.setter
    def isQuarantined(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isQuarantined = value
        else:
            raise TypeError(
                'Property "isQuarantined" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def issues(self):
        """list: Issues to show in the banner"""
        return self._issues

    @issues.setter
    def issues(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._issues = value
        else:
            raise TypeError(
                'Property "issues" of type "list<str>" set to wrong type'
            )

    @property
    def lastReportedConnection(self):
        """ """
        return self._lastReportedConnection

    @lastReportedConnection.setter
    def lastReportedConnection(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastReportedConnection = value
        else:
            raise TypeError(
                'Property "lastReportedConnection" of type "list<str>" set to'
                ' wrong type'
            )

    @property
    def lastReportedStatus(self):
        """NodeStatusEnum: All possible node status enums"""
        return self._lastReportedStatus

    @lastReportedStatus.setter
    def lastReportedStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._lastReportedStatus = value
        else:
            raise TypeError(
                'Property "lastReportedStatus" of type "list<NodeStatusEnum>"'
                ' set to wrong type'
            )

    @property
    def lastReportedStatusTime(self):
        """ """
        return self._lastReportedStatusTime

    @lastReportedStatusTime.setter
    def lastReportedStatusTime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastReportedStatusTime = value
        else:
            raise TypeError(
                'Property "lastReportedStatusTime" of type "list<str>" set to'
                ' wrong type'
            )

    @property
    def logsUrl(self):
        """str: Logs url for node"""
        return self._logsUrl

    @logsUrl.setter
    def logsUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logsUrl = value
        else:
            raise TypeError(
                'Property "logsUrl" of type "list<str>" set to wrong type'
            )

    @property
    def markedForDelete(self):
        """bool: Mark a node to be deleted"""
        return self._markedForDelete

    @markedForDelete.setter
    def markedForDelete(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._markedForDelete = value
        else:
            raise TypeError(
                'Property "markedForDelete" of type "list<bool>" set to wrong'
                ' type'
            )

    @property
    def messages(self):
        """list: Messages to show in the banner"""
        return self._messages

    @messages.setter
    def messages(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._messages = value
        else:
            raise TypeError(
                'Property "messages" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """ """
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def role(self):
        """ """
        return self._role

    @role.setter
    def role(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._role = value
        else:
            raise TypeError(
                'Property "role" of type "list<str>" set to wrong type'
            )

    @property
    def status(self):
        """NodeStatusEnum: All possible node status enums"""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<NodeStatusEnum>" set to wron'
                'g type'
            )

    @property
    def ttl(self):
        """ """
        return self._ttl

    @ttl.setter
    def ttl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._ttl = value
        else:
            raise TypeError(
                'Property "ttl" of type "list<str>" set to wrong type'
            )

    @property
    def type(self):
        """str: Type of the node"""
        return self._type

    @type.setter
    def type(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<str>" set to wrong type'
            )

    @property
    def version(self):
        """str: Version of the node"""
        return self._version

    @version.setter
    def version(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._version = value
        else:
            raise TypeError(
                'Property "version" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._addresses is not None:
            result["addresses"] = \
                self._addresses
        if self._canBeDeleted is not None:
            result["canBeDeleted"] = \
                self._canBeDeleted
        if self._connection is not None:
            result["connection"] = \
                self._connection
        if self._console:
            result["console"] = \
                self._console.toDict() if self._console is not None else None
        if self._currentNodeHealth is not None:
            result["currentNodeHealth"] = \
                self._currentNodeHealth
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._gnac is not None:
            result["gnac"] = \
                self._gnac
        if self._ipAddress is not None:
            result["ipAddress"] = \
                self._ipAddress
        if self._isQuarantined is not None:
            result["isQuarantined"] = \
                self._isQuarantined
        if self._issues is not None:
            result["issues"] = \
                self._issues
        if self._lastReportedConnection is not None:
            result["lastReportedConnection"] = \
                self._lastReportedConnection
        if self._lastReportedStatus is not None:
            result["lastReportedStatus"] = \
                self._lastReportedStatus
        if self._lastReportedStatusTime is not None:
            result["lastReportedStatusTime"] = \
                self._lastReportedStatusTime
        if self._logsUrl is not None:
            result["logsUrl"] = \
                self._logsUrl
        if self._markedForDelete is not None:
            result["markedForDelete"] = \
                self._markedForDelete
        if self._messages is not None:
            result["messages"] = \
                self._messages
        if self._name is not None:
            result["name"] = \
                self._name
        if self._role is not None:
            result["role"] = \
                self._role
        if self._status is not None:
            result["status"] = \
                self._status
        if self._ttl is not None:
            result["ttl"] = \
                self._ttl
        if self._type is not None:
            result["type"] = \
                self._type
        if self._version is not None:
            result["version"] = \
                self._version
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._name is not None
            and
            len(self._name) > 53):
            raise ValueError(
                "Node.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 53")
        if (self._name is not None
            and
            not re.match(
                r"^[a-z]([-a-z0-9]*[a-z0-9])?$",
                 self._name)):
            raise ValueError(
                "Node.name: " + str(self._name) + 
                " doesnt match requirement: pattern: ^[a-z]([-a-z0-9]*[a-z0-9"
                "])?$")
        if (self._displayName is not None
            and
            len(self._displayName) > 255):
            raise ValueError(
                "Node.displayName: " + str(self._displayName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._console is not None): self._console.isValid()
        return True
    

