"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .LocationDeploymentStatusEnum import LocationDeploymentStatusEnum
from .LocationStatusEnum import LocationStatusEnum
from .LocationAvailabilityEnum import LocationAvailabilityEnum
from .RemoteApp import RemoteApp

# Unused import over optimization prevention
str(repr(LocationDeploymentStatusEnum))
str(repr(LocationAvailabilityEnum))
str(repr(RemoteApp))
str(repr(LocationStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class DeploymentLocation(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.address = (
            None if not fromDict or propDict.get(
                "address"
            ) is None
            else propDict["address"])
        self.argoCDEnabled = (
            None if not fromDict or propDict.get(
                "argoCDEnabled"
            ) is None
            else propDict["argoCDEnabled"])
        self.availability = (
            None if not fromDict or propDict.get(
                "availability"
            ) is None
            else propDict["availability"])
        self.deploymentStatus = (
            None if not fromDict or propDict.get(
                "deploymentStatus"
            ) is None
            else propDict["deploymentStatus"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.gitAppHealthStatus = (
            None if not fromDict or propDict.get(
                "gitAppHealthStatus"
            ) is None
            else propDict["gitAppHealthStatus"])
        self.gitAppSyncStatus = (
            None if not fromDict or propDict.get(
                "gitAppSyncStatus"
            ) is None
            else propDict["gitAppSyncStatus"])
        self.lastReportedStatus = (
            None if not fromDict or propDict.get(
                "lastReportedStatus"
            ) is None
            else propDict["lastReportedStatus"])
        self.lastReportedStatusTime = (
            None if not fromDict or propDict.get(
                "lastReportedStatusTime"
            ) is None
            else propDict["lastReportedStatusTime"])
        self.locationDisplayName = (
            None if not fromDict or propDict.get(
                "locationDisplayName"
            ) is None
            else propDict["locationDisplayName"])
        self.locationLastUpdatedTimestamp = (
            None if not fromDict or propDict.get(
                "locationLastUpdatedTimestamp"
            ) is None
            else propDict["locationLastUpdatedTimestamp"])
        self.locationName = (
            None if not fromDict or propDict.get(
                "locationName"
            ) is None
            else propDict["locationName"])
        self.locationStatus = (
            None if not fromDict or propDict.get(
                "locationStatus"
            ) is None
            else propDict["locationStatus"])
        self.locationVersion = (
            None if not fromDict or propDict.get(
                "locationVersion"
            ) is None
            else propDict["locationVersion"])
        self.logsUrl = (
            None if not fromDict or propDict.get(
                "logsUrl"
            ) is None
            else propDict["logsUrl"])
        self.nodes = (
            None if not fromDict or propDict.get(
                "nodes"
            ) is None
            else propDict["nodes"])
        self.remoteApps = (
            None if not fromDict or propDict.get(
                "remoteApps"
            ) is None
            else [ RemoteApp(i)
            for i in propDict["remoteApps"] ])
        self.signedContainersEnabled = (
            None if not fromDict or propDict.get(
                "signedContainersEnabled"
            ) is None
            else propDict["signedContainersEnabled"])

    @property
    def address(self):
        """str: Address of the location"""
        return self._address

    @address.setter
    def address(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._address = value
        else:
            raise TypeError(
                'Property "address" of type "list<str>" set to wrong type'
            )

    @property
    def argoCDEnabled(self):
        """bool: Location has ArgoCD deployments enabled or not"""
        return self._argoCDEnabled

    @argoCDEnabled.setter
    def argoCDEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._argoCDEnabled = value
        else:
            raise TypeError(
                'Property "argoCDEnabled" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def availability(self):
        """LocationAvailabilityEnum: All possible values for location availabi
        lity"""
        return self._availability

    @availability.setter
    def availability(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._availability = value
        else:
            raise TypeError(
                'Property "availability" of type "list<LocationAvailabilityEn'
                'um>" set to wrong type'
            )

    @property
    def deploymentStatus(self):
        """LocationDeploymentStatusEnum: All possible deployment status enums 
        in location"""
        return self._deploymentStatus

    @deploymentStatus.setter
    def deploymentStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._deploymentStatus = value
        else:
            raise TypeError(
                'Property "deploymentStatus" of type "list<LocationDeployment'
                'StatusEnum>" set to wrong type'
            )

    @property
    def description(self):
        """str: Description of the location"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def gitAppHealthStatus(self):
        """GitAppHealthStatusEnum: git resource's health status"""
        return self._gitAppHealthStatus

    @gitAppHealthStatus.setter
    def gitAppHealthStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._gitAppHealthStatus = value
        else:
            raise TypeError(
                'Property "gitAppHealthStatus" of type "list<GitAppHealthStat'
                'usEnum>" set to wrong type'
            )

    GitAppHealthStatusEnum=["UNKNOWN","DEGRADED","HEALTHY","MISSING","PROGRESSING","SUSPENDED",]
    str(repr(GitAppHealthStatusEnum))  # Prevent optimizer removing enum

    @property
    def gitAppSyncStatus(self):
        """GitAppSyncStatusEnum: git application's current sync status"""
        return self._gitAppSyncStatus

    @gitAppSyncStatus.setter
    def gitAppSyncStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._gitAppSyncStatus = value
        else:
            raise TypeError(
                'Property "gitAppSyncStatus" of type "list<GitAppSyncStatusEn'
                'um>" set to wrong type'
            )

    GitAppSyncStatusEnum=["UNKNOWN","SYNCED","OUTOFSYNC",]
    str(repr(GitAppSyncStatusEnum))  # Prevent optimizer removing enum

    @property
    def lastReportedStatus(self):
        """LocationStatusEnum: All possible location status enums"""
        return self._lastReportedStatus

    @lastReportedStatus.setter
    def lastReportedStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._lastReportedStatus = value
        else:
            raise TypeError(
                'Property "lastReportedStatus" of type "list<LocationStatusEn'
                'um>" set to wrong type'
            )

    @property
    def lastReportedStatusTime(self):
        """ """
        return self._lastReportedStatusTime

    @lastReportedStatusTime.setter
    def lastReportedStatusTime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastReportedStatusTime = value
        else:
            raise TypeError(
                'Property "lastReportedStatusTime" of type "list<str>" set to'
                ' wrong type'
            )

    @property
    def locationDisplayName(self):
        """str: Display name of the location"""
        return self._locationDisplayName

    @locationDisplayName.setter
    def locationDisplayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._locationDisplayName = value
        else:
            raise TypeError(
                'Property "locationDisplayName" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def locationLastUpdatedTimestamp(self):
        """ """
        return self._locationLastUpdatedTimestamp

    @locationLastUpdatedTimestamp.setter
    def locationLastUpdatedTimestamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._locationLastUpdatedTimestamp = value
        else:
            raise TypeError(
                'Property "locationLastUpdatedTimestamp" of type "list<str>" '
                'set to wrong type'
            )

    @property
    def locationName(self):
        """str: Name of the location"""
        return self._locationName

    @locationName.setter
    def locationName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._locationName = value
        else:
            raise TypeError(
                'Property "locationName" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def locationStatus(self):
        """LocationStatusEnum: All possible location status enums"""
        return self._locationStatus

    @locationStatus.setter
    def locationStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._locationStatus = value
        else:
            raise TypeError(
                'Property "locationStatus" of type "list<LocationStatusEnum>"'
                ' set to wrong type'
            )

    @property
    def locationVersion(self):
        """str: Location version"""
        return self._locationVersion

    @locationVersion.setter
    def locationVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._locationVersion = value
        else:
            raise TypeError(
                'Property "locationVersion" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def logsUrl(self):
        """str: Logs url for deployment location"""
        return self._logsUrl

    @logsUrl.setter
    def logsUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logsUrl = value
        else:
            raise TypeError(
                'Property "logsUrl" of type "list<str>" set to wrong type'
            )

    @property
    def nodes(self):
        """list: A list of node names"""
        return self._nodes

    @nodes.setter
    def nodes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._nodes = value
        else:
            raise TypeError(
                'Property "nodes" of type "list<str>" set to wrong type'
            )

    @property
    def remoteApps(self):
        """list: array of remote apps that in the location"""
        return self._remoteApps

    @remoteApps.setter
    def remoteApps(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._remoteApps = value
        else:
            raise TypeError(
                'Property "remoteApps" of type "list<RemoteApp>" set to wrong'
                ' type'
            )

    @property
    def signedContainersEnabled(self):
        """bool: Location has signed containers required or not"""
        return self._signedContainersEnabled

    @signedContainersEnabled.setter
    def signedContainersEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._signedContainersEnabled = value
        else:
            raise TypeError(
                'Property "signedContainersEnabled" of type "list<bool>" set '
                'to wrong type'
            )

    def toDict(self):
        result = {}
        if self._address is not None:
            result["address"] = \
                self._address
        if self._argoCDEnabled is not None:
            result["argoCDEnabled"] = \
                self._argoCDEnabled
        if self._availability is not None:
            result["availability"] = \
                self._availability
        if self._deploymentStatus is not None:
            result["deploymentStatus"] = \
                self._deploymentStatus
        if self._description is not None:
            result["description"] = \
                self._description
        if self._gitAppHealthStatus is not None:
            result["gitAppHealthStatus"] = \
                self._gitAppHealthStatus
        if self._gitAppSyncStatus is not None:
            result["gitAppSyncStatus"] = \
                self._gitAppSyncStatus
        if self._lastReportedStatus is not None:
            result["lastReportedStatus"] = \
                self._lastReportedStatus
        if self._lastReportedStatusTime is not None:
            result["lastReportedStatusTime"] = \
                self._lastReportedStatusTime
        if self._locationDisplayName is not None:
            result["locationDisplayName"] = \
                self._locationDisplayName
        if self._locationLastUpdatedTimestamp is not None:
            result["locationLastUpdatedTimestamp"] = \
                self._locationLastUpdatedTimestamp
        if self._locationName is not None:
            result["locationName"] = \
                self._locationName
        if self._locationStatus is not None:
            result["locationStatus"] = \
                self._locationStatus
        if self._locationVersion is not None:
            result["locationVersion"] = \
                self._locationVersion
        if self._logsUrl is not None:
            result["logsUrl"] = \
                self._logsUrl
        if self._nodes is not None:
            result["nodes"] = \
                self._nodes
        if self._remoteApps:
            result["remoteApps"] = [
                i.toDict() for i in self._remoteApps 
            ] if self._remoteApps else []
        if self._signedContainersEnabled is not None:
            result["signedContainersEnabled"] = \
                self._signedContainersEnabled
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._locationName is not None
            and
            len(self._locationName) > 53):
            raise ValueError(
                "DeploymentLocation.locationName: " + str(self._locationName) + 
                " doesnt match requirement: maxLength: 53")
        if (self._locationName is not None
            and
            not re.match(
                r"^[a-z]([-a-z0-9]*[a-z0-9])?$",
                 self._locationName)):
            raise ValueError(
                "DeploymentLocation.locationName: " + str(self._locationName) + 
                " doesnt match requirement: pattern: ^[a-z]([-a-z0-9]*[a-z0-9"
                "])?$")
        if (self._locationDisplayName is not None
            and
            len(self._locationDisplayName) > 255):
            raise ValueError(
                "DeploymentLocation.locationDisplayName: " + str(self._locationDisplayName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._remoteApps is not None):
            for obj in self._remoteApps:
                if (obj is not None): obj.isValid()
        return True
    

