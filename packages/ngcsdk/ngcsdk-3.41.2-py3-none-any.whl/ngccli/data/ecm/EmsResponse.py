"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RequestStatus import RequestStatus
from .EmsMetaData import EmsMetaData

# Unused import over optimization prevention
str(repr(RequestStatus))
str(repr(EmsMetaData))


if sys.version_info > (3,):
    long = int
    unicode = str

class EmsResponse(object):
    """EMS response object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.apiVersion = (
            None if not fromDict or propDict.get(
                "apiVersion"
            ) is None
            else propDict["apiVersion"])
        self.kind = (
            None if not fromDict or propDict.get(
                "kind"
            ) is None
            else propDict["kind"])
        self.metadata = (
            None if not fromDict or propDict.get(
                "metadata"
            ) is None
            else propDict["metadata"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def apiVersion(self):
        """ """
        return self._apiVersion

    @apiVersion.setter
    def apiVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._apiVersion = value
        else:
            raise TypeError(
                'Property "apiVersion" of type "list<str>" set to wrong type'
            )

    @property
    def kind(self):
        """ """
        return self._kind

    @kind.setter
    def kind(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._kind = value
        else:
            raise TypeError(
                'Property "kind" of type "list<str>" set to wrong type'
            )

    @property
    def metadata(self):
        """ """
        return self._metadata

    @metadata.setter
    def metadata(self, value):
        if value is not None and not isinstance(value, EmsMetaData):
            value = EmsMetaData(value)
        if (value is None) or isinstance(value, EmsMetaData):
            self._metadata = value
        else:
            raise TypeError(
                'Property "metadata" of type "list<EmsMetaData>" set to wrong'
                ' type'
            )

    @property
    def requestStatus(self):
        """ """
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    @property
    def type(self):
        """ """
        return self._type

    @type.setter
    def type(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._apiVersion is not None:
            result["apiVersion"] = \
                self._apiVersion
        if self._kind is not None:
            result["kind"] = \
                self._kind
        if self._metadata:
            result["metadata"] = \
                self._metadata.toDict() if self._metadata is not None else None
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._metadata is not None): self._metadata.isValid()
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

