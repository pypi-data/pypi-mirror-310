"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class UpdateNodeRequest(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.commands = (
            None if not fromDict or propDict.get(
                "commands"
            ) is None
            else propDict["commands"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.initiateReboot = (
            None if not fromDict or propDict.get(
                "initiateReboot"
            ) is None
            else propDict["initiateReboot"])
        self.remoteExec = (
            None if not fromDict or propDict.get(
                "remoteExec"
            ) is None
            else propDict["remoteExec"])

    @property
    def commands(self):
        """str: Commands to execute on node"""
        return self._commands

    @commands.setter
    def commands(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._commands = value
        else:
            raise TypeError(
                'Property "commands" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: Description of the node"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: Display name of the node"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def initiateReboot(self):
        """bool: Initiate node reboot"""
        return self._initiateReboot

    @initiateReboot.setter
    def initiateReboot(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._initiateReboot = value
        else:
            raise TypeError(
                'Property "initiateReboot" of type "list<bool>" set to wrong '
                'type'
            )

    @property
    def remoteExec(self):
        """bool: Run command on node"""
        return self._remoteExec

    @remoteExec.setter
    def remoteExec(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._remoteExec = value
        else:
            raise TypeError(
                'Property "remoteExec" of type "list<bool>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._commands is not None:
            result["commands"] = \
                self._commands
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._initiateReboot is not None:
            result["initiateReboot"] = \
                self._initiateReboot
        if self._remoteExec is not None:
            result["remoteExec"] = \
                self._remoteExec
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._displayName is not None
            and
            len(self._displayName) > 255):
            raise ValueError(
                "UpdateNodeRequest.displayName: " + str(self._displayName) + 
                " doesnt match requirement: maxLength: 255")
        return True
    

