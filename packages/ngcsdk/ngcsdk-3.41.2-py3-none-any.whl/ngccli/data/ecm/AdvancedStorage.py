"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class AdvancedStorage(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.alias = (
            None if not fromDict or propDict.get(
                "alias"
            ) is None
            else propDict["alias"])
        self.available = (
            None if not fromDict or propDict.get(
                "available"
            ) is None
            else propDict["available"])
        self.mount = (
            None if not fromDict or propDict.get(
                "mount"
            ) is None
            else propDict["mount"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])
        self.used = (
            None if not fromDict or propDict.get(
                "used"
            ) is None
            else propDict["used"])

    @property
    def alias(self):
        """str: symlink name for data mount"""
        return self._alias

    @alias.setter
    def alias(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._alias = value
        else:
            raise TypeError(
                'Property "alias" of type "list<str>" set to wrong type'
            )

    @property
    def available(self):
        """str: storage available in Gb"""
        return self._available

    @available.setter
    def available(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._available = value
        else:
            raise TypeError(
                'Property "available" of type "list<str>" set to wrong type'
            )

    @property
    def mount(self):
        """str: data mount"""
        return self._mount

    @mount.setter
    def mount(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._mount = value
        else:
            raise TypeError(
                'Property "mount" of type "list<str>" set to wrong type'
            )

    @property
    def type(self):
        """str: storage type"""
        return self._type

    @type.setter
    def type(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<str>" set to wrong type'
            )

    @property
    def used(self):
        """str: storage used in Gb"""
        return self._used

    @used.setter
    def used(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._used = value
        else:
            raise TypeError(
                'Property "used" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._alias is not None:
            result["alias"] = \
                self._alias
        if self._available is not None:
            result["available"] = \
                self._available
        if self._mount is not None:
            result["mount"] = \
                self._mount
        if self._type is not None:
            result["type"] = \
                self._type
        if self._used is not None:
            result["used"] = \
                self._used
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

