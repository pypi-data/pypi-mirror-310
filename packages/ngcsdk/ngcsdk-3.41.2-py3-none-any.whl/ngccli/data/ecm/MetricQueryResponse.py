"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RequestStatus import RequestStatus

# Unused import over optimization prevention
str(repr(RequestStatus))


if sys.version_info > (3,):
    long = int
    unicode = str

class MetricQueryResponse(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.bucket = (
            None if not fromDict or propDict.get(
                "bucket"
            ) is None
            else propDict["bucket"])
        self.field = (
            None if not fromDict or propDict.get(
                "field"
            ) is None
            else propDict["field"])
        self.first = (
            None if not fromDict or propDict.get(
                "first"
            ) is None
            else propDict["first"])
        self.last = (
            None if not fromDict or propDict.get(
                "last"
            ) is None
            else propDict["last"])
        self.locationName = (
            None if not fromDict or propDict.get(
                "locationName"
            ) is None
            else propDict["locationName"])
        self.maximum = (
            None if not fromDict or propDict.get(
                "maximum"
            ) is None
            else propDict["maximum"])
        self.mean = (
            None if not fromDict or propDict.get(
                "mean"
            ) is None
            else propDict["mean"])
        self.metric = (
            None if not fromDict or propDict.get(
                "metric"
            ) is None
            else propDict["metric"])
        self.minimum = (
            None if not fromDict or propDict.get(
                "minimum"
            ) is None
            else propDict["minimum"])
        self.ninetyFivePercentile = (
            None if not fromDict or propDict.get(
                "ninetyFivePercentile"
            ) is None
            else propDict["ninetyFivePercentile"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])

    @property
    def bucket(self):
        """str: Name of the bucket"""
        return self._bucket

    @bucket.setter
    def bucket(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._bucket = value
        else:
            raise TypeError(
                'Property "bucket" of type "list<str>" set to wrong type'
            )

    @property
    def field(self):
        """str: Value of the field"""
        return self._field

    @field.setter
    def field(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._field = value
        else:
            raise TypeError(
                'Property "field" of type "list<str>" set to wrong type'
            )

    @property
    def first(self):
        """str: First value of the metric in the range"""
        return self._first

    @first.setter
    def first(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._first = value
        else:
            raise TypeError(
                'Property "first" of type "list<str>" set to wrong type'
            )

    @property
    def last(self):
        """str: Last value of the metric in the range"""
        return self._last

    @last.setter
    def last(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._last = value
        else:
            raise TypeError(
                'Property "last" of type "list<str>" set to wrong type'
            )

    @property
    def locationName(self):
        """str: Name of the location"""
        return self._locationName

    @locationName.setter
    def locationName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._locationName = value
        else:
            raise TypeError(
                'Property "locationName" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def maximum(self):
        """str: maximum value of the metric in the range"""
        return self._maximum

    @maximum.setter
    def maximum(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._maximum = value
        else:
            raise TypeError(
                'Property "maximum" of type "list<str>" set to wrong type'
            )

    @property
    def mean(self):
        """str: mean value of the metric in the range"""
        return self._mean

    @mean.setter
    def mean(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._mean = value
        else:
            raise TypeError(
                'Property "mean" of type "list<str>" set to wrong type'
            )

    @property
    def metric(self):
        """str: Name of the metric"""
        return self._metric

    @metric.setter
    def metric(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._metric = value
        else:
            raise TypeError(
                'Property "metric" of type "list<str>" set to wrong type'
            )

    @property
    def minimum(self):
        """str: Minimum value of the metric in the range"""
        return self._minimum

    @minimum.setter
    def minimum(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._minimum = value
        else:
            raise TypeError(
                'Property "minimum" of type "list<str>" set to wrong type'
            )

    @property
    def ninetyFivePercentile(self):
        """str: ninetyFivePercentile value of the metric in the range"""
        return self._ninetyFivePercentile

    @ninetyFivePercentile.setter
    def ninetyFivePercentile(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._ninetyFivePercentile = value
        else:
            raise TypeError(
                'Property "ninetyFivePercentile" of type "list<str>" set to w'
                'rong type'
            )

    @property
    def requestStatus(self):
        """ """
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    def toDict(self):
        result = {}
        if self._bucket is not None:
            result["bucket"] = \
                self._bucket
        if self._field is not None:
            result["field"] = \
                self._field
        if self._first is not None:
            result["first"] = \
                self._first
        if self._last is not None:
            result["last"] = \
                self._last
        if self._locationName is not None:
            result["locationName"] = \
                self._locationName
        if self._maximum is not None:
            result["maximum"] = \
                self._maximum
        if self._mean is not None:
            result["mean"] = \
                self._mean
        if self._metric is not None:
            result["metric"] = \
                self._metric
        if self._minimum is not None:
            result["minimum"] = \
                self._minimum
        if self._ninetyFivePercentile is not None:
            result["ninetyFivePercentile"] = \
                self._ninetyFivePercentile
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

