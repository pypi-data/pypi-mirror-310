"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class GitRepositoryRequest(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.enableLFSSupport = (
            None if not fromDict or propDict.get(
                "enableLFSSupport"
            ) is None
            else propDict["enableLFSSupport"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.password = (
            None if not fromDict or propDict.get(
                "password"
            ) is None
            else propDict["password"])
        self.protocol = (
            None if not fromDict or propDict.get(
                "protocol"
            ) is None
            else propDict["protocol"])
        self.proxy = (
            None if not fromDict or propDict.get(
                "proxy"
            ) is None
            else propDict["proxy"])
        self.sshPrivateKey = (
            None if not fromDict or propDict.get(
                "sshPrivateKey"
            ) is None
            else propDict["sshPrivateKey"])
        self.tLSClientCert = (
            None if not fromDict or propDict.get(
                "tLSClientCert"
            ) is None
            else propDict["tLSClientCert"])
        self.tlsClientCertKey = (
            None if not fromDict or propDict.get(
                "tlsClientCertKey"
            ) is None
            else propDict["tlsClientCertKey"])
        self.url = (
            None if not fromDict or propDict.get(
                "url"
            ) is None
            else propDict["url"])
        self.username = (
            None if not fromDict or propDict.get(
                "username"
            ) is None
            else propDict["username"])

    @property
    def enableLFSSupport(self):
        """bool: should be enabled if the repository uses Git LFS support"""
        return self._enableLFSSupport

    @enableLFSSupport.setter
    def enableLFSSupport(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._enableLFSSupport = value
        else:
            raise TypeError(
                'Property "enableLFSSupport" of type "list<bool>" set to wron'
                'g type'
            )

    @property
    def name(self):
        """str: the unique identifying name of the repository"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def password(self):
        """str: the password to connect to the repository with (optional)"""
        return self._password

    @password.setter
    def password(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._password = value
        else:
            raise TypeError(
                'Property "password" of type "list<str>" set to wrong type'
            )

    @property
    def protocol(self):
        """str: determines whether it is an ssh or https based repository"""
        return self._protocol

    @protocol.setter
    def protocol(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._protocol = value
        else:
            raise TypeError(
                'Property "protocol" of type "list<str>" set to wrong type'
            )

    @property
    def proxy(self):
        """str: Proxy is whether or not the repository"""
        return self._proxy

    @proxy.setter
    def proxy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._proxy = value
        else:
            raise TypeError(
                'Property "proxy" of type "list<str>" set to wrong type'
            )

    @property
    def sshPrivateKey(self):
        """str: the key for SSH"""
        return self._sshPrivateKey

    @sshPrivateKey.setter
    def sshPrivateKey(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._sshPrivateKey = value
        else:
            raise TypeError(
                'Property "sshPrivateKey" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def tLSClientCert(self):
        """str: is the client certificate"""
        return self._tLSClientCert

    @tLSClientCert.setter
    def tLSClientCert(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._tLSClientCert = value
        else:
            raise TypeError(
                'Property "tLSClientCert" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def tlsClientCertKey(self):
        """str: the client certificate private key"""
        return self._tlsClientCertKey

    @tlsClientCertKey.setter
    def tlsClientCertKey(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._tlsClientCertKey = value
        else:
            raise TypeError(
                'Property "tlsClientCertKey" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def url(self):
        """str: the unique identifying URL of the repository"""
        return self._url

    @url.setter
    def url(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._url = value
        else:
            raise TypeError(
                'Property "url" of type "list<str>" set to wrong type'
            )

    @property
    def username(self):
        """str: the user to connect to the repository with (optional)"""
        return self._username

    @username.setter
    def username(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._username = value
        else:
            raise TypeError(
                'Property "username" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._enableLFSSupport is not None:
            result["enableLFSSupport"] = \
                self._enableLFSSupport
        if self._name is not None:
            result["name"] = \
                self._name
        if self._password is not None:
            result["password"] = \
                self._password
        if self._protocol is not None:
            result["protocol"] = \
                self._protocol
        if self._proxy is not None:
            result["proxy"] = \
                self._proxy
        if self._sshPrivateKey is not None:
            result["sshPrivateKey"] = \
                self._sshPrivateKey
        if self._tLSClientCert is not None:
            result["tLSClientCert"] = \
                self._tLSClientCert
        if self._tlsClientCertKey is not None:
            result["tlsClientCertKey"] = \
                self._tlsClientCertKey
        if self._url is not None:
            result["url"] = \
                self._url
        if self._username is not None:
            result["username"] = \
                self._username
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

