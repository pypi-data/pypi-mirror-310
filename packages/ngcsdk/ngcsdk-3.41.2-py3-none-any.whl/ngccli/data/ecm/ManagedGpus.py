"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ManagedGpus(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.count = (
            None if not fromDict or propDict.get(
                "count"
            ) is None
            else propDict["count"])
        self.gpuType = (
            None if not fromDict or propDict.get(
                "gpuType"
            ) is None
            else propDict["gpuType"])

    @property
    def count(self):
        """int: GPU count for the GPU type"""
        return self._count

    @count.setter
    def count(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._count = value
        else:
            raise TypeError(
                'Property "count" of type "list<int>" set to wrong type'
            )

    @property
    def gpuType(self):
        """str: GPU type"""
        return self._gpuType

    @gpuType.setter
    def gpuType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gpuType = value
        else:
            raise TypeError(
                'Property "gpuType" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._count is not None:
            result["count"] = \
                self._count
        if self._gpuType is not None:
            result["gpuType"] = \
                self._gpuType
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

