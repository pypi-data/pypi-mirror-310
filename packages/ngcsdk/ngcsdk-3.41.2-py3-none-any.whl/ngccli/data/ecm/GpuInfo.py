"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .MigProfileInfo import MigProfileInfo
from .MigStatusEnum import MigStatusEnum

# Unused import over optimization prevention
str(repr(MigProfileInfo))
str(repr(MigStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class GpuInfo(object):
    """GPU information in a node"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.availableMigProfiles = (
            None if not fromDict or propDict.get(
                "availableMigProfiles"
            ) is None
            else [ MigProfileInfo(i)
            for i in propDict["availableMigProfiles"] ])
        self.currentMigProfile = (
            None if not fromDict or propDict.get(
                "currentMigProfile"
            ) is None
            else propDict["currentMigProfile"])
        self.errorMessage = (
            None if not fromDict or propDict.get(
                "errorMessage"
            ) is None
            else propDict["errorMessage"])
        self.gpuDescription = (
            None if not fromDict or propDict.get(
                "gpuDescription"
            ) is None
            else propDict["gpuDescription"])
        self.gpuId = (
            None if not fromDict or propDict.get(
                "gpuId"
            ) is None
            else propDict["gpuId"])
        self.isMigSupportedInGpu = (
            None if not fromDict or propDict.get(
                "isMigSupportedInGpu"
            ) is None
            else propDict["isMigSupportedInGpu"])
        self.migStatus = (
            None if not fromDict or propDict.get(
                "migStatus"
            ) is None
            else propDict["migStatus"])

    @property
    def availableMigProfiles(self):
        """ """
        return self._availableMigProfiles

    @availableMigProfiles.setter
    def availableMigProfiles(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._availableMigProfiles = value
        else:
            raise TypeError(
                'Property "availableMigProfiles" of type "list<MigProfileInfo'
                '>" set to wrong type'
            )

    @property
    def currentMigProfile(self):
        """ """
        return self._currentMigProfile

    @currentMigProfile.setter
    def currentMigProfile(self, value):
        if value is not None and not isinstance(value, MigProfileInfo):
            value = MigProfileInfo(value)
        if (value is None) or isinstance(value, MigProfileInfo):
            self._currentMigProfile = value
        else:
            raise TypeError(
                'Property "currentMigProfile" of type "list<MigProfileInfo>" '
                'set to wrong type'
            )

    @property
    def errorMessage(self):
        """str: Error message to return to client"""
        return self._errorMessage

    @errorMessage.setter
    def errorMessage(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._errorMessage = value
        else:
            raise TypeError(
                'Property "errorMessage" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def gpuDescription(self):
        """str: Description of the GPU (e.g. A100-PCIE-40GB)"""
        return self._gpuDescription

    @gpuDescription.setter
    def gpuDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gpuDescription = value
        else:
            raise TypeError(
                'Property "gpuDescription" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def gpuId(self):
        """str: The unique identifier of a GPU"""
        return self._gpuId

    @gpuId.setter
    def gpuId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gpuId = value
        else:
            raise TypeError(
                'Property "gpuId" of type "list<str>" set to wrong type'
            )

    @property
    def isMigSupportedInGpu(self):
        """bool: Is MIG supported in the gpu"""
        return self._isMigSupportedInGpu

    @isMigSupportedInGpu.setter
    def isMigSupportedInGpu(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isMigSupportedInGpu = value
        else:
            raise TypeError(
                'Property "isMigSupportedInGpu" of type "list<bool>" set to w'
                'rong type'
            )

    @property
    def migStatus(self):
        """MigStatusEnum: Status of MIG on the GPU """
        return self._migStatus

    @migStatus.setter
    def migStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._migStatus = value
        else:
            raise TypeError(
                'Property "migStatus" of type "list<MigStatusEnum>" set to wr'
                'ong type'
            )

    def toDict(self):
        result = {}
        if self._availableMigProfiles:
            result["availableMigProfiles"] = [
                i.toDict() for i in self._availableMigProfiles 
            ] if self._availableMigProfiles else []
        if self._currentMigProfile:
            result["currentMigProfile"] = \
                self._currentMigProfile.toDict() if self._currentMigProfile is not None else None
        if self._errorMessage is not None:
            result["errorMessage"] = \
                self._errorMessage
        if self._gpuDescription is not None:
            result["gpuDescription"] = \
                self._gpuDescription
        if self._gpuId is not None:
            result["gpuId"] = \
                self._gpuId
        if self._isMigSupportedInGpu is not None:
            result["isMigSupportedInGpu"] = \
                self._isMigSupportedInGpu
        if self._migStatus is not None:
            result["migStatus"] = \
                self._migStatus
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._availableMigProfiles is not None):
            for obj in self._availableMigProfiles:
                if (obj is not None): obj.isValid()
        if (self._currentMigProfile is not None): self._currentMigProfile.isValid()
        return True
    

