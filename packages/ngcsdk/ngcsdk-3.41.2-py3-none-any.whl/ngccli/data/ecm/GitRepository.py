"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Git import Git

# Unused import over optimization prevention
str(repr(Git))


if sys.version_info > (3,):
    long = int
    unicode = str

class GitRepository(object):
    """Repository represents a git or helm repository for an EGX application t
    o be deployed from"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.git = (
            None if not fromDict or propDict.get(
                "git"
            ) is None
            else propDict["git"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.protocol = (
            None if not fromDict or propDict.get(
                "protocol"
            ) is None
            else propDict["protocol"])
        self.url = (
            None if not fromDict or propDict.get(
                "url"
            ) is None
            else propDict["url"])

    @property
    def git(self):
        """Git: represents the information required for connecting to a git re
        pository"""
        return self._git

    @git.setter
    def git(self, value):
        if value is not None and not isinstance(value, Git):
            value = Git(value)
        if (value is None) or isinstance(value, Git):
            self._git = value
        else:
            raise TypeError(
                'Property "git" of type "list<Git>" set to wrong type'
            )

    @property
    def name(self):
        """str: the unique identifying name of the repository"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def protocol(self):
        """str: determines whether it is an ssh or https based repository"""
        return self._protocol

    @protocol.setter
    def protocol(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._protocol = value
        else:
            raise TypeError(
                'Property "protocol" of type "list<str>" set to wrong type'
            )

    @property
    def url(self):
        """str: the unique identifying URL of the repository"""
        return self._url

    @url.setter
    def url(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._url = value
        else:
            raise TypeError(
                'Property "url" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._git:
            result["git"] = \
                self._git.toDict() if self._git is not None else None
        if self._name is not None:
            result["name"] = \
                self._name
        if self._protocol is not None:
            result["protocol"] = \
                self._protocol
        if self._url is not None:
            result["url"] = \
                self._url
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._git is not None): self._git.isValid()
        return True
    

