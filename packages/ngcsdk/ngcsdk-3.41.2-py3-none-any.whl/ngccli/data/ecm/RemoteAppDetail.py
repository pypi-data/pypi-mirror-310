"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class RemoteAppDetail(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.creationTimestamp = (
            None if not fromDict or propDict.get(
                "creationTimestamp"
            ) is None
            else propDict["creationTimestamp"])
        self.locationName = (
            None if not fromDict or propDict.get(
                "locationName"
            ) is None
            else propDict["locationName"])
        self.remoteAppDisplayName = (
            None if not fromDict or propDict.get(
                "remoteAppDisplayName"
            ) is None
            else propDict["remoteAppDisplayName"])
        self.remoteAppName = (
            None if not fromDict or propDict.get(
                "remoteAppName"
            ) is None
            else propDict["remoteAppName"])
        self.remoteAppServiceUrl = (
            None if not fromDict or propDict.get(
                "remoteAppServiceUrl"
            ) is None
            else propDict["remoteAppServiceUrl"])
        self.remoteAppStatus = (
            None if not fromDict or propDict.get(
                "remoteAppStatus"
            ) is None
            else propDict["remoteAppStatus"])

    @property
    def creationTimestamp(self):
        """ """
        return self._creationTimestamp

    @creationTimestamp.setter
    def creationTimestamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._creationTimestamp = value
        else:
            raise TypeError(
                'Property "creationTimestamp" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def locationName(self):
        """ """
        return self._locationName

    @locationName.setter
    def locationName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._locationName = value
        else:
            raise TypeError(
                'Property "locationName" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def remoteAppDisplayName(self):
        """ """
        return self._remoteAppDisplayName

    @remoteAppDisplayName.setter
    def remoteAppDisplayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._remoteAppDisplayName = value
        else:
            raise TypeError(
                'Property "remoteAppDisplayName" of type "list<str>" set to w'
                'rong type'
            )

    @property
    def remoteAppName(self):
        """ """
        return self._remoteAppName

    @remoteAppName.setter
    def remoteAppName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._remoteAppName = value
        else:
            raise TypeError(
                'Property "remoteAppName" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def remoteAppServiceUrl(self):
        """ """
        return self._remoteAppServiceUrl

    @remoteAppServiceUrl.setter
    def remoteAppServiceUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._remoteAppServiceUrl = value
        else:
            raise TypeError(
                'Property "remoteAppServiceUrl" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def remoteAppStatus(self):
        """ """
        return self._remoteAppStatus

    @remoteAppStatus.setter
    def remoteAppStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._remoteAppStatus = value
        else:
            raise TypeError(
                'Property "remoteAppStatus" of type "list<RemoteAppStatusEnum'
                '>" set to wrong type'
            )

    RemoteAppStatusEnum=["UNKNOWN","CREATED","READY","IN_PROGRESS","NOT_READY","PENDING","TERMINATING","FAILED",]
    str(repr(RemoteAppStatusEnum))  # Prevent optimizer removing enum

    def toDict(self):
        result = {}
        if self._creationTimestamp is not None:
            result["creationTimestamp"] = \
                self._creationTimestamp
        if self._locationName is not None:
            result["locationName"] = \
                self._locationName
        if self._remoteAppDisplayName is not None:
            result["remoteAppDisplayName"] = \
                self._remoteAppDisplayName
        if self._remoteAppName is not None:
            result["remoteAppName"] = \
                self._remoteAppName
        if self._remoteAppServiceUrl is not None:
            result["remoteAppServiceUrl"] = \
                self._remoteAppServiceUrl
        if self._remoteAppStatus is not None:
            result["remoteAppStatus"] = \
                self._remoteAppStatus
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

