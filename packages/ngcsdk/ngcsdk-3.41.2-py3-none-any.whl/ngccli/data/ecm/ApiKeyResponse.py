"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RequestStatus import RequestStatus

# Unused import over optimization prevention
str(repr(RequestStatus))


if sys.version_info > (3,):
    long = int
    unicode = str

class ApiKeyResponse(object):
    """Get api key response"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.apiKey = (
            None if not fromDict or propDict.get(
                "apiKey"
            ) is None
            else propDict["apiKey"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])

    @property
    def apiKey(self):
        """str: Last 4 characters of API key if API key exists. Rest of charac
        ters are marked as x"""
        return self._apiKey

    @apiKey.setter
    def apiKey(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._apiKey = value
        else:
            raise TypeError(
                'Property "apiKey" of type "list<str>" set to wrong type'
            )

    @property
    def requestStatus(self):
        """ """
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    def toDict(self):
        result = {}
        if self._apiKey is not None:
            result["apiKey"] = \
                self._apiKey
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

