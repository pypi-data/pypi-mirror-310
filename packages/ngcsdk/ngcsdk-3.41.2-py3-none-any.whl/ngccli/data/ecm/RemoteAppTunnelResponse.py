"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class RemoteAppTunnelResponse(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.caCertificate = (
            None if not fromDict or propDict.get(
                "caCertificate"
            ) is None
            else propDict["caCertificate"])
        self.tlsCertificate = (
            None if not fromDict or propDict.get(
                "tlsCertificate"
            ) is None
            else propDict["tlsCertificate"])
        self.tlsKey = (
            None if not fromDict or propDict.get(
                "tlsKey"
            ) is None
            else propDict["tlsKey"])
        self.webProxy = (
            None if not fromDict or propDict.get(
                "webProxy"
            ) is None
            else propDict["webProxy"])

    @property
    def caCertificate(self):
        """str: Ca certificate for remote app tunnel"""
        return self._caCertificate

    @caCertificate.setter
    def caCertificate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._caCertificate = value
        else:
            raise TypeError(
                'Property "caCertificate" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def tlsCertificate(self):
        """str: Tls certificate for remote app tunnel"""
        return self._tlsCertificate

    @tlsCertificate.setter
    def tlsCertificate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._tlsCertificate = value
        else:
            raise TypeError(
                'Property "tlsCertificate" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def tlsKey(self):
        """str: Tls key for remote app tunnel"""
        return self._tlsKey

    @tlsKey.setter
    def tlsKey(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._tlsKey = value
        else:
            raise TypeError(
                'Property "tlsKey" of type "list<str>" set to wrong type'
            )

    @property
    def webProxy(self):
        """str: web proxy URL for remote app tunnel"""
        return self._webProxy

    @webProxy.setter
    def webProxy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._webProxy = value
        else:
            raise TypeError(
                'Property "webProxy" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._caCertificate is not None:
            result["caCertificate"] = \
                self._caCertificate
        if self._tlsCertificate is not None:
            result["tlsCertificate"] = \
                self._tlsCertificate
        if self._tlsKey is not None:
            result["tlsKey"] = \
                self._tlsKey
        if self._webProxy is not None:
            result["webProxy"] = \
                self._webProxy
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._tlsKey is None:
            raise ValueError(
                "RemoteAppTunnelResponse.tlsKey doesnt match requirement:" 
                "required: True"
            )
        if self._tlsCertificate is None:
            raise ValueError(
                "RemoteAppTunnelResponse.tlsCertificate doesnt match requirement:" 
                "required: True"
            )
        if self._caCertificate is None:
            raise ValueError(
                "RemoteAppTunnelResponse.caCertificate doesnt match requirement:" 
                "required: True"
            )
        if self._webProxy is None:
            raise ValueError(
                "RemoteAppTunnelResponse.webProxy doesnt match requirement:" 
                "required: True"
            )
        return True
    

