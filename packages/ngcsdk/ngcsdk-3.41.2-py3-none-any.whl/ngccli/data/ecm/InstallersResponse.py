"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .CustomInstaller import CustomInstaller
from .Installer import Installer

# Unused import over optimization prevention
str(repr(CustomInstaller))
str(repr(Installer))


if sys.version_info > (3,):
    long = int
    unicode = str

class InstallersResponse(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.customInstallers = (
            None if not fromDict or propDict.get(
                "customInstallers"
            ) is None
            else [ CustomInstaller(i)
            for i in propDict["customInstallers"] ])
        self.installers = (
            None if not fromDict or propDict.get(
                "installers"
            ) is None
            else [ Installer(i)
            for i in propDict["installers"] ])

    @property
    def customInstallers(self):
        """list: Available custom installers"""
        return self._customInstallers

    @customInstallers.setter
    def customInstallers(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._customInstallers = value
        else:
            raise TypeError(
                'Property "customInstallers" of type "list<CustomInstaller>" '
                'set to wrong type'
            )

    @property
    def installers(self):
        """list: Available FC installers"""
        return self._installers

    @installers.setter
    def installers(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._installers = value
        else:
            raise TypeError(
                'Property "installers" of type "list<Installer>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._customInstallers:
            result["customInstallers"] = [
                i.toDict() for i in self._customInstallers 
            ] if self._customInstallers else []
        if self._installers:
            result["installers"] = [
                i.toDict() for i in self._installers 
            ] if self._installers else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._installers is not None):
            for obj in self._installers:
                if (obj is not None): obj.isValid()
        if (self._customInstallers is not None):
            for obj in self._customInstallers:
                if (obj is not None): obj.isValid()
        return True
    

