"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class Alert(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.alertCriticalLevel = (
            None if not fromDict or propDict.get(
                "alertCriticalLevel"
            ) is None
            else propDict["alertCriticalLevel"])
        self.alertCriticalMessage = (
            None if not fromDict or propDict.get(
                "alertCriticalMessage"
            ) is None
            else propDict["alertCriticalMessage"])
        self.alertWarningLevel = (
            None if not fromDict or propDict.get(
                "alertWarningLevel"
            ) is None
            else propDict["alertWarningLevel"])
        self.alertWarningMessage = (
            None if not fromDict or propDict.get(
                "alertWarningMessage"
            ) is None
            else propDict["alertWarningMessage"])
        self.key = (
            None if not fromDict or propDict.get(
                "key"
            ) is None
            else propDict["key"])

    @property
    def alertCriticalLevel(self):
        """ """
        return self._alertCriticalLevel

    @alertCriticalLevel.setter
    def alertCriticalLevel(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._alertCriticalLevel = value
        else:
            raise TypeError(
                'Property "alertCriticalLevel" of type "list<str>" set to wro'
                'ng type'
            )

    @property
    def alertCriticalMessage(self):
        """ """
        return self._alertCriticalMessage

    @alertCriticalMessage.setter
    def alertCriticalMessage(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._alertCriticalMessage = value
        else:
            raise TypeError(
                'Property "alertCriticalMessage" of type "list<str>" set to w'
                'rong type'
            )

    @property
    def alertWarningLevel(self):
        """ """
        return self._alertWarningLevel

    @alertWarningLevel.setter
    def alertWarningLevel(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._alertWarningLevel = value
        else:
            raise TypeError(
                'Property "alertWarningLevel" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def alertWarningMessage(self):
        """ """
        return self._alertWarningMessage

    @alertWarningMessage.setter
    def alertWarningMessage(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._alertWarningMessage = value
        else:
            raise TypeError(
                'Property "alertWarningMessage" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def key(self):
        """ """
        return self._key

    @key.setter
    def key(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._key = value
        else:
            raise TypeError(
                'Property "key" of type "list<KeyEnum>" set to wrong type'
            )

    KeyEnum=["CPU","MEM","DISK",]
    str(repr(KeyEnum))  # Prevent optimizer removing enum

    def toDict(self):
        result = {}
        if self._alertCriticalLevel is not None:
            result["alertCriticalLevel"] = \
                self._alertCriticalLevel
        if self._alertCriticalMessage is not None:
            result["alertCriticalMessage"] = \
                self._alertCriticalMessage
        if self._alertWarningLevel is not None:
            result["alertWarningLevel"] = \
                self._alertWarningLevel
        if self._alertWarningMessage is not None:
            result["alertWarningMessage"] = \
                self._alertWarningMessage
        if self._key is not None:
            result["key"] = \
                self._key
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._key is None:
            raise ValueError(
                "Alert.key doesnt match requirement:" 
                "required: True"
            )
        return True
    

