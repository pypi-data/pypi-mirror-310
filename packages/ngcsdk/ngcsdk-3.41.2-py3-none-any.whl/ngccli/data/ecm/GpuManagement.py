"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ManagedGpus import ManagedGpus

# Unused import over optimization prevention
str(repr(ManagedGpus))


if sys.version_info > (3,):
    long = int
    unicode = str

class GpuManagement(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.locationName = (
            None if not fromDict or propDict.get(
                "locationName"
            ) is None
            else propDict["locationName"])
        self.managedGpus = (
            None if not fromDict or propDict.get(
                "managedGpus"
            ) is None
            else [ ManagedGpus(i)
            for i in propDict["managedGpus"] ])
        self.nodeName = (
            None if not fromDict or propDict.get(
                "nodeName"
            ) is None
            else propDict["nodeName"])
        self.systemType = (
            None if not fromDict or propDict.get(
                "systemType"
            ) is None
            else propDict["systemType"])
        self.totalGpuCount = (
            None if not fromDict or propDict.get(
                "totalGpuCount"
            ) is None
            else propDict["totalGpuCount"])

    @property
    def locationName(self):
        """str: Name of the location"""
        return self._locationName

    @locationName.setter
    def locationName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._locationName = value
        else:
            raise TypeError(
                'Property "locationName" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def managedGpus(self):
        """ """
        return self._managedGpus

    @managedGpus.setter
    def managedGpus(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._managedGpus = value
        else:
            raise TypeError(
                'Property "managedGpus" of type "list<ManagedGpus>" set to wr'
                'ong type'
            )

    @property
    def nodeName(self):
        """str: Name of the node"""
        return self._nodeName

    @nodeName.setter
    def nodeName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._nodeName = value
        else:
            raise TypeError(
                'Property "nodeName" of type "list<str>" set to wrong type'
            )

    @property
    def systemType(self):
        """str: Type of the system"""
        return self._systemType

    @systemType.setter
    def systemType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._systemType = value
        else:
            raise TypeError(
                'Property "systemType" of type "list<str>" set to wrong type'
            )

    @property
    def totalGpuCount(self):
        """int: Total GPU count in the location and node"""
        return self._totalGpuCount

    @totalGpuCount.setter
    def totalGpuCount(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._totalGpuCount = value
        else:
            raise TypeError(
                'Property "totalGpuCount" of type "list<int>" set to wrong ty'
                'pe'
            )

    def toDict(self):
        result = {}
        if self._locationName is not None:
            result["locationName"] = \
                self._locationName
        if self._managedGpus:
            result["managedGpus"] = [
                i.toDict() for i in self._managedGpus 
            ] if self._managedGpus else []
        if self._nodeName is not None:
            result["nodeName"] = \
                self._nodeName
        if self._systemType is not None:
            result["systemType"] = \
                self._systemType
        if self._totalGpuCount is not None:
            result["totalGpuCount"] = \
                self._totalGpuCount
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._locationName is not None
            and
            len(self._locationName) > 53):
            raise ValueError(
                "GpuManagement.locationName: " + str(self._locationName) + 
                " doesnt match requirement: maxLength: 53")
        if (self._locationName is not None
            and
            not re.match(
                r"^[a-z]([-a-z0-9]*[a-z0-9])?$",
                 self._locationName)):
            raise ValueError(
                "GpuManagement.locationName: " + str(self._locationName) + 
                " doesnt match requirement: pattern: ^[a-z]([-a-z0-9]*[a-z0-9"
                "])?$")
        if (self._nodeName is not None
            and
            len(self._nodeName) > 53):
            raise ValueError(
                "GpuManagement.nodeName: " + str(self._nodeName) + 
                " doesnt match requirement: maxLength: 53")
        if (self._nodeName is not None
            and
            not re.match(
                r"^[a-z]([-a-z0-9]*[a-z0-9])?$",
                 self._nodeName)):
            raise ValueError(
                "GpuManagement.nodeName: " + str(self._nodeName) + 
                " doesnt match requirement: pattern: ^[a-z]([-a-z0-9]*[a-z0-9"
                "])?$")
        if (self._managedGpus is not None):
            for obj in self._managedGpus:
                if (obj is not None): obj.isValid()
        return True
    

