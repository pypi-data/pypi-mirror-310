#  Deployment Pipeline - Version MLOPS_VERSION_GOES_HERE
#
# We use the following branching and deployment strategy
# 1) For all new commits to PRs from feature branches into develop, we deploy to dev
# 2) Mergin the feature branch into development branch will trigger a deployment to test
# 3) Merging the development branch into master will trigger a deployment to prod
name: Deployment Pipeline

on: [pull_request, push]

jobs:
  dump-context:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

  deploy-dev-prediction-service:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && (github.base_ref == 'development') || (github.base_ref == 'develop')}}
    environment: dev
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha}}
          fetch-depth: 0

      - name: Deploy to Dev
        uses: ./.github/actions/deploy-prediction-service-action
        env:
          COGNITE_CLIENT_ID_READ: ${{ secrets.COGNITE_CLIENT_ID_READ }}
          COGNITE_CLIENT_SECRET_READ: ${{ secrets.COGNITE_CLIENT_SECRET_READ }}
          COGNITE_CLIENT_SECRET_WRITE: ${{ secrets.COGNITE_CLIENT_SECRET_WRITE }}
          COGNITE_CLIENT_ID_WRITE: ${{ secrets.COGNITE_CLIENT_ID_WRITE }}
          COGNITE_OIDC_BASE_URL: ${{ secrets.COGNITE_OIDC_BASE_URL }}
          COGNITE_TENANT_ID: ${{ secrets.COGNITE_TENANT_ID }}
        with:
          model_env: ${{ vars.MODEL_ENV }}
          mlops_version: MLOPS_VERSION_GOES_HERE

  promote-artifacts-to-test:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref_name == 'development' || github.ref_name == 'develop') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up mlops environment
        uses: ./.github/actions/setup-mlops-action
        with:
          model_env: dev
          service_name: prediction
          install_poetry: false

      - name: Install MLOps version
        run: |
          pip install "akerbp-mlops[cdf]==MLOPS_VERSION_GOES_HERE"
        shell: bash

      - name: Promote to test
        env:
          COGNITE_CLIENT_ID_READ: ${{ secrets.COGNITE_CLIENT_ID_READ }}
          COGNITE_CLIENT_SECRET_READ: ${{ secrets.COGNITE_CLIENT_SECRET_READ }}
          COGNITE_CLIENT_SECRET_WRITE: ${{ secrets.COGNITE_CLIENT_SECRET_WRITE }}
          COGNITE_CLIENT_ID_WRITE: ${{ secrets.COGNITE_CLIENT_ID_WRITE }}
          COGNITE_OIDC_BASE_URL: ${{ secrets.COGNITE_OIDC_BASE_URL }}
          COGNITE_TENANT_ID: ${{ secrets.COGNITE_TENANT_ID }}
        shell: bash
        run: |
          promote_artifacts

  deploy-test-prediction-service:
    runs-on: ubuntu-latest
    needs: [promote-artifacts-to-test]
    environment: test
    permissions:
      contents: write
    env:
      COGNITE_CLIENT_ID_READ: ${{ secrets.COGNITE_CLIENT_ID_READ }}
      COGNITE_CLIENT_SECRET_READ: ${{ secrets.COGNITE_CLIENT_SECRET_READ }}
      COGNITE_CLIENT_SECRET_WRITE: ${{ secrets.COGNITE_CLIENT_SECRET_WRITE }}
      COGNITE_CLIENT_ID_WRITE: ${{ secrets.COGNITE_CLIENT_ID_WRITE }}
      COGNITE_OIDC_BASE_URL: ${{ secrets.COGNITE_OIDC_BASE_URL }}
      COGNITE_TENANT_ID: ${{ secrets.COGNITE_TENANT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Deploy to test
        uses: ./.github/actions/deploy-prediction-service-action
        with:
          model_env: test
          mlops_version: MLOPS_VERSION_GOES_HERE

  promote-artifacts-to-prod:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref_name == 'master' || github.ref_name == 'main') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up mlops environment
        uses: ./.github/actions/setup-mlops-action
        with:
          model_env: test
          service_name: prediction
          install_poetry: false

      - name: Install MLOps version
        run: |
          pip install "akerbp-mlops[cdf]==MLOPS_VERSION_GOES_HERE"
        shell: bash

      - name: Promote to Prod
        env:
          COGNITE_CLIENT_ID_READ: ${{ secrets.COGNITE_CLIENT_ID_READ }}
          COGNITE_CLIENT_SECRET_READ: ${{ secrets.COGNITE_CLIENT_SECRET_READ }}
          COGNITE_CLIENT_SECRET_WRITE: ${{ secrets.COGNITE_CLIENT_SECRET_WRITE }}
          COGNITE_CLIENT_ID_WRITE: ${{ secrets.COGNITE_CLIENT_ID_WRITE }}
          COGNITE_OIDC_BASE_URL: ${{ secrets.COGNITE_OIDC_BASE_URL }}
          COGNITE_TENANT_ID: ${{ secrets.COGNITE_TENANT_ID }}
        shell: bash
        run: |
          promote_artifacts

  deploy-prod-prediction-service:
    runs-on: ubuntu-latest
    needs: [promote-artifacts-to-prod]
    environment: prod
    permissions:
      contents: write
    env:
      COGNITE_CLIENT_ID_READ: ${{ secrets.COGNITE_CLIENT_ID_READ }}
      COGNITE_CLIENT_SECRET_READ: ${{ secrets.COGNITE_CLIENT_SECRET_READ }}
      COGNITE_CLIENT_SECRET_WRITE: ${{ secrets.COGNITE_CLIENT_SECRET_WRITE }}
      COGNITE_CLIENT_ID_WRITE: ${{ secrets.COGNITE_CLIENT_ID_WRITE }}
      COGNITE_OIDC_BASE_URL: ${{ secrets.COGNITE_OIDC_BASE_URL }}
      COGNITE_TENANT_ID: ${{ secrets.COGNITE_TENANT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0

      - name: Deploy to prod
        uses: ./.github/actions/deploy-prediction-service-action
        with:
          model_env: prod
          mlops_version: MLOPS_VERSION_GOES_HERE
