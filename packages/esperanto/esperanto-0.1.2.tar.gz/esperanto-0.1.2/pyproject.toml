[tool.poetry]
name = "esperanto"
version = "0.1.2"
description = "A unified interface for various AI model providers"
authors = ["Luis Novo"]
readme = "README.pypi.md"
repository = "https://github.com/lfnovo/esperanto"
homepage = "https://github.com/lfnovo/esperanto"
documentation = "https://github.com/lfnovo/esperanto#readme"
keywords = ["ai", "llm", "text-to-speech", "speech-to-text", "openai", "anthropic", "google", "elevenlabs"]
license = "MIT"
packages = [
    {include = "esperanto", from = "."},
]

[tool.poetry.dependencies]
python = "^3.11"
pydantic = "<2.10"
loguru = "^0.7.2"

# Core optional dependencies
langchain = { version = "^0.3.3", optional = true }
langchain-community = { version = "^0.3.7", optional = true }

# Provider optional dependencies
openai = { version = "^1.52.0", optional = true }
langchain-openai = { version = "^0.2.3", optional = true }
anthropic = { version = "^0.39.0", optional = true }
langchain-anthropic = { version = "^0.2.3", optional = true }
ollama = { version = "^0.4.0", optional = true }
langchain-ollama = { version = "^0.2.0", optional = true }
langchain-google-vertexai = { version = "^2.0.5", optional = true }
langchain-google-genai = { version = "^2.0.1", optional = true }
google-cloud-speech = { version = "^2.28.1", optional = true }
google-cloud-texttospeech = { version = "^2.21.1", optional = true }
langchain-groq = { version = "^0.2.1", optional = true }
groq = { version = "^0.12.0", optional = true }
litellm = { version = "^1.50.1", optional = true }
elevenlabs = { version = "^1.13.0", optional = true }

[tool.poetry.extras]
# Core functionality
langchain = ["langchain", "langchain-community"]

# Providers
openai = ["openai", "langchain-openai", "langchain", "langchain-community"]
anthropic = ["anthropic", "langchain-anthropic", "langchain", "langchain-community"]
ollama = ["ollama", "langchain-ollama", "langchain", "langchain-community"]
google = [
    "langchain-google-vertexai",
    "langchain-google-genai",
    "google-cloud-speech",
    "google-cloud-texttospeech",
    "langchain",
    "langchain-community"
]
groq = ["langchain-groq", "groq", "langchain", "langchain-community"]
litellm = ["litellm", "langchain", "langchain-community"]
elevenlabs = ["elevenlabs"]

# All providers
all = [
    "langchain",
    "langchain-community",
    "openai",
    "langchain-openai",
    "anthropic",
    "langchain-anthropic",
    "ollama",
    "langchain-ollama",
    "langchain-google-vertexai",
    "langchain-google-genai",
    "google-cloud-speech",
    "google-cloud-texttospeech",
    "langchain-groq",
    "groq",
    "litellm",
    "elevenlabs"
]

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.29.5"
ruff = "^0.5.5"
mypy = "^1.11.1"
types-requests = "^2.32.0.20241016"
ipywidgets = "^8.1.5"
pytest = "^8.3.3"
pytest-mock = "^3.12.0"
pytest-asyncio = "^0.23.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.isort]
profile = "black"
line_length = 88

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = ["E501"]
