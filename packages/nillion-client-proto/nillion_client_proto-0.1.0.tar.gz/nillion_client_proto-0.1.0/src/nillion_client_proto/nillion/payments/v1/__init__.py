# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: nillion/payments/v1/service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class PaymentsStub(betterproto.ServiceStub):
    async def price_quote(
        self,
        quote_price_quote_request: "quote.PriceQuoteRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "quote.SignedQuote":
        return await self._unary_unary(
            "/nillion.payments.v1.Payments/PriceQuote",
            quote_price_quote_request,
            quote.SignedQuote,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def payment_receipt(
        self,
        receipt_payment_receipt_request: "receipt.PaymentReceiptRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "receipt.SignedReceipt":
        return await self._unary_unary(
            "/nillion.payments.v1.Payments/PaymentReceipt",
            receipt_payment_receipt_request,
            receipt.SignedReceipt,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from . import (
    quote,
    receipt,
)


class PaymentsBase(ServiceBase):

    async def price_quote(
        self, quote_price_quote_request: "quote.PriceQuoteRequest"
    ) -> "quote.SignedQuote":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def payment_receipt(
        self, receipt_payment_receipt_request: "receipt.PaymentReceiptRequest"
    ) -> "receipt.SignedReceipt":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_price_quote(
        self,
        stream: "grpclib.server.Stream[quote.PriceQuoteRequest, quote.SignedQuote]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.price_quote(request)
        await stream.send_message(response)

    async def __rpc_payment_receipt(
        self,
        stream: "grpclib.server.Stream[receipt.PaymentReceiptRequest, receipt.SignedReceipt]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.payment_receipt(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/nillion.payments.v1.Payments/PriceQuote": grpclib.const.Handler(
                self.__rpc_price_quote,
                grpclib.const.Cardinality.UNARY_UNARY,
                quote.PriceQuoteRequest,
                quote.SignedQuote,
            ),
            "/nillion.payments.v1.Payments/PaymentReceipt": grpclib.const.Handler(
                self.__rpc_payment_receipt,
                grpclib.const.Cardinality.UNARY_UNARY,
                receipt.PaymentReceiptRequest,
                receipt.SignedReceipt,
            ),
        }
