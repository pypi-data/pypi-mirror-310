from typing import List, Optional

from ome_types._autogenerated.ome_2016_06.annotation_ref import AnnotationRef
from ome_types._mixins._base_type import OMEType
from xsdata_pydantic_basemodel.pydantic_compat import Field

__NAMESPACE__ = "http://www.openmicroscopy.org/Schemas/OME/2016-06"


class Experimenter(OMEType):
    """This element describes a person who performed an imaging experiment.

    This person may also be a user of the OME system, in which case the
    UserName element contains their login name. Experimenters may belong
    to one or more groups which are specified using one or more
    ExperimenterGroupRef elements.

    Attributes
    ----------
    annotation_refs : list[AnnotationRef]
        (The Experimenter AnnotationRefs).
    id : str
        (The Experimenter ID).
    first_name : None | str
        First name, sometime called christian name or given name or forename.
        [plain text string]
    middle_name : None | str
        Any other names. [plain text string]
    last_name : None | str
        A person's last name sometimes called surname or family name. [plain text
        string]
    email : None | str
        A person's email address. [valid email address as string]
    institution : None | str
        A person's Institution The organizing structure that people belong to other
        than groups.  A university, or company, etc. We do not specify a department
        element, and do not mean for Institution to be used in this way. We simply
        wish to say XXX at YYY.  Where YYY has a better chance of being tied to a
        geographically fixed location and of being more recognizable than a group
        of experimenters. [plain text string]
    user_name : None | str
        This is the username of the experimenter (in a 'unix' or 'database' sense).
        [plain text string]
    """

    class Meta:
        namespace = "http://www.openmicroscopy.org/Schemas/OME/2016-06"

    annotation_refs: List[AnnotationRef] = Field(
        default_factory=list,
        metadata={
            "name": "AnnotationRef",
            "type": "Element",
        },
    )
    id: str = Field(
        default="__auto_sequence__",
        metadata={
            "name": "ID",
            "type": "Attribute",
            "required": True,
            "pattern": r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:Experimenter:\S+)|(Experimenter:\S+)",
        },
        regex="(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:Experimenter:\\S+)|(Experimenter:\\S+)",
    )
    first_name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "FirstName",
            "type": "Attribute",
        },
    )
    middle_name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "MiddleName",
            "type": "Attribute",
        },
    )
    last_name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "LastName",
            "type": "Attribute",
        },
    )
    email: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Email",
            "type": "Attribute",
        },
    )
    institution: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Institution",
            "type": "Attribute",
        },
    )
    user_name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "UserName",
            "type": "Attribute",
        },
    )
