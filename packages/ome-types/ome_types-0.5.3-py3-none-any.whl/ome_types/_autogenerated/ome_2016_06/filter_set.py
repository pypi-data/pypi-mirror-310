from typing import List, Optional

from ome_types._autogenerated.ome_2016_06.dichroic_ref import DichroicRef
from ome_types._autogenerated.ome_2016_06.filter_ref import FilterRef
from ome_types._autogenerated.ome_2016_06.manufacturer_spec import (
    ManufacturerSpec,
)
from xsdata_pydantic_basemodel.pydantic_compat import Field

__NAMESPACE__ = "http://www.openmicroscopy.org/Schemas/OME/2016-06"


class FilterSet(ManufacturerSpec):
    """
    Filter set manufacturer specification.

    Attributes
    ----------
    excitation_filters : list[FilterRef]
        The Filters placed in the Excitation light path.
    dichroic_ref : None | DichroicRef
        (The FilterSet DichroicRef).
    emission_filters : list[FilterRef]
        The Filters placed in the Emission light path.
    id : str
        (The FilterSet ID).
    """

    class Meta:
        namespace = "http://www.openmicroscopy.org/Schemas/OME/2016-06"

    excitation_filters: List[FilterRef] = Field(
        default_factory=list,
        metadata={
            "name": "ExcitationFilterRef",
            "type": "Element",
        },
    )
    dichroic_ref: Optional[DichroicRef] = Field(
        default=None,
        metadata={
            "name": "DichroicRef",
            "type": "Element",
        },
    )
    emission_filters: List[FilterRef] = Field(
        default_factory=list,
        metadata={
            "name": "EmissionFilterRef",
            "type": "Element",
        },
    )
    id: str = Field(
        default="__auto_sequence__",
        metadata={
            "name": "ID",
            "type": "Attribute",
            "required": True,
            "pattern": r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:FilterSet:\S+)|(FilterSet:\S+)",
        },
        regex="(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:FilterSet:\\S+)|(FilterSet:\\S+)",
    )
