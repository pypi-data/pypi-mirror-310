from datetime import datetime
from typing import List, Optional

from ome_types._autogenerated.ome_2016_06.annotation_ref import AnnotationRef
from ome_types._autogenerated.ome_2016_06.well_sample_ref import WellSampleRef
from ome_types._mixins._base_type import OMEType
from xsdata_pydantic_basemodel.pydantic_compat import Field

__NAMESPACE__ = "http://www.openmicroscopy.org/Schemas/OME/2016-06"


class PlateAcquisition(OMEType):
    """PlateAcquisition is used to describe a single acquisition run for a plate.

    This object is used to record the set of images acquired in a single
    acquisition run. The Images for this run are linked to
    PlateAcquisition through WellSample.

    Attributes
    ----------
    description : None | str
        A description for the PlateAcquisition.
    well_sample_refs : list[WellSampleRef]
        (The PlateAcquisition WellSampleRefs).
    annotation_refs : list[AnnotationRef]
        (The PlateAcquisition AnnotationRefs).
    id : str
        (The PlateAcquisition ID).
    name : None | str
        (The PlateAcquisition Name).
    end_time : None | datetime
        Time when the last image of this acquisition was collected
    start_time : None | datetime
        Time when the first image of this acquisition was collected
    maximum_field_count : None | int
        The maximum number of fields (well samples) in any well in this
        PlateAcquisition. This is only used to speed up user interaction by
        stopping the reading of every well sample.
    """

    class Meta:
        namespace = "http://www.openmicroscopy.org/Schemas/OME/2016-06"

    description: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "white_space": "preserve",
        },
    )
    well_sample_refs: List[WellSampleRef] = Field(
        default_factory=list,
        metadata={
            "name": "WellSampleRef",
            "type": "Element",
        },
    )
    annotation_refs: List[AnnotationRef] = Field(
        default_factory=list,
        metadata={
            "name": "AnnotationRef",
            "type": "Element",
        },
    )
    id: str = Field(
        default="__auto_sequence__",
        metadata={
            "name": "ID",
            "type": "Attribute",
            "required": True,
            "pattern": r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:PlateAcquisition:\S+)|(PlateAcquisition:\S+)",
        },
        regex="(urn:lsid:([\\w\\-\\.]+\\.[\\w\\-\\.]+)+:PlateAcquisition:\\S+)|(PlateAcquisition:\\S+)",
    )
    name: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Attribute",
        },
    )
    end_time: Optional[datetime] = Field(
        default=None,
        metadata={
            "name": "EndTime",
            "type": "Attribute",
        },
    )
    start_time: Optional[datetime] = Field(
        default=None,
        metadata={
            "name": "StartTime",
            "type": "Attribute",
        },
    )
    maximum_field_count: Optional[int] = Field(
        default=None,
        metadata={
            "name": "MaximumFieldCount",
            "type": "Attribute",
            "min_inclusive": 1,
        },
        ge=1,
    )
