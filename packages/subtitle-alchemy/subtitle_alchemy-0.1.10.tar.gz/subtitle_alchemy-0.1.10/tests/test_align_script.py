"""Test script alignment module."""

import numpy as np
from subtitle_alchemy.align._index import get_aligned_ind_raw
from subtitle_alchemy.align._index import get_aligned_index
from subtitle_alchemy.align._index import get_mismatch_map
from subtitle_alchemy.align._index import locate_mismatch

S_PRD = """
伏泰一到英国就开始学习一门新的语言他恼火的发现瘟疫这个词在英语里只有一个音节而
疟疾却有两个音节真恨不得这种语言一半得瘟疫另一半得疟疾沃建宁但是没过多久他就能
轻速阿的阅读英语了不到一年他已经读完了当时英国的所有文学作品柏林布鲁克勋爵把他
介绍给英国文学界的名流他挨个儿和他们吃饭连行踪隐秘的前辈斯威夫特也不例外让他吃
惊的是柏林布鲁克普柏爱迪生和斯威夫特等人都可以随心所欲的写作这是一个有主见的民
族他们重塑了自己的宗教绞死了国王又从国外请来一个他们建立了一个比欧洲任何统治者
都强有力的议会这里没有巴士底狱也没有王公贵族可以用以随意抓人的逮捕证争执都乾陵
这里的宗教多达三十种却没有一个教室
"""

S_LAB = """
伏尔泰一到英国就开始学习一门新的语言他恼火地发现瘟疫这个词在英语里只有一个音节
而疟疾却有两个音节真恨不得这种语言一半得瘟疫另一半得疟疾但是没过多久他就能轻松
地阅读英语了不到一年他已经读完了当时英国的所有文学作品博林布鲁克勋爵把他介绍给
英国文学界的名流他挨个儿和他们吃饭连行踪隐秘的前辈斯威夫特也不例外让他吃惊的是
博林布鲁克蒲柏爱迪生和斯威夫特等人都可以随心所欲的写作这是一个有主见的民族他们
重塑了自己的宗教绞死了国王又从国外请来一个他们建立了一个比欧洲任何统治者都强有
力的议会这里没有巴士底狱也没有王公贵族可以用以随意抓人的逮捕证这里的宗教多达三
十种却没有一个教士
"""

AR_LAB = np.array(list(S_LAB.replace("\n", "")), dtype="U")
AR_PRD = np.array(list(S_PRD.replace("\n", "")), dtype="U")
IDX_ALIGNED_RAW = np.array(
    [
        0,
        -1,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        -1,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        -1,
        -1,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        -1,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        -1,
        160,
        161,
        162,
        163,
        -1,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        235,
        236,
        237,
        238,
        239,
        240,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250,
        251,
        252,
        253,
        254,
        255,
        256,
        257,
        258,
        259,
        260,
        261,
        262,
        263,
        264,
        265,
        266,
        267,
        273,
        274,
        275,
        276,
        277,
        278,
        279,
        280,
        281,
        282,
        283,
        284,
        285,
        286,
        287,
        288,
        -1,
    ],
    dtype=np.int32,
)
IDX_ALIGNED = np.array(
    [
        0,
        -1,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        235,
        236,
        237,
        238,
        239,
        240,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250,
        251,
        252,
        253,
        254,
        255,
        256,
        257,
        258,
        259,
        260,
        261,
        262,
        263,
        264,
        265,
        266,
        267,
        273,
        274,
        275,
        276,
        277,
        278,
        279,
        280,
        281,
        282,
        283,
        284,
        285,
        286,
        287,
        288,
        289,
    ],
    dtype=np.int32,
)


def test_get_aligned_ind_raw() -> None:
    """Test `get_aligned_ind_raw` function."""
    idx_aligned_raw = get_aligned_ind_raw(AR_LAB, AR_PRD)
    assert np.array_equal(idx_aligned_raw, IDX_ALIGNED_RAW)


def test_locate_mismatch() -> None:
    """Test `locate_mismatch` function."""
    sseq_lab, sseq_prd = locate_mismatch(IDX_ALIGNED_RAW, len(AR_PRD))
    sseq_lab_exp = [[1], [21], [77, 78], [105], [156], [161], [281]]
    sseq_prd_exp = [[], [20], [79, 80, 81], [108], [159], [164], [289]]
    assert sseq_lab == sseq_lab_exp
    assert sseq_prd == sseq_prd_exp


def test_get_mismatch_map() -> None:
    """Test `get_mismatch_map` function."""
    sseq_lab, sseq_prd = locate_mismatch(IDX_ALIGNED_RAW, len(AR_PRD))
    dict_wrong = get_mismatch_map(AR_LAB, AR_PRD, sseq_lab, sseq_prd)
    dict_wrong_exp = {
        1: -1,
        21: 20,
        77: 79,
        78: 81,
        105: 108,
        156: 159,
        161: 164,
        281: 289,
    }
    assert dict_wrong == dict_wrong_exp


def test_get_aligned_ind() -> None:
    """Test `get_aligned_ind` function."""
    idx_aligned = get_aligned_index(AR_LAB, AR_PRD)
    assert np.array_equal(idx_aligned, IDX_ALIGNED)
