# Copyright (c) 2020 Adam Souzis
# SPDX-License-Identifier: MIT
tosca_definitions_version: tosca_simple_unfurl_1_0_0 # unfurl/v1alpha1.ServiceTemplate
metadata:
  template_name: Unfurl types
  template_author: onecommons.org
  template_version: 1.0.0

artifact_types:
  unfurl.artifacts.HasConfigurator:
    derived_from: tosca.artifacts.Implementation
    properties:
      className:
        type: string
        description: Name of the python class that implements the configurator interface

  unfurl.artifacts.TemplateOperation:
    derived_from: unfurl.artifacts.HasConfigurator
    properties:
      className:
        type: string
        default: unfurl.configurators.TemplateConfigurator

  unfurl.artifacts.ShellExecutable:
    derived_from: unfurl.artifacts.HasConfigurator
    properties:
      className:
        type: string
        default: unfurl.configurators.shell.ShellConfigurator

  unfurl.artifacts.AnsiblePlaybook:
    derived_from: unfurl.artifacts.HasConfigurator
    properties:
      className:
        type: string
        default: unfurl.configurators.ansible.AnsibleConfigurator

node_types:
  tosca.nodes.Root:
    interfaces:
      Install: # all nodes can implement this interface
        type: unfurl.interfaces.Install
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard

  unfurl.nodes.Repository:
    derived_from: tosca.nodes.Root
    description: >
      Reification of a TOSCA repository. Artifacts listed in the "artifacts" section
      of this node template will able available in the repository.
    properties:
      repository:
        description: The name of the repository this node instance represent.
        type: string
        required: false
      url:
        description: The url of this repository
        type: string
        required: false
      credential:
        description: >
          The credential, if present, of the repository this node instance represents.
        type: tosca.datatypes.Credential
        required: false
        metadata:
          sensitive: true

  unfurl.nodes.LocalRepository:
    derived_from: unfurl.nodes.Repository
    description: >
      Represents the collection of artifacts available to the local operation host.

  unfurl.nodes.ArtifactBuilder:
    derived_from: tosca.nodes.Root
    description: >
      Creates or builds the given artifact and "uploads" it to the artifact's repository.

  unfurl.nodes.ArtifactInstaller:
    derived_from: tosca.nodes.Root
    description: >
      Reification of an artifact that needs to be installed.
      Node templates of this type are "discovered" when artifacts need to be installed on an operation_host.
    artifacts:
      install:
        type: tosca.artifacts.Root
    interfaces:
      defaults:
        # delegate operations to the associated artifact
        implementation:
          className: unfurl.configurators.DelegateConfigurator
        inputs:
          target:
            eval: .artifacts::install
          inputs: {}
      Standard:
        operations:
          delete:
          create:
          configure:
          start:
          stop:
      Install:
        operations:
          check:
      Mock:
        operations:
          delete:
          create:
          configure:
          start:
          stop:
          check:

  unfurl.nodes.Installer:
    derived_from: tosca.nodes.Root
    capabilities:
      installer:
        type: unfurl.capabilities.Installer

  unfurl.nodes.Installation:
    derived_from: tosca.nodes.Root
    requirements:
      - installer:
          capability: unfurl.capabilities.Installer
          node: unfurl.nodes.Installer
          relationship: unfurl.relationships.InstalledBy
          occurrences: [0, 1] # it isn't necessarily required

  unfurl.nodes.Default:
    derived_from: unfurl.nodes.Installation
    description: "Used if pre-existing instances are declared with no TOSCA template"
    metadata:
      additionalProperties: true

  unfurl.nodes.Generic:
    derived_from: tosca.nodes.Root
    description: An open, generic type that allows your template to declare arbitrary properties.
    metadata:
      additionalProperties: true

  unfurl.nodes.CloudAccount:
    derived_from: tosca.nodes.Root
    attributes:
      account_id:
        description: "Cloud provider specific account identifier"
        type: string

  unfurl.nodes.CloudObject:
    derived_from: tosca.nodes.Root
    attributes:
      uri:
        description: "Unique identifier"
        type: string
      name:
        description: "Human-friendly name of the resource"
        type: string
      console_url:
        description: "URL for viewing this resource in its cloud provider's console"
        type: string
        required: False
    # XXX re-enable this when we handle subtypes of requirements properly
    # requirements:
    #   - cloud:
    #       node: unfurl.nodes.CloudAccount
    #       relationship: unfurl.relationships.ConnectsTo.CloudAccount
    #       occurrences: [0, 1] # make optional so we aren't forced to always explicitly declare this

  unfurl.nodes.AWSAccount:
    derived_from: unfurl.nodes.CloudAccount

  unfurl.nodes.AWSResource:
    derived_from: unfurl.nodes.CloudObject
    requirements:
      - cloud:
          node: unfurl.nodes.AWSAccount
          relationship: unfurl.relationships.ConnectsTo.AWSAccount
          occurrences: [0, 1] # make optional so we aren't forced to always explicitly declare this
          metadata:
            visibility: hidden

  unfurl.nodes.AzureAccount:
    derived_from: unfurl.nodes.CloudAccount

  unfurl.nodes.AzureResource:
    derived_from: unfurl.nodes.CloudObject
    requirements:
      - cloud:
          node: unfurl.nodes.AzureAccount
          relationship: unfurl.relationships.ConnectsTo.Azure
          occurrences: [0, 1] # make optional so we aren't forced to always explicitly declare this
          metadata:
            visibility: hidden

data_types:
  unfurl.datatypes.EnvVar:
    derived_from: tosca.datatypes.Root
    type: string
    description: The value of an environment variable whose name matches the property's name

  unfurl.datatypes.EnvironmentVariables:
    derived_from: tosca.datatypes.Root
    description: An open type (properties don't need to be declared) that serializes as a map of environment variables.
    metadata:
      additionalProperties: true
      transform:
        eval:
          to_env:
            eval: $value

capability_types:
  unfurl.capabilities.Installer:
    derived_from: tosca.capabilities.Root

  unfurl.capabilities.Endpoint.Ansible:
    derived_from: tosca.capabilities.Endpoint.Admin
    description: Capability to connect to Ansible
    properties:
      connection:
        description: The connection type (sets "ansible_connection")
        type: string
        default: local
      port:
        type: tosca.datatypes.network.PortDef
        description: sets "ansible_port"
        required: false
      host:
        type: string
        description: Sets "ansible_host"
        required: false
      user:
        description: Sets "ansible_user" if not set in credentials
        type: string
        required: false
      authentication_type:
        description: "Type of authentication required, should match the credential's token_type"
        type: string
        required: false
      hostvars:
        type: map
        required: false
        description: >
          Passed to ansible as host vars
          See https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#connecting-to-hosts-behavioral-inventory-parameters

  unfurl.capabilities.Endpoint.SSH:
    derived_from: unfurl.capabilities.Endpoint.Ansible
    description: Capability to connect to the host via SSH
    properties:
      protocol:
        type: string
        value: ssh
        default: ssh
      connection:
        type: string
        default: ssh
      port:
        type: tosca.datatypes.network.PortDef
        default: 22

relationship_types:
  unfurl.relationships.InstalledBy:
    derived_from: tosca.relationships.Root
    valid_target_types: [unfurl.capabilities.Installer]

  unfurl.relationships.Configures:
    derived_from: tosca.relationships.Root

  unfurl.relationships.ConfiguringHostedOn:
    derived_from:
      [unfurl.relationships.Configures, tosca.relationships.HostedOn]

  unfurl.relationships.ConnectsTo.Ansible:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [unfurl.capabilities.Endpoint.Ansible]
    properties:
      credential:
        description: Its "user" property sets "ansible_user", add properties like "ssh_private_key_file" to "keys"
        type: tosca.datatypes.Credential
        required: false
        metadata:
          sensitive: true
      hostvars:
        type: map
        required: false
        description: >
          Passed to ansible as host vars
          See https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#connecting-to-hosts-behavioral-inventory-parameters

  unfurl.relationships.ConnectsTo.ComputeMachines:
    derived_from: tosca.relationships.ConnectsTo

  unfurl.relationships.ConnectsTo.CloudAccount:
    derived_from: unfurl.relationships.ConnectsTo.ComputeMachines
    # valid_target_types: [unfurl.capabilities.Endpoint.CloudAccount]

  unfurl.relationships.ConnectsTo.GoogleCloudProject:
    derived_from: unfurl.relationships.ConnectsTo.CloudAccount
    properties:
      CLOUDSDK_CORE_PROJECT:
        description: id of the project
        type: unfurl.datatypes.EnvVar
        default: { get_env: CLOUDSDK_CORE_PROJECT }
        required: false
      CLOUDSDK_COMPUTE_REGION:
        description: default region to use
        type: unfurl.datatypes.EnvVar
        default: { get_env: CLOUDSDK_COMPUTE_REGION }
        required: false
      CLOUDSDK_COMPUTE_ZONE:
        description: default zone to use
        type: unfurl.datatypes.EnvVar
        default: { get_env: CLOUDSDK_COMPUTE_ZONE }
        required: false
      GOOGLE_APPLICATION_CREDENTIALS:
        description: "Path to file containing service account private keys in JSON format"
        type: unfurl.datatypes.EnvVar
        default: { get_env: GOOGLE_APPLICATION_CREDENTIALS }
        required: false

      # other authentication options:
      GOOGLE_OAUTH_ACCESS_TOKEN:
        description: A temporary OAuth 2.0 access token obtained from the Google Authorization server
        type: unfurl.datatypes.EnvVar
        default: { get_env: GOOGLE_OAUTH_ACCESS_TOKEN }
        required: false

      GCP_SERVICE_ACCOUNT_CONTENTS:
        description: "Content of file containing service account private keys"
        type: tosca.datatypes.json
        default: { get_env: GCP_SERVICE_ACCOUNT_CONTENTS }
        required: false
        metadata:
          sensitive: true
        # some of the keys in the credential json:
        #   project_id
        #   type: auth_kind: type of authentication being used (choices: machineaccount, serviceaccount, application)
        #   client_email: email associated with the project
        #   scopes: The specific scopes that you want the actions to use.
      GCP_AUTH_KIND:
        type: unfurl.datatypes.EnvVar
        constraints:
          - valid_values: [application, machineaccount, serviceaccount]
        default: { get_env: [GCP_AUTH_KIND, "serviceaccount"] }
        required: false
      scopes:
        type: list
        entry_schema:
          type: string
        required: false
    interfaces:
      Install:
        check:
          implementation:
            className: unfurl.configurators.gcp.CheckGoogleCloudConnectionConfigurator
            # XXX defined in artifacts.yaml
            # dependencies:
            #   - google-auth

  unfurl.relationships.ConnectsTo.AWSAccount:
    derived_from: unfurl.relationships.ConnectsTo.CloudAccount
    properties:
      endpoints:
        description: custom service endpoints
        type: map
        required: false
      AWS_DEFAULT_REGION:
        description: "The default region to use, e.g. us-west-1, us-west-2, etc."
        type: unfurl.datatypes.EnvVar
        default: { get_env: AWS_DEFAULT_REGION }
        required: false
      AWS_ACCESS_KEY_ID:
        description: "The access key for your AWS account"
        type: unfurl.datatypes.EnvVar
        default: { get_env: AWS_ACCESS_KEY_ID }
        required: false
      AWS_SECRET_ACCESS_KEY:
        description: "The secret key for your AWS account."
        type: unfurl.datatypes.EnvVar
        default: { get_env: AWS_SECRET_ACCESS_KEY }
        required: false
        metadata:
          sensitive: true
      # other authentication options:
      AWS_SESSION_TOKEN:
        description: "The session key for your AWS account."
        type: unfurl.datatypes.EnvVar
        default: { get_env: AWS_SESSION_TOKEN }
        required: false
        metadata:
          sensitive: true
      AWS_PROFILE:
        type: unfurl.datatypes.EnvVar
        default: { get_env: AWS_PROFILE }
        required: false
      AWS_SHARED_CREDENTIALS_FILE:
        type: unfurl.datatypes.EnvVar
        default: { get_env: AWS_SHARED_CREDENTIALS_FILE }
        required: false
      AWS_CONFIG_FILE:
        type: unfurl.datatypes.EnvVar
        default: { get_env: AWS_CONFIG_FILE }
        required: false
    # see https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html#using-environment-variables
    # for more environment variables

  unfurl.relationships.ConnectsTo.DigitalOcean:
    derived_from: unfurl.relationships.ConnectsTo.CloudAccount
    properties:
      credential:
        metadata:
          user_settable: false
          sensitive: true
      DIGITALOCEAN_TOKEN:
        type: unfurl.datatypes.EnvVar
        default: { get_env: DIGITALOCEAN_TOKEN }
        metadata:
          user_settable: true
          sensitive: true
      SPACES_ACCESS_KEY_ID:
        description: "The access key for Spaces object storage."
        type: unfurl.datatypes.EnvVar
        default: { get_env: SPACES_ACCESS_KEY_ID }
        required: false
        metadata:
          user_settable: true
      SPACES_SECRET_ACCESS_KEY:
        description: "The secret key for Spaces object storage."
        type: unfurl.datatypes.EnvVar
        default: { get_env: SPACES_SECRET_ACCESS_KEY }
        required: false
        metadata:
          user_settable: true
          sensitive: true
      default_region:
        type: string
        title: Default Region
        default: nyc1
        description: "The default region to use, e.g. fra1, nyc2, etc."
        metadata:
          user_settable: true

  unfurl.relationships.ConnectsTo.Azure:
    derived_from: unfurl.relationships.ConnectsTo.CloudAccount
    properties:
      AZURE_CLIENT_ID:
        description: >
          Also known as an Application ID or `appId`.
          Can be created via [CLI](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_certificate)
          or through the [Azure portal](https://learn.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal).
        type: string
        metadata:
          env_vars: [ARM_CLIENT_ID, AZURE_CLIENT_ID]
          title: Client ID
          user_settable: true
        default: { get_env: [ARM_CLIENT_ID, {get_env: AZURE_CLIENT_ID}] }
        required: false
      AZURE_TENANT:
        description: >
          [Find your Azure active directory tenant](https://learn.microsoft.com/en-us/azure/azure-portal/get-subscription-tenant-id#find-your-azure-ad-tenant)
        type: string
        metadata:
          env_vars: [ARM_TENANT_ID, AZURE_TENANT]
          title: Tenant
          user_settable: true
        default: { get_env: [ARM_TENANT_ID, {get_env: AZURE_TENANT}] }
        required: false
      AZURE_SUBSCRIPTION_ID:
        description: >
          [Find your Azure subscription](https://learn.microsoft.com/en-us/azure/azure-portal/get-subscription-tenant-id#find-your-azure-subscription)
        type: string
        required: false
        metadata:
          env_vars: [ARM_SUBSCRIPTION_ID, AZURE_SUBSCRIPTION_ID]
          title: Azure Subscription
          user_settable: true
        default: { get_env: [ARM_SUBSCRIPTION_ID, {get_env: AZURE_SUBSCRIPTION_ID}] }
      AZURE_SECRET:
        description: >
          For authentication with service principal. [(Portal link)](https://learn.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal#option-2-create-a-new-application-secret)
        type: string
        required: false
        default: { get_env: [ARM_CLIENT_SECRET, {get_env: AZURE_SECRET}] }
        metadata:
          env_vars: [ARM_CLIENT_SECRET, AZURE_SECRET]
          sensitive: true
          title: Client Secret
          user_settable: true
      AZURE_AD_USER:
        description: for authentication with Active Directory
        type: unfurl.datatypes.EnvVar
        default: { get_env: AZURE_AD_USER }
        required: false
      AZURE_PASSWORD:
        description: for authentication with Active Directory
        type: unfurl.datatypes.EnvVar
        default: { get_env: AZURE_PASSWORD }
        required: false
        metadata:
          sensitive: true
      AZURE_ADFS_AUTHORITY_URL:
        description: set if you have your own ADFS authority
        type: unfurl.datatypes.EnvVar
        default: { get_env: AZURE_ADFS_AUTHORITY_URL }
        required: false

  unfurl.relationships.ConnectsTo.Packet:
    derived_from: unfurl.relationships.ConnectsTo.CloudAccount
    properties:
      project:
        description: UUID to packet project
        type: string
      PACKET_API_TOKEN:
        type: unfurl.datatypes.EnvVar
        default: { get_env: PACKET_API_TOKEN }
        metadata:
          sensitive: true

  unfurl.relationships.ConnectsTo.OpenStack:
    derived_from: unfurl.relationships.ConnectsTo.CloudAccount
    # from pyrax (rackspace, openstack)
    # RAX_CREDS_FILE
    # CLOUD_ID_TYPE "rackspace" or "keystone"
    # CLOUD_REGION default: "DFW"
    # also CLOUD_* in https://github.com/pycontribs/pyrax/blob/master/docs/getting_started.md#available-configuration-settings

  unfurl.relationships.ConnectsTo.Rackspace:
    derived_from: unfurl.relationships.ConnectsTo.OpenStack

interface_types:
  Mock:
    derived_from: tosca.interfaces.Root

  unfurl.interfaces.Install:
    derived_from: tosca.interfaces.Root
    operations:
      check:
        description: Checks and sets the status and attributes of the instance
      discover:
        description: Discovers current state of the current instance and (possibly) related instances, updates the spec as needed.
      revert:
        description: Restore the instance to the state it was original found in.
      connect:
        description: Connect to a pre-existing resource.
      restart:
        description: Restart the resource.

group_types:
  unfurl.groups.AnsibleInventoryGroup:
    derived_from: tosca.groups.Root
    description: Use this to place hosts in Ansible inventory groups
    properties:
      hostvars:
        description: Ansible hostvars for members of this group
        type: map
        default: {}
    members: [tosca.nodes.Compute, unfurl.groups.ansibleInventoryGroup]
