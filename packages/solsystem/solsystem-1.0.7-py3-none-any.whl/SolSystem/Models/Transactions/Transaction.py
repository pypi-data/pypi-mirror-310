from typing import Literal, Any
from pydantic import (
    BaseModel,
    Field,
    ConfigDict,
    AliasPath,
    field_validator,
    model_validator,
)
from enum import StrEnum, auto
from pydantic.alias_generators import to_camel
from SolSystem.Models.Common import (
    UInt64,
    Int64,
    UInt8,
    Encoding,
    Lamports,
    Base64Str,
    PublicKey,
    Base58Str,
    Commitment,
)
from SolSystem.Models.Accounts import Account
from SolSystem.Models.TokenAccount import TokenBalance
from SolSystem.Models.Transactions.InnerInstruction import (
    InnerInstruction,
    Instruction,
    ParsedInstruction,
    KnownParsedInstruction,
)



class TransactionDetail(StrEnum):
    """### Summary
    Level of transaction detail to return when querying block information."""
    FULL       = auto()
    ACCOUNTS   = auto()
    SIGNATURES = auto()
    NONE       = auto()



class RewardType(StrEnum):
    FEE = auto()
    RENT = auto()
    VOTING = auto()
    STAKING = auto()



class TransactionEncoding(StrEnum):
    JSON        = "json"
    JSON_PARSED = "jsonParsed"
    BASE64      = "base64"
    BASE58      = "base58"



class AccountSource(StrEnum):
    LOOKUP_TABLE = "lookupTable"
    TRANSACTION = "transaction"



class Reward(BaseModel):
    """### Summary
    Block-level rewards, present if rewards are requested
    
    ### Parameters
    `pubkey:` The Publickey of the account that received the reward

    `lamports:` Number of reward lamports credited or debited by the account

    `post_balance:` account balance in lamports after the reward was applied

    `rewardType:` type of reward

    `commission:` vote account commission when the reward was credited, only
    present for voting and staking rewards"""
    model_config = ConfigDict(
        alias_generator = to_camel,
        populate_by_name = True,
    )

    pubkey: PublicKey
    lamports: Int64
    post_balance: Lamports
    reward_type: RewardType
    commission: UInt8 | None


    @field_validator("reward_type", mode = "before")
    def fix_reward_type(cls, value: Any) -> str:
        """### Summary
        The input value for reward type does not match the documentation case
        so we force it lower."""
        if not isinstance(value, str):
            raise ValueError(F"Unrecognized value {value} for reward_type")
        return value.lower()



class LoadedAddresses(BaseModel):
    """### Summary
    Transaction addresses loaded from address lookup tables.
    
    ### Parameters:
    `writable:` Ordered list of encoded addresses for writable loaded accounts

    `readonly:` Ordered list of encoded addresses for readonly loaded accounts"""
    writable: list[PublicKey]
    readonly: list[PublicKey]



class ReturnData(BaseModel):
    """### Summary
    The most-recent return data generated by an instruction in the transaction,
    with the following fields
    
    ### Parameters
    `program_id:` The Publickey of the program that generated the return data

    `data:` The return data specifically encoded as base64.

    `encoding:` The type of encoding on the data."""
    model_config = ConfigDict(
        alias_generator = to_camel,
        populate_by_name = True,
    )

    program_id: PublicKey
    data: Base64Str = Field(validation_alias = AliasPath("data",0))
    encoding: Encoding = Field(validation_alias = AliasPath("data",1))



class TransactionMeta(BaseModel):
    """### Summary
    A transaction metadata object containing various information pretaining to
    one transaction.
    
    ### Parameters
    `err:` Error if transaction failed, null if transaction succeeded.
    [TransactionError definitions](https://github.com/solana-labs/solana/blob/c0c60386544ec9a9ec7119229f37386d9f070523/sdk/src/transaction/error.rs#L13)

    `fee:` fee this transaction was charged

    `pre_balances:` account balances from before the transaction was processed

    `post_balances:` account balances after the transaction was processed

    `pre_token_balances:` List of token balances from before the transaction
    was processed or omitted if token balance recording was not yet enabled
    during this transaction

    `post_token_balances:` List of token balances from after the transaction was
    processed or omitted if token balance recording was not yet enabled during
    this transaction

    `inner_instructions:` None if inner instruction recording was not enabled
    during this transaction

    `log_messages:` log messages for this transaction, None if not enabled.

    `rewards:` Transaction-level rewards, populated if rewards are requested.

    `loaded_addresses`: Transaction addresses loaded from address lookup tables.
    None if maxSupportedTransactionVersion is not set in request params,
    or if jsonParsed encoding is set in request params.

    `return_data`: The most-recent return data generated by an instruction in
    the transaction

    `compute_units_consumed`: number of compute units consumed by the transaction.
    More details in [documentation](https://solana.com/docs/core/fees#compute-budget)

    `version:` Transaction version. None if maxSupportedTransactionVersion is
    not set in request params.

    `status:` Transaction status DEPRECATED"""
    model_config = ConfigDict(
        alias_generator = to_camel,
        populate_by_name = True,
    )

    err: dict | None = None
    fee: Lamports
    pre_balances: list[Lamports]
    post_balances: list[Lamports]

    pre_token_balances: list[TokenBalance] | None = []
    post_token_balances: list[TokenBalance] | None = []

    inner_instructions: list[InnerInstruction] | None = []
    log_messages: list[str] | None = None
    rewards: list[Reward] | None = None

    loaded_addresses: LoadedAddresses | None = None
    return_data: ReturnData | None = None
    compute_units_consumed: UInt64 | None = None
    
    version: Literal["legacy"] | int | None = None
    status: dict | None = Field(deprecated = True)



class AddressTableLookup(BaseModel):
    """### Summary
    List of lookup indices for one transaction. For more information see 
    [solana documentation](https://solana.com/docs/rpc/json-structures#transactions)
    
    ### Parameters
    `account_key:` base-58 encoded public key for an address lookup table account.

    `writable_indexes:` List of indices used to load addresses of writable
    accounts from a lookup table.

    `readonly_indexes:` List of indices used to load addresses of readonly
    accounts from a lookup table."""
    model_config = ConfigDict(
        alias_generator = to_camel,
        populate_by_name = True,
    )

    account_key: PublicKey
    writable_indexes: list[int]
    readonly_indexes: list[int]



class TransactionMessageHeader(BaseModel):
    """### Summary
    Header for one transaction. For more information see 
    [solana documentation](https://solana.com/docs/rpc/json-structures#transactions)
    
    ### Parameters
    `num_required_signatures:` The total number of signatures required to make
    the transaction valid. The signatures must match the first numRequiredSignatures
    of message.accountKeys.
    
    `num_readonly_signed_accounts:` The last num_readonly_signed_accounts of the
    signed keys are read-only accounts. Programs may process multiple transactions
    that load read-only accounts within a single PoH entry, but are not
    permitted to credit or debit lamports or modify account data. Transactions
    targeting the same read-write account are evaluated sequentially.

    `num_readonly_unsigned_accounts:` The last num_readonly_unsigned_accounts of
    the unsigned keys are read-only accounts."""
    model_config = ConfigDict(
        alias_generator = to_camel,
        populate_by_name = True,
    )

    num_required_signatures: int
    num_readonly_signed_accounts: int
    num_readonly_unsigned_accounts: int



class ParsedAccountKey(BaseModel):
    """### Summary
    When returning jsonparsed data the account keys contain additional information
    represented here.

    ### Parameters:
    `pubkey:` The base58 public key of the account

    `signer:` Whether this key signed the transaction

    `source:` Source of this key

    `writable:` Whether this is a writable address."""
    pubkey: PublicKey
    signer: bool
    source: AccountSource
    writable: bool



class TransactionMessage(BaseModel):
    """### Summary
    Content of one transaction. For more information see 
    [solana documentation](https://solana.com/docs/rpc/json-structures#transactions)

    ### Parameters:
    `account_keys:` List of base-58 encoded public keys used by the transaction,
    including by the instructions and for signatures. The first 
    message.header.numRequiredSignatures public keys must sign the transaction.

    `header:` Details the account types and signatures required by the transaction.

    `recent_blockhash:` A base-58 encoded hash of a recent block in the ledger
    used to prevent transaction duplication and to give transactions lifetimes.

    `instructions:` List of program instructions that will be executed in 
    sequence and committed in one atomic transaction if all succeed.

    `address_table_lookups:` List of lookups used by a transaction to dynamically
    load addresses from on-chain address lookup tables. Undefined if
    maxSupportedTransactionVersion is not set."""
    model_config = ConfigDict(
        alias_generator = to_camel,
        populate_by_name = True,
    )

    account_keys: list[PublicKey] | list[ParsedAccountKey]
    header: TransactionMessageHeader | None = None
    recent_blockhash: Base58Str
    instructions: list[Instruction] | list[ParsedInstruction | KnownParsedInstruction]
    address_table_lookups: list[AddressTableLookup] | None = None



class JsonTransaction(BaseModel):
    """### Summary
    Definition of one transaction. For more information see 
    [solana documentation](https://solana.com/docs/rpc/json-structures#transactions)
    
    ### Parameters
    `signatures:` A list of base-58 encoded signatures applied to the transaction.
    The list is always of length message.header.numRequiredSignatures and not
    empty. The signature at index i corresponds to the public key at index
    i in message.accountKeys. The first one is used as the transaction id.

    `message:` Defines the content of the transaction"""
    model_config = ConfigDict(
        alias_generator = to_camel,
        populate_by_name = True,
    )

    signatures: list[Base58Str]
    message: TransactionMessage



class EncodedTransaction(BaseModel):
    """### Summary
    A transaction object can be a encoded string if the encoding parameter is
    appropriately set in the request object. In such a case the returned data
    is represented as an encoded string and the encoding returned."""
    data: str
    encoding: Encoding


    @model_validator( mode = "before")
    def decode_list(cls, value: Any) -> dict:
        """### Summary
        For parsing the speial case where the input is just a list rather than
        a dictionary."""
        if not isinstance(value, list):
            raise ValueError(F"Unrecognized value {value} for EncodedTransaction")
        if len(value) != 2:
            raise ValueError(F"Unexpected value length {value} for EncodedTransaction")
        
        return {"data": value[0], "encoding": value[1]}



class LegacyAccountKey(BaseModel):
    """### Summary
    A legacy construct storing the account keys associated with a legacy
    transaction. This will show up when the version of a transaction is `legacy`"""
    model_config = ConfigDict(
        alias_generator = to_camel,
        populate_by_name = True,
    )
    pubkey: Base58Str
    signer: bool
    source: str
    writable: bool



class LegacyTransaction(BaseModel):
    """### Summary
    This transaction model will show up if the version of a transaction is
    reported as `legacy`."""
    model_config = ConfigDict(
        alias_generator = to_camel,
        populate_by_name = True,
    )

    signatures: list[Base58Str]
    account_keys: list[LegacyAccountKey]



class Transaction(BaseModel):
    model_config = ConfigDict(
        alias_generator = to_camel,
        populate_by_name = True,
    )
    
    slot: UInt64
    block_time: Int64
    meta: TransactionMeta
    transaction: JsonTransaction | EncodedTransaction
    version: Literal["legacy"] | int | None = None



class TransactionSignature(BaseModel):
    """### Summary
    Will be Null if Unknown transaction.
    
    ### Parameters
    `signature:` transaction signature

    `slot:`  The slot that contains the block with the transaction

    `memo:` Memo associated with the transaction, null if no memo is present

    `block_time:` estimated production time, as Unix timestamp (seconds since
    the Unix epoch) of when transaction was processed. null if not available.

    `err:` Error if transaction failed, null if transaction succeeded.

    `confirmation_status:` The transaction's cluster confirmation status"""
    model_config = ConfigDict(alias_generator = to_camel, populate_by_name = True)

    signature: Base58Str
    slot: UInt64
    memo: str | None = None
    block_time: Int64 | None = None
    err: dict | None = None
    confirmation_status: Commitment | None = None



class SignatureStatus(BaseModel):
    """### Summary
    Will be Null if Unknown transaction.
    
    ### Parameters
    `slot:` The slot the transaction was processed

    `confirmations:` Number of blocks since signature confirmation, null if
    rooted, as well as finalized by a supermajority of the cluster

    `err:` Error if transaction failed, null if transaction succeeded.

    `confirmation_status:` The transaction's cluster confirmation status

    `status:` DEPRECATED transaction status"""
    model_config = ConfigDict(
        alias_generator = to_camel,
        populate_by_name = True,
    )

    slot: UInt64
    confirmations: UInt64 | None = None
    err: dict | None = None
    confirmation_status: Commitment | None = None
    status: dict | None = Field(default = None, deprecated = True)



class SimulatedTransaction(BaseModel):
    """### Parameters
    `err:` Error if transaction failed, null if transaction succeeded.

    `logs:` Array of log messages the transaction instructions output during
    execution, null if simulation failed before the transaction was able to
    execute (for example due to an invalid blockhash or signature verification
    failure)

    `accounts:` Accounts with the same length as the accounts.addresses array
    in the request.

    `units_consumed:` The number of compute budget units consumed during the
    processing of this transaction

    `return_data:` The most-recent return data generated by an instruction in
    the transaction, with the following fields.

    `inner_instructions:` Defined only if innerInstructions was set to true"""
    model_config = ConfigDict(
        alias_generator = to_camel,
        populate_by_name = True,
    )

    err: dict | str | None = None
    logs: str | None = None
    accounts: list[Account] | None = None
    units_consumed: UInt64 | None = None
    return_data: ReturnData | None = None
    inner_instructions: list[InnerInstruction] | None = None
