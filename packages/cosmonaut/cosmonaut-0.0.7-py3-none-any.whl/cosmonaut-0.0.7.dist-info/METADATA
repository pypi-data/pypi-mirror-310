Metadata-Version: 2.1
Name: cosmonaut
Version: 0.0.7
Summary: Helping you find structure in the cosmos of data.
Author-email: Amit Yadav <amit.yadav.iitr@gmail.com>
Maintainer-email: Amit Yadav <amit.yadav.iitr@gmail.com>
License: MIT License
        
        Copyright (c) 2024 Amit Yadav
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/am1tyadav/cosmonaut
Project-URL: Bug Tracker, https://github.com/am1tyadav/cosmonaut/issues
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: httpx
Requires-Dist: pandas
Requires-Dist: pydantic
Requires-Dist: python-dotenv
Requires-Dist: pyyaml
Requires-Dist: questionary
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Provides-Extra: examples
Requires-Dist: pyspark; extra == "examples"
Requires-Dist: duckdb; extra == "examples"
Provides-Extra: all
Requires-Dist: cosmonaut[dev,examples]; extra == "all"

# Cosmonaut

![Cosmonaut](assets/cosmonaut_header.jpg)

Helping you find structure in the cosmos of data.

Cosmonaut is a tool for creating classifiers for unstructured data. Bring you own AI provider, provide minimal configuration, and get started in minutes.

> Cosmonaut is currently in active development, and may not be suitable for production use.

## Table of Contents

- [Features](#features)
- [Installation](#installation)
- [Quickstart](#quickstart)
- [Examples](#examples)
- [Development](#development)

## Features

### Support Any Classification Scenario

- Single category, single or multiple label
  - Example: Sentiment classification for user reviews (Positive/Negative/Neutral) where each review can have only one sentiment
  - Example: Tags prediction for blog posts (Sports, Technology, Politics, etc.) where each post can have many tags
- Multiple categories, single or multiple labels
  - Recipe classification for recipes where each recipe can have many ingredients (Chicken, Beef, Lettuce etc.) and one or more cuisines (Italian, Chinese, Indian etc.)

### Produce Structured Outputs

- Predictions are returned in structured outputs (eg. JSON), validated with Pydantic
- Supports structured outputs feature provided by the AI Providers, when available

### Mix Unstructured Data Formats

- Text
- Images (coming soon)

### Use Any AI Providers

- Anthropic
- Gemini
- OpenAI
- Support for other providers which support OpenAI REST API (eg. LM Studio)

### Easy to Use

- Configuration file generation via CLI
- Save fully built configurations for future use or for deployment
- Examples provided for common use cases

## Installation

Install Cosmonaut:

```bash
pip install cosmonaut
```

Or install the latest development version:

```bash
pip install git+https://github.com/am1tyadav/cosmonaut.git
```

## Quickstart

Provided you have a configuration file (eg. [config.yml](https://github.com/am1tyadav/cosmonaut/tree/main/examples/single_label/config.yml)) describing your classification problem, and have a Pandas DataFrame for the inputs, you can run Cosmonaut with:

```python
from cosmonaut import Cosmonaut

# Define how to create the prompt for each input
def create_prompt(row: pd.DataFrame) -> str:
    return f"Some context about the input: {row['text']}"

# Create and run a Cosmonaut classifier
predictions = Cosmonaut("/config/filepath", create_prompt).run(...)
```

## Examples

See the [examples](https://github.com/am1tyadav/cosmonaut/tree/main/examples) folder for more examples. There is also a [tutorial](https://github.com/am1tyadav/cosmonaut/tree/main/examples/tutorial.md) if you're just getting started.

## Development

Contributions are welcome - Please open an issue or submit a pull request. Please feel free to open issues for feature requests as well. Some considerations when developing:

- The project should support Python 3.10+
- [trunk.io](https://trunk.io) is used but only as a linter
