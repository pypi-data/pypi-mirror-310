Metadata-Version: 2.1
Name: cosmonaut
Version: 0.0.3
Summary: Helping you find structure in the cosmos of data.
Author-email: Amit Yadav <amit.yadav.iitr@gmail.com>
Maintainer-email: Amit Yadav <amit.yadav.iitr@gmail.com>
License: MIT License
        
        Copyright (c) 2024 Amit Yadav
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/am1tyadav/cosmonaut
Project-URL: Bug Tracker, https://github.com/am1tyadav/cosmonaut/issues
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: httpx
Requires-Dist: pandas
Requires-Dist: pydantic
Requires-Dist: python-dotenv
Requires-Dist: pyyaml
Requires-Dist: questionary
Requires-Dist: typer
Requires-Dist: loguru
Requires-Dist: google-generativeai
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pyspark; extra == "dev"

# Cosmonaut

![Image](assets/cosmonaut_header.jpg)

Helping you find structure in the cosmos of data.

Cosmonaut is a tool for creating classifiers for unstructured data. Bring you own AI provider, provide minimal configuration, and get started in minutes.

> Cosmonaut is currently in active development, and may not be suitable for production use.

## Features

### Supports a Number of Classification Scenarios

| Scenario                          | Description                                        | Example                                                                         |
| --------------------------------- | -------------------------------------------------- | ------------------------------------------------------------------------------- |
| Single label, individual category | Assigns one label from a single category           | Sentiment classification: Positive, Negative, or Neutral                        |
| Single label, multiple categories | Assigns one label for each of multiple categories  | Topic: Tech/Finance/Health AND Sentiment: Positive/Negative                     |
| Multi label, individual category  | Assigns multiple labels from a single category     | Topic tags: Can select any combination of Tech, Finance, and Health             |
| Multi label, multiple categories  | Assigns multiple labels across multiple categories | Topics: Tech + Finance AND Languages: English + Spanish (multiple per category) |

### Produces Structured Outputs

- Predictions are returned in structured outputs ✅
- Supports structured outputs feature provided by the AI Providers, when available ⏳

### Supports a Number of Unstructed Data Formats

- Text ✅
- Images ⏳

### Supports a Number of AI Providers

- Anthropic
  - Via Official REST API ✅
- Gemini
  - Via Official REST API ⏳
  - Via OpenAI Compatible REST API ✅
- OpenAI
  - Via Official REST API ✅
- Support for other providers with OpenAI compatible REST API ✅

### Easy to Use

- Configuration file generation via CLI ✅
- Examples ✅
- Documentation ⏳

## Installation

Install Cosmonaut:

```bash
pip install cosmonaut
```

Or install the latest development version:

```bash
pip install git+https://github.com/am1tyadav/cosmonaut.git
```

## Quickstart

Provided you have a configuration file (eg. [config.yml](https://github.com/am1tyadav/cosmonaut/tree/main/examples/single_label/config.yml)) describing your classification problem, and have a Pandas DataFrame for the inputs, you can run Cosmonaut with:

```python
from pathlib import Path
import pandas as pd
from dotenv import load_dotenv
from cosmonaut import Cosmonaut

load_dotenv() # Load environment variables from .env file

config_filepath: Path = ...
inputs: pd.DataFrame = ...

# Define how to create the prompt for each input
def create_prompt(row):
    return f"Some context about the input: {row['text']}"

# Create and run a Cosmonaut classifier
classifier = Cosmonaut(config_filepath, create_prompt)
predictions = classifier.run(inputs)
```

## Example - Multi Label, Single Category Classification

[Example Source Code](https://github.com/am1tyadav/cosmonaut/tree/main/examples/multi_label)

A multi-label, single category classification problem allows each input to have multiple labels within the same category. In our example, we will classify "Gift Suggestions" based on a user's text description of their interests. Given a text input describing a user's preferences, the classifier will generate one or more appropriate gift suggestions as labels within the "Gift Suggestions" category.

### Step 1: Create a configuration file

Cosmonaut expects the classification problem to be _described_ in a configuration file. Additionally, this config file is used to configure the AI provider.

Please take a look at one of the example configuration files to see what is required to describe the classification problem. [config.yml](https://github.com/am1tyadav/cosmonaut/blob/main/examples/multi_label/config.yml)

In order to create the configuration file, we can use the CLI:

```bash
cosmonaut-config
```

Answer the questions, and a configuration file will be created for you.

### Step 2: Create a system instructions file

Now that the classifier is described, we need to provide the AI provider with instructions on how to generate the predictions. We can do this by creating a system instructions file. In the configuration file, we can specify the system instructions file to use:

```yaml
classifier:
  instructions_filename: instructions.txt
  instructions: null
```

Note that the `instructions` field is set to `null` because we will populating it when the config file is loaded.

Next, we will create the instructions file:

```txt
You are an expert gift recommender. You can recommend either one or two  gifts for a user given some information about their preferences.
```

There is no need to provide any examples in the system instructions file as these will be created automatically from the examples provided in the configuration file.

### Step 3: Create a prompt function

While the system prompt is populated automatically when we instantiate a `Cosmonaut` object, we need to create a prompt function that will be used to create the prompt for each input. This prompt function will be passed to the `Cosmonaut` object when it is instantiated. For this example, we will create the following prompt function:

```python
def create_prompt(inputs: pd.Series) -> str:
    text = inputs["text"]
    return f"Please suggest one or two gifts for the following user: {text}"
```

### Step 4: Create and run a Cosmonaut classifier

Finally, we can create a Cosmonaut classifier, and run it on some data. A full example is provided below:

```python
from pathlib import Path
from pprint import pprint

import pandas as pd
from dotenv import load_dotenv

from cosmonaut import Cosmonaut

# Load environment variables from .env file
# Needed for the API key
load_dotenv()


def create_prompt(inputs: pd.Series) -> str:
    text = inputs["text"]
    return f"Please suggest one or two gifts for the following user: {text}"


if __name__ == "__main__":
    inputs = pd.DataFrame(
        {
            "text": [
                (
                    "I am a 20 year old who likes to play video games."
                    "I buy them online often with gift cards that I get on my birthday."
                ),
                "I dont really do online shopping but I do like cars",
            ]
        }
    )

    config_filepath = Path(__file__).parent / "config.yml"
    classifier = Cosmonaut(config_filepath, create_prompt)
    response: pd.DataFrame = classifier.run(inputs)

    print(response.head())
```

## List of Examples

- [Single Label, Single Category Classification](https://github.com/am1tyadav/cosmonaut/tree/main/examples/single_label)
- [Multi Label, Single Category Classification](https://github.com/am1tyadav/cosmonaut/tree/main/examples/multi_label)
- [Multi Label, Multi Category Classification](https://github.com/am1tyadav/cosmonaut/tree/main/examples/multi_category)
- [Distributed Predictions with PySpark](https://github.com/am1tyadav/cosmonaut/tree/main/examples/pyspark)

> Cosmonaut uses Pandas to handle the input data - however, this can be a bottleneck when dealing with large datasets. Fortunately, we can use Dask, Ray or Spark to parallelize the data processing. Please take a look at the PySpark example above for more details.

## Development

Contributions are welcome - Please open an issue or submit a pull request. Please feel free to open issues for feature requests as well.

Known issues:

- No test coverage
