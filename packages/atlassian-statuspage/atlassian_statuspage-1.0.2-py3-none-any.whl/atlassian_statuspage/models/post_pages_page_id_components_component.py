# coding: utf-8

"""
    Statuspage API

    # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostPagesPageIdComponentsComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'status': 'str',
        'name': 'str',
        'only_show_if_degraded': 'bool',
        'group_id': 'str',
        'showcase': 'bool',
        'start_date': 'date'
    }

    attribute_map = {
        'description': 'description',
        'status': 'status',
        'name': 'name',
        'only_show_if_degraded': 'only_show_if_degraded',
        'group_id': 'group_id',
        'showcase': 'showcase',
        'start_date': 'start_date'
    }

    def __init__(self, description=None, status=None, name=None, only_show_if_degraded=None, group_id=None, showcase=None, start_date=None):  # noqa: E501
        """PostPagesPageIdComponentsComponent - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._status = None
        self._name = None
        self._only_show_if_degraded = None
        self._group_id = None
        self._showcase = None
        self._start_date = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if name is not None:
            self.name = name
        if only_show_if_degraded is not None:
            self.only_show_if_degraded = only_show_if_degraded
        if group_id is not None:
            self.group_id = group_id
        if showcase is not None:
            self.showcase = showcase
        if start_date is not None:
            self.start_date = start_date

    @property
    def description(self):
        """Gets the description of this PostPagesPageIdComponentsComponent.  # noqa: E501

        More detailed description for component  # noqa: E501

        :return: The description of this PostPagesPageIdComponentsComponent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostPagesPageIdComponentsComponent.

        More detailed description for component  # noqa: E501

        :param description: The description of this PostPagesPageIdComponentsComponent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this PostPagesPageIdComponentsComponent.  # noqa: E501

        Status of component  # noqa: E501

        :return: The status of this PostPagesPageIdComponentsComponent.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PostPagesPageIdComponentsComponent.

        Status of component  # noqa: E501

        :param status: The status of this PostPagesPageIdComponentsComponent.  # noqa: E501
        :type: str
        """
        allowed_values = ["operational", "under_maintenance", "degraded_performance", "partial_outage", "major_outage", ""]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def name(self):
        """Gets the name of this PostPagesPageIdComponentsComponent.  # noqa: E501

        Display name for component  # noqa: E501

        :return: The name of this PostPagesPageIdComponentsComponent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostPagesPageIdComponentsComponent.

        Display name for component  # noqa: E501

        :param name: The name of this PostPagesPageIdComponentsComponent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def only_show_if_degraded(self):
        """Gets the only_show_if_degraded of this PostPagesPageIdComponentsComponent.  # noqa: E501

        Requires a special feature flag to be enabled  # noqa: E501

        :return: The only_show_if_degraded of this PostPagesPageIdComponentsComponent.  # noqa: E501
        :rtype: bool
        """
        return self._only_show_if_degraded

    @only_show_if_degraded.setter
    def only_show_if_degraded(self, only_show_if_degraded):
        """Sets the only_show_if_degraded of this PostPagesPageIdComponentsComponent.

        Requires a special feature flag to be enabled  # noqa: E501

        :param only_show_if_degraded: The only_show_if_degraded of this PostPagesPageIdComponentsComponent.  # noqa: E501
        :type: bool
        """

        self._only_show_if_degraded = only_show_if_degraded

    @property
    def group_id(self):
        """Gets the group_id of this PostPagesPageIdComponentsComponent.  # noqa: E501

        Component Group identifier  # noqa: E501

        :return: The group_id of this PostPagesPageIdComponentsComponent.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this PostPagesPageIdComponentsComponent.

        Component Group identifier  # noqa: E501

        :param group_id: The group_id of this PostPagesPageIdComponentsComponent.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def showcase(self):
        """Gets the showcase of this PostPagesPageIdComponentsComponent.  # noqa: E501

        Should this component be showcased  # noqa: E501

        :return: The showcase of this PostPagesPageIdComponentsComponent.  # noqa: E501
        :rtype: bool
        """
        return self._showcase

    @showcase.setter
    def showcase(self, showcase):
        """Sets the showcase of this PostPagesPageIdComponentsComponent.

        Should this component be showcased  # noqa: E501

        :param showcase: The showcase of this PostPagesPageIdComponentsComponent.  # noqa: E501
        :type: bool
        """

        self._showcase = showcase

    @property
    def start_date(self):
        """Gets the start_date of this PostPagesPageIdComponentsComponent.  # noqa: E501

        The date this component started being used  # noqa: E501

        :return: The start_date of this PostPagesPageIdComponentsComponent.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PostPagesPageIdComponentsComponent.

        The date this component started being used  # noqa: E501

        :param start_date: The start_date of this PostPagesPageIdComponentsComponent.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostPagesPageIdComponentsComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostPagesPageIdComponentsComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
