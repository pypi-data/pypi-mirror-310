# coding: utf-8

"""
    Statuspage API

    # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetricsProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'disabled': 'bool',
        'metric_base_uri': 'str',
        'last_revalidated_at': 'datetime',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'page_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'disabled': 'disabled',
        'metric_base_uri': 'metric_base_uri',
        'last_revalidated_at': 'last_revalidated_at',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'page_id': 'page_id'
    }

    def __init__(self, id=None, type=None, disabled=None, metric_base_uri=None, last_revalidated_at=None, created_at=None, updated_at=None, page_id=None):  # noqa: E501
        """MetricsProvider - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._disabled = None
        self._metric_base_uri = None
        self._last_revalidated_at = None
        self._created_at = None
        self._updated_at = None
        self._page_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if disabled is not None:
            self.disabled = disabled
        if metric_base_uri is not None:
            self.metric_base_uri = metric_base_uri
        if last_revalidated_at is not None:
            self.last_revalidated_at = last_revalidated_at
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if page_id is not None:
            self.page_id = page_id

    @property
    def id(self):
        """Gets the id of this MetricsProvider.  # noqa: E501

        Identifier for Metrics Provider  # noqa: E501

        :return: The id of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetricsProvider.

        Identifier for Metrics Provider  # noqa: E501

        :param id: The id of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this MetricsProvider.  # noqa: E501


        :return: The type of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MetricsProvider.


        :param type: The type of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def disabled(self):
        """Gets the disabled of this MetricsProvider.  # noqa: E501


        :return: The disabled of this MetricsProvider.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this MetricsProvider.


        :param disabled: The disabled of this MetricsProvider.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def metric_base_uri(self):
        """Gets the metric_base_uri of this MetricsProvider.  # noqa: E501


        :return: The metric_base_uri of this MetricsProvider.  # noqa: E501
        :rtype: str
        """
        return self._metric_base_uri

    @metric_base_uri.setter
    def metric_base_uri(self, metric_base_uri):
        """Sets the metric_base_uri of this MetricsProvider.


        :param metric_base_uri: The metric_base_uri of this MetricsProvider.  # noqa: E501
        :type: str
        """

        self._metric_base_uri = metric_base_uri

    @property
    def last_revalidated_at(self):
        """Gets the last_revalidated_at of this MetricsProvider.  # noqa: E501


        :return: The last_revalidated_at of this MetricsProvider.  # noqa: E501
        :rtype: datetime
        """
        return self._last_revalidated_at

    @last_revalidated_at.setter
    def last_revalidated_at(self, last_revalidated_at):
        """Sets the last_revalidated_at of this MetricsProvider.


        :param last_revalidated_at: The last_revalidated_at of this MetricsProvider.  # noqa: E501
        :type: datetime
        """

        self._last_revalidated_at = last_revalidated_at

    @property
    def created_at(self):
        """Gets the created_at of this MetricsProvider.  # noqa: E501


        :return: The created_at of this MetricsProvider.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MetricsProvider.


        :param created_at: The created_at of this MetricsProvider.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MetricsProvider.  # noqa: E501


        :return: The updated_at of this MetricsProvider.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MetricsProvider.


        :param updated_at: The updated_at of this MetricsProvider.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def page_id(self):
        """Gets the page_id of this MetricsProvider.  # noqa: E501


        :return: The page_id of this MetricsProvider.  # noqa: E501
        :rtype: int
        """
        return self._page_id

    @page_id.setter
    def page_id(self, page_id):
        """Sets the page_id of this MetricsProvider.


        :param page_id: The page_id of this MetricsProvider.  # noqa: E501
        :type: int
        """

        self._page_id = page_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricsProvider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricsProvider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
