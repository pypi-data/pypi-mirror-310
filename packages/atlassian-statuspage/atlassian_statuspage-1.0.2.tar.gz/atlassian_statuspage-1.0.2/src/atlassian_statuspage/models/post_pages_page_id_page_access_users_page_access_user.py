# coding: utf-8

"""
    Statuspage API

    # Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostPagesPageIdPageAccessUsersPageAccessUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_login': 'str',
        'email': 'str',
        'page_access_group_ids': 'list[str]',
        'subscribe_to_components': 'bool'
    }

    attribute_map = {
        'external_login': 'external_login',
        'email': 'email',
        'page_access_group_ids': 'page_access_group_ids',
        'subscribe_to_components': 'subscribe_to_components'
    }

    def __init__(self, external_login=None, email=None, page_access_group_ids=None, subscribe_to_components=None):  # noqa: E501
        """PostPagesPageIdPageAccessUsersPageAccessUser - a model defined in Swagger"""  # noqa: E501
        self._external_login = None
        self._email = None
        self._page_access_group_ids = None
        self._subscribe_to_components = None
        self.discriminator = None
        if external_login is not None:
            self.external_login = external_login
        if email is not None:
            self.email = email
        if page_access_group_ids is not None:
            self.page_access_group_ids = page_access_group_ids
        if subscribe_to_components is not None:
            self.subscribe_to_components = subscribe_to_components

    @property
    def external_login(self):
        """Gets the external_login of this PostPagesPageIdPageAccessUsersPageAccessUser.  # noqa: E501

        IDP login user id. Key is typically \"uid\".  # noqa: E501

        :return: The external_login of this PostPagesPageIdPageAccessUsersPageAccessUser.  # noqa: E501
        :rtype: str
        """
        return self._external_login

    @external_login.setter
    def external_login(self, external_login):
        """Sets the external_login of this PostPagesPageIdPageAccessUsersPageAccessUser.

        IDP login user id. Key is typically \"uid\".  # noqa: E501

        :param external_login: The external_login of this PostPagesPageIdPageAccessUsersPageAccessUser.  # noqa: E501
        :type: str
        """

        self._external_login = external_login

    @property
    def email(self):
        """Gets the email of this PostPagesPageIdPageAccessUsersPageAccessUser.  # noqa: E501


        :return: The email of this PostPagesPageIdPageAccessUsersPageAccessUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PostPagesPageIdPageAccessUsersPageAccessUser.


        :param email: The email of this PostPagesPageIdPageAccessUsersPageAccessUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def page_access_group_ids(self):
        """Gets the page_access_group_ids of this PostPagesPageIdPageAccessUsersPageAccessUser.  # noqa: E501


        :return: The page_access_group_ids of this PostPagesPageIdPageAccessUsersPageAccessUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._page_access_group_ids

    @page_access_group_ids.setter
    def page_access_group_ids(self, page_access_group_ids):
        """Sets the page_access_group_ids of this PostPagesPageIdPageAccessUsersPageAccessUser.


        :param page_access_group_ids: The page_access_group_ids of this PostPagesPageIdPageAccessUsersPageAccessUser.  # noqa: E501
        :type: list[str]
        """

        self._page_access_group_ids = page_access_group_ids

    @property
    def subscribe_to_components(self):
        """Gets the subscribe_to_components of this PostPagesPageIdPageAccessUsersPageAccessUser.  # noqa: E501


        :return: The subscribe_to_components of this PostPagesPageIdPageAccessUsersPageAccessUser.  # noqa: E501
        :rtype: bool
        """
        return self._subscribe_to_components

    @subscribe_to_components.setter
    def subscribe_to_components(self, subscribe_to_components):
        """Sets the subscribe_to_components of this PostPagesPageIdPageAccessUsersPageAccessUser.


        :param subscribe_to_components: The subscribe_to_components of this PostPagesPageIdPageAccessUsersPageAccessUser.  # noqa: E501
        :type: bool
        """

        self._subscribe_to_components = subscribe_to_components

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostPagesPageIdPageAccessUsersPageAccessUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostPagesPageIdPageAccessUsersPageAccessUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
