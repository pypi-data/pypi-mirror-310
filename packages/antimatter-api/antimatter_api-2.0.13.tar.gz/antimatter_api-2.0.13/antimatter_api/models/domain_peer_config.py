# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DomainPeerConfig(BaseModel):
    """
    Configuration of a domain peer. If the import alias is absent, the domain ID, without the initial \"dm-\" prefix, will be used 
    """ # noqa: E501
    export_identity_providers: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="A list of identity providers that this peer domain may import from us. ", alias="exportIdentityProviders")
    export_all_identity_providers: Optional[StrictBool] = Field(default=None, description="If present and true, this overrides exportIdentityProviders and exports all identity providers ", alias="exportAllIdentityProviders")
    export_facts: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="A list of fact types that this peer domain may import from us. ", alias="exportFacts")
    export_all_facts: Optional[StrictBool] = Field(default=None, description="If present and true, this overrides exportFacts and exports all fact types ", alias="exportAllFacts")
    export_read_contexts: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="A list of read contexts that this peer domain may import from us. ", alias="exportReadContexts")
    export_all_read_contexts: Optional[StrictBool] = Field(default=None, description="If present and true, this overrides exportReadContexts and exports all read contexts ", alias="exportAllReadContexts")
    export_data_policies: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="A list of data policies to export to the peer domain ", alias="exportDataPolicies")
    export_all_data_policies: Optional[StrictBool] = Field(default=None, description="If present and true, this overrides exportDataPolicies and exports all available data policies ", alias="exportAllDataPolicies")
    export_write_contexts: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="A list of write contexts that this peer domain may import from us. ", alias="exportWriteContexts")
    export_all_write_contexts: Optional[StrictBool] = Field(default=None, description="If present and true, this overrides exportWriteContexts and exports all write contexts ", alias="exportAllWriteContexts")
    export_capabilities: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="A list of capabilities that this peer may import from us ", alias="exportCapabilities")
    export_all_capabilities: Optional[StrictBool] = Field(default=None, description="If present and true, this overrides exportCapabilities and exports all capabilities ", alias="exportAllCapabilities")
    export_domain_policy: Optional[StrictBool] = Field(default=None, description="Export domain policy to the target domain. Export of individual policy rules can be configured by restricting which capabilities and facts are exported, as rules referencing unexported facts and capabilities will not be exported. ", alias="exportDomainPolicy")
    export_root_encryption_keys: Optional[StrictBool] = Field(default=None, description="Export the root encryption keys to the target domain. Keys can only be exported as a whole, you cannot share individual keys. Additionally, the default encryption keys in a domain cannot be shared (note: default meaning the provider type, the  'active' key can be shared if it is not of type default). ", alias="exportRootEncryptionKeys")
    export_capsule_access_log: Optional[StrictBool] = Field(default=None, description="Allow the target domain to query the capsule access log for this domain ", alias="exportCapsuleAccessLog")
    export_control_log: Optional[StrictBool] = Field(default=None, description="Allow the target domain to query the control audit log for this domain ", alias="exportControlLog")
    export_capsule_manifest: Optional[StrictBool] = Field(default=None, description="Allow the target domain to query the list of capsules and their tags ", alias="exportCapsuleManifest")
    export_billing: Optional[StrictBool] = Field(default=None, description="Let this peer domain bill us for its usage. Admins/users in the peer domain may not see any sensitive billing information, they may just \"forward\" the bill to our domain. ", alias="exportBilling")
    export_admin_contact: Optional[StrictBool] = Field(default=None, description="Let this peer domain forward all admin communications to the admin contact for our domain. Admins/users in the peer domain may not see the admin contact details, they can just \"forward\" communication to the admin contact of our domain. ", alias="exportAdminContact")
    nicknames: Optional[List[Annotated[str, Field(strict=True, max_length=128)]]] = Field(default=None, description="a list of names for this domain. These can be used to look up this domain later by using domainFromNickname. All nicknames for a peer domain must be unique within a domain. ")
    import_alias: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="An alias for a peer domain. It must be unique within a domain. The alias is used to refer to the peer domain in policies. A peer may have only one alias ", alias="importAlias")
    forward_billing: Optional[StrictBool] = Field(default=None, description="Forward all charges incurred from operations in our domain to the peer domain. If this is set to true, the configured billing details in our domain have no effect. ", alias="forwardBilling")
    forward_admin_communications: Optional[StrictBool] = Field(default=None, description="Forward all admin communications (account reset, billing, etc) that would be sent to the admin of our domain, to this peer domain instead. If this is set to true, the list of admin contacts configured in our domain is completely ignored. ", alias="forwardAdminCommunications")
    import_identity_providers: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="A list of identity providers to import from the peer domain. ", alias="importIdentityProviders")
    import_all_identity_providers: Optional[StrictBool] = Field(default=None, description="If present and true, this overrides importIdentityProviders and imports all available identityProviders contexts ", alias="importAllIdentityProviders")
    import_facts: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="A list of facts types to import from the peer domain. ", alias="importFacts")
    import_all_facts: Optional[StrictBool] = Field(default=None, description="If present and true, this overrides importFacts and imports all available facts ", alias="importAllFacts")
    import_read_contexts: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="A list of read contexts to import from the peer domain. ", alias="importReadContexts")
    import_all_read_contexts: Optional[StrictBool] = Field(default=None, description="If present and true, this overrides importReadContexts and imports all available read contexts ", alias="importAllReadContexts")
    import_data_policies: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="A list of data policies to import from the peer domain ", alias="importDataPolicies")
    import_all_data_policies: Optional[StrictBool] = Field(default=None, description="If present and true, this overrides importDataPolicies and imports all available data policies ", alias="importAllDataPolicies")
    import_write_contexts: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="A list of write contexts to import from the peer domain. ", alias="importWriteContexts")
    import_all_write_contexts: Optional[StrictBool] = Field(default=None, description="If present and true, this overrides importWriteContexts and imports all available write contexts ", alias="importAllWriteContexts")
    import_capabilities: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="A list of capabilities to import from the peer domain ", alias="importCapabilities")
    import_all_capabilities: Optional[StrictBool] = Field(default=None, description="If present and true, this overrides importCapabilities and imports  all available capabilities ", alias="importAllCapabilities")
    import_domain_policy: Optional[StrictBool] = Field(default=None, description="Import all domain policy (limited by the imported capabilities and facts) into this domain ", alias="importDomainPolicy")
    import_root_encryption_keys: Optional[StrictBool] = Field(default=None, description="Import all root encryption keys into this domain ", alias="importRootEncryptionKeys")
    import_precedence: Optional[StrictInt] = Field(default=None, description="For read contexts and domain policy, is the peer domain higher precedence  (<0) or lower precedence (>0) than the rules configured in the current domain (0). The precedence is also used to order the imported read context rules and domain policy rules with respect to policy imported from other peers. Note  that imported policy is always executed as an atomic unit, so interleaving  of imported rules and rules that exist in this domain is not possible. ", alias="importPrecedence")
    import_capsule_access_log: Optional[StrictBool] = Field(default=None, description="When querying the capsule access log, should results from this peer domain automatically be merged in ", alias="importCapsuleAccessLog")
    import_control_log: Optional[StrictBool] = Field(default=None, description="When querying the control audit log, should results from this peer domain automatically be merged in ", alias="importControlLog")
    import_capsule_manifest: Optional[StrictBool] = Field(default=None, description="When querying for capsules, should results from this peer domain automatically be merged in ", alias="importCapsuleManifest")
    display_name: Annotated[str, Field(min_length=1, strict=True, max_length=40)] = Field(description="The default display name used for this domain. The display name is also treated as a nickname and so can be used from domainFromNickname. ", alias="displayName")
    __properties: ClassVar[List[str]] = ["exportIdentityProviders", "exportAllIdentityProviders", "exportFacts", "exportAllFacts", "exportReadContexts", "exportAllReadContexts", "exportDataPolicies", "exportAllDataPolicies", "exportWriteContexts", "exportAllWriteContexts", "exportCapabilities", "exportAllCapabilities", "exportDomainPolicy", "exportRootEncryptionKeys", "exportCapsuleAccessLog", "exportControlLog", "exportCapsuleManifest", "exportBilling", "exportAdminContact", "nicknames", "importAlias", "forwardBilling", "forwardAdminCommunications", "importIdentityProviders", "importAllIdentityProviders", "importFacts", "importAllFacts", "importReadContexts", "importAllReadContexts", "importDataPolicies", "importAllDataPolicies", "importWriteContexts", "importAllWriteContexts", "importCapabilities", "importAllCapabilities", "importDomainPolicy", "importRootEncryptionKeys", "importPrecedence", "importCapsuleAccessLog", "importControlLog", "importCapsuleManifest", "displayName"]

    @field_validator('import_alias')
    def import_alias_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z][a-z0-9_]{2,31}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z][a-z0-9_]{2,31}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainPeerConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainPeerConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exportIdentityProviders": obj.get("exportIdentityProviders"),
            "exportAllIdentityProviders": obj.get("exportAllIdentityProviders"),
            "exportFacts": obj.get("exportFacts"),
            "exportAllFacts": obj.get("exportAllFacts"),
            "exportReadContexts": obj.get("exportReadContexts"),
            "exportAllReadContexts": obj.get("exportAllReadContexts"),
            "exportDataPolicies": obj.get("exportDataPolicies"),
            "exportAllDataPolicies": obj.get("exportAllDataPolicies"),
            "exportWriteContexts": obj.get("exportWriteContexts"),
            "exportAllWriteContexts": obj.get("exportAllWriteContexts"),
            "exportCapabilities": obj.get("exportCapabilities"),
            "exportAllCapabilities": obj.get("exportAllCapabilities"),
            "exportDomainPolicy": obj.get("exportDomainPolicy"),
            "exportRootEncryptionKeys": obj.get("exportRootEncryptionKeys"),
            "exportCapsuleAccessLog": obj.get("exportCapsuleAccessLog"),
            "exportControlLog": obj.get("exportControlLog"),
            "exportCapsuleManifest": obj.get("exportCapsuleManifest"),
            "exportBilling": obj.get("exportBilling"),
            "exportAdminContact": obj.get("exportAdminContact"),
            "nicknames": obj.get("nicknames"),
            "importAlias": obj.get("importAlias"),
            "forwardBilling": obj.get("forwardBilling"),
            "forwardAdminCommunications": obj.get("forwardAdminCommunications"),
            "importIdentityProviders": obj.get("importIdentityProviders"),
            "importAllIdentityProviders": obj.get("importAllIdentityProviders"),
            "importFacts": obj.get("importFacts"),
            "importAllFacts": obj.get("importAllFacts"),
            "importReadContexts": obj.get("importReadContexts"),
            "importAllReadContexts": obj.get("importAllReadContexts"),
            "importDataPolicies": obj.get("importDataPolicies"),
            "importAllDataPolicies": obj.get("importAllDataPolicies"),
            "importWriteContexts": obj.get("importWriteContexts"),
            "importAllWriteContexts": obj.get("importAllWriteContexts"),
            "importCapabilities": obj.get("importCapabilities"),
            "importAllCapabilities": obj.get("importAllCapabilities"),
            "importDomainPolicy": obj.get("importDomainPolicy"),
            "importRootEncryptionKeys": obj.get("importRootEncryptionKeys"),
            "importPrecedence": obj.get("importPrecedence"),
            "importCapsuleAccessLog": obj.get("importCapsuleAccessLog"),
            "importControlLog": obj.get("importControlLog"),
            "importCapsuleManifest": obj.get("importCapsuleManifest"),
            "displayName": obj.get("displayName")
        })
        return _obj


