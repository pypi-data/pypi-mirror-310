# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DomainHooksListHooksInner(BaseModel):
    """
    DomainHooksListHooksInner
    """ # noqa: E501
    name: Annotated[str, Field(strict=True)] = Field(description="An identifier for a hook")
    version: StrictStr
    summary: StrictStr
    description: StrictStr
    output_span_tags: List[StrictStr] = Field(description="tags that this hook emits that apply to spans of data within the capsule", alias="outputSpanTags")
    output_capsule_tags: List[StrictStr] = Field(description="tags that this hook emits that apply to the entire capsule", alias="outputCapsuleTags")
    __properties: ClassVar[List[str]] = ["name", "version", "summary", "description", "outputSpanTags", "outputCapsuleTags"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z][a-z0-9-]{2,32}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z][a-z0-9-]{2,32}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainHooksListHooksInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainHooksListHooksInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "version": obj.get("version"),
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "outputSpanTags": obj.get("outputSpanTags"),
            "outputCapsuleTags": obj.get("outputCapsuleTags")
        })
        return _obj


