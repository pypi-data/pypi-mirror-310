# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from antimatter_api.models.workspace_object_approval import WorkspaceObjectApproval
from antimatter_api.models.workspace_object_delegation_packet import WorkspaceObjectDelegationPacket
from antimatter_api.models.workspace_object_keychain_info import WorkspaceObjectKeychainInfo
from antimatter_api.models.workspace_object_request import WorkspaceObjectRequest
from typing import Optional, Set
from typing_extensions import Self

class WorkspaceObject(BaseModel):
    """
    WorkspaceObject
    """ # noqa: E501
    request: Optional[WorkspaceObjectRequest] = None
    approval: Optional[WorkspaceObjectApproval] = None
    delegation_packet: Optional[WorkspaceObjectDelegationPacket] = Field(default=None, alias="delegationPacket")
    keychain_info: Optional[WorkspaceObjectKeychainInfo] = Field(default=None, alias="keychainInfo")
    __properties: ClassVar[List[str]] = ["request", "approval", "delegationPacket", "keychainInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspaceObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of approval
        if self.approval:
            _dict['approval'] = self.approval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delegation_packet
        if self.delegation_packet:
            _dict['delegationPacket'] = self.delegation_packet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of keychain_info
        if self.keychain_info:
            _dict['keychainInfo'] = self.keychain_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspaceObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "request": WorkspaceObjectRequest.from_dict(obj["request"]) if obj.get("request") is not None else None,
            "approval": WorkspaceObjectApproval.from_dict(obj["approval"]) if obj.get("approval") is not None else None,
            "delegationPacket": WorkspaceObjectDelegationPacket.from_dict(obj["delegationPacket"]) if obj.get("delegationPacket") is not None else None,
            "keychainInfo": WorkspaceObjectKeychainInfo.from_dict(obj["keychainInfo"]) if obj.get("keychainInfo") is not None else None
        })
        return _obj


