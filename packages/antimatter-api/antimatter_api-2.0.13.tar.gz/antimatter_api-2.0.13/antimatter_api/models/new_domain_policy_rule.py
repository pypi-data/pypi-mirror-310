# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from antimatter_api.models.capability_rule import CapabilityRule
from antimatter_api.models.fact_policy_rules_inner import FactPolicyRulesInner
from antimatter_api.models.policy_rule_operation import PolicyRuleOperation
from antimatter_api.models.policy_rule_result import PolicyRuleResult
from typing import Optional, Set
from typing_extensions import Self

class NewDomainPolicyRule(BaseModel):
    """
    A rule governing the domain's policy. All domain identity capabilities must match (AND) for the action to take effect. If the domainIdentity or facts sections are omitted, they match all domain identities and any fact configurations respectively. 
    """ # noqa: E501
    domain_identity: Optional[CapabilityRule] = Field(default=None, alias="domainIdentity")
    facts: Optional[List[FactPolicyRulesInner]] = Field(default=None, description="assert the existence or nonexistence of facts that reference the domainIdentity. These assertions will be ANDed together, and ANDed with the domainIdentity expression ")
    path: StrictStr = Field(description="the path this rule governs. This pattern may contain glob expressions (e.g. '*' and '**'). ")
    operation: PolicyRuleOperation
    result: PolicyRuleResult
    priority: Annotated[int, Field(le=1000000, strict=True, ge=0)] = Field(description="This rule's priority. Lower priority numbers rules are evaluated first")
    disabled: StrictBool = Field(description="If this rule is disabled or not.")
    __properties: ClassVar[List[str]] = ["domainIdentity", "facts", "path", "operation", "result", "priority", "disabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewDomainPolicyRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of domain_identity
        if self.domain_identity:
            _dict['domainIdentity'] = self.domain_identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in facts (list)
        _items = []
        if self.facts:
            for _item_facts in self.facts:
                if _item_facts:
                    _items.append(_item_facts.to_dict())
            _dict['facts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewDomainPolicyRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domainIdentity": CapabilityRule.from_dict(obj["domainIdentity"]) if obj.get("domainIdentity") is not None else None,
            "facts": [FactPolicyRulesInner.from_dict(_item) for _item in obj["facts"]] if obj.get("facts") is not None else None,
            "path": obj.get("path"),
            "operation": obj.get("operation"),
            "result": obj.get("result"),
            "priority": obj.get("priority"),
            "disabled": obj.get("disabled")
        })
        return _obj


