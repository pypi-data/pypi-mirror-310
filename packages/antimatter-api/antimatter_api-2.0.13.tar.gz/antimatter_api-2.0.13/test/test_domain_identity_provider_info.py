# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from antimatter_api.models.domain_identity_provider_info import DomainIdentityProviderInfo

class TestDomainIdentityProviderInfo(unittest.TestCase):
    """DomainIdentityProviderInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DomainIdentityProviderInfo:
        """Test DomainIdentityProviderInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DomainIdentityProviderInfo`
        """
        model = DomainIdentityProviderInfo()
        if include_optional:
            return DomainIdentityProviderInfo(
                name = 'ic3::ss7djuy2zme',
                type = '',
                imported = True,
                source_domain_id = 'dm-dFZPn3BZqho',
                source_domain_name = '',
                supported_principals = [
                    'APIKey'
                    ],
                details = antimatter_api.models.domain_identity_provider_details.DomainIdentityProviderDetails(
                    google_o_auth = antimatter_api.models.google_o_auth_domain_identity_provider_details.GoogleOAuthDomainIdentityProviderDetails(
                        client_id = '', 
                        group_mappings = antimatter_api.models.google_o_auth_domain_identity_provider_details_group_mappings.GoogleOAuthDomainIdentityProviderDetails_groupMappings(
                            mappings = [
                                antimatter_api.models.google_o_auth_domain_identity_provider_group_mapping_details.GoogleOAuthDomainIdentityProviderGroupMappingDetails(
                                    group_domain = '', 
                                    domain_group_reader_admin = '', 
                                    group_capabilities = [
                                        antimatter_api.models.google_o_auth_domain_identity_provider_group_capability_mappings.GoogleOAuthDomainIdentityProviderGroupCapabilityMappings(
                                            group = '', 
                                            capabilities = [
                                                antimatter_api.models.capability.Capability(
                                                    name = 'awat5ikwowtta-3mh', 
                                                    value = '', )
                                                ], )
                                        ], )
                                ], ), ), 
                    microsoft_o_auth = antimatter_api.models.microsoft_o_auth_domain_identity_provider_details.MicrosoftOAuthDomainIdentityProviderDetails(
                        client_id = '', ), 
                    api_key = antimatter_api.models.api_key_domain_identity_provider_details.APIKeyDomainIdentityProviderDetails(
                        version = '', ), )
            )
        else:
            return DomainIdentityProviderInfo(
                name = 'ic3::ss7djuy2zme',
                type = '',
                imported = True,
                supported_principals = [
                    'APIKey'
                    ],
        )
        """

    def testDomainIdentityProviderInfo(self):
        """Test DomainIdentityProviderInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
