# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from antimatter_api.models.domain_policy_rule import DomainPolicyRule

class TestDomainPolicyRule(unittest.TestCase):
    """DomainPolicyRule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DomainPolicyRule:
        """Test DomainPolicyRule
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DomainPolicyRule`
        """
        model = DomainPolicyRule()
        if include_optional:
            return DomainPolicyRule(
                id = ERROR_TO_EXAMPLE_VALUE,
                domain_identity = antimatter_api.models.capability_rule.CapabilityRule(
                    match_expressions = [
                        antimatter_api.models.capability_rule_match_expressions_inner.CapabilityRule_matchExpressions_inner(
                            name = 'ic3::swowtta-3mh', 
                            operator = 'In', 
                            values = [
                                ''
                                ], )
                        ], ),
                facts = [
                    antimatter_api.models.fact_policy_rules_inner.FactPolicyRules_inner(
                        operator = 'Exists', 
                        name = 'ic3::ss7djuy2zme', 
                        arguments = [
                            antimatter_api.models.fact_policy_rules_inner_arguments_inner.FactPolicyRules_inner_arguments_inner(
                                source = 'domainIdentity', 
                                capability = 'ic3::swowtta-3mh', 
                                value = '', )
                            ], )
                    ],
                path = 'control/read-context/**',
                operation = 'edit',
                result = 'allow',
                priority = 0,
                disabled = True,
                imported = True,
                source_domain_id = 'dm-dFZPn3BZqho',
                source_domain_name = '',
                precedence = 56,
                invalid = True
            )
        else:
            return DomainPolicyRule(
                id = ERROR_TO_EXAMPLE_VALUE,
                path = 'control/read-context/**',
                operation = 'edit',
                result = 'allow',
                priority = 0,
                disabled = True,
                imported = True,
                precedence = 56,
        )
        """

    def testDomainPolicyRule(self):
        """Test DomainPolicyRule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
