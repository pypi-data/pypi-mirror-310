# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from antimatter_api.models.extended_data_policy import ExtendedDataPolicy

class TestExtendedDataPolicy(unittest.TestCase):
    """ExtendedDataPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExtendedDataPolicy:
        """Test ExtendedDataPolicy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExtendedDataPolicy`
        """
        model = ExtendedDataPolicy()
        if include_optional:
            return ExtendedDataPolicy(
                policy = antimatter_api.models.data_policy.DataPolicy(
                    id = 'ic3::pl-ckec0l3o4gi7xhk0', 
                    name = '', 
                    description = '', 
                    imported = True, 
                    source_domain_id = 'dm-dFZPn3BZqho', 
                    source_domain_name = '', 
                    read_only = True, 
                    source = '', ),
                rules = [
                    antimatter_api.models.data_policy_rule.DataPolicyRule(
                        id = 'rl-w8q6zgckec0l3o4g', 
                        comment = '', 
                        clauses = [
                            antimatter_api.models.data_policy_clause.DataPolicyClause(
                                operator = 'AllOf', 
                                tags = [
                                    antimatter_api.models.tag_expression.TagExpression(
                                        name = '', 
                                        values = [
                                            ''
                                            ], 
                                        operator = 'In', 
                                        variables = [
                                            antimatter_api.models.variable_definition.VariableDefinition(
                                                variable_name = 'MqX', 
                                                source = 'TagValue', 
                                                tag_name = '', 
                                                capability_name = '', 
                                                read_parameter_name = '', 
                                                fact_type = 'ic3::ss7djuy2zme', 
                                                fact_arguments = [
                                                    antimatter_api.models.variable_definition_fact_arguments_inner.VariableDefinition_factArguments_inner(
                                                        operator = 'In', )
                                                    ], )
                                            ], )
                                    ], 
                                capabilities = [
                                    antimatter_api.models.capability_expression.CapabilityExpression(
                                        name = '', 
                                        operator = 'In', )
                                    ], 
                                facts = [
                                    antimatter_api.models.fact_expression.FactExpression(
                                        type = 'ic3::ss7djuy2zme', 
                                        operator = 'Exists', 
                                        arguments = [
                                            antimatter_api.models.fact_expression_arguments_inner.FactExpression_arguments_inner(
                                                operator = 'In', )
                                            ], )
                                    ], 
                                read_parameters = [
                                    antimatter_api.models.read_parameter_expression.ReadParameterExpression(
                                        name = '', 
                                        operator = 'In', )
                                    ], )
                            ], 
                        effect = 'DenyCapsule', 
                        token_scope = 'unique', 
                        token_format = 'explicit', 
                        priority = 0, )
                    ]
            )
        else:
            return ExtendedDataPolicy(
                policy = antimatter_api.models.data_policy.DataPolicy(
                    id = 'ic3::pl-ckec0l3o4gi7xhk0', 
                    name = '', 
                    description = '', 
                    imported = True, 
                    source_domain_id = 'dm-dFZPn3BZqho', 
                    source_domain_name = '', 
                    read_only = True, 
                    source = '', ),
        )
        """

    def testExtendedDataPolicy(self):
        """Test ExtendedDataPolicy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
