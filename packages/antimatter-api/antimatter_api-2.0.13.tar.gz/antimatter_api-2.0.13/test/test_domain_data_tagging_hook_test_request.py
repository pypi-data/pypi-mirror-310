# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from antimatter_api.models.domain_data_tagging_hook_test_request import DomainDataTaggingHookTestRequest

class TestDomainDataTaggingHookTestRequest(unittest.TestCase):
    """DomainDataTaggingHookTestRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DomainDataTaggingHookTestRequest:
        """Test DomainDataTaggingHookTestRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DomainDataTaggingHookTestRequest`
        """
        model = DomainDataTaggingHookTestRequest()
        if include_optional:
            return DomainDataTaggingHookTestRequest(
                rule = antimatter_api.models.classifier_rule.ClassifierRule(
                    id = 'rl-w8q6zgckec0l3o4g', 
                    comment = '', 
                    span_tags = [
                        antimatter_api.models.write_context_classifier_tag.WriteContextClassifierTag(
                            name = 'tag.antimatter.io/pii/name', 
                            value = '', 
                            type = 'string', )
                        ], 
                    capsule_tags = [
                        antimatter_api.models.write_context_classifier_tag.WriteContextClassifierTag(
                            name = 'tag.antimatter.io/pii/name', 
                            value = '', 
                            type = 'string', )
                        ], 
                    llm_config = antimatter_api.models.llm_classifier_config.LLMClassifierConfig(
                        model = '', 
                        prompt = '', ), 
                    regex_config = antimatter_api.models.regex_classifier_config.RegexClassifierConfig(
                        pattern = '', 
                        match_on_key = True, ), ),
                input = antimatter_api.models.data_tagging_hook_input.DataTaggingHookInput(
                    records = [
                        antimatter_api.models.data_tagging_hook_input_records_inner.DataTaggingHookInput_records_inner(
                            elements = [
                                antimatter_api.models.data_tagging_hook_input_records_inner_elements_inner.DataTaggingHookInput_records_inner_elements_inner(
                                    content = 'some sentence', 
                                    path = 'foo.bar[2].baz', )
                                ], )
                        ], )
            )
        else:
            return DomainDataTaggingHookTestRequest(
                rule = antimatter_api.models.classifier_rule.ClassifierRule(
                    id = 'rl-w8q6zgckec0l3o4g', 
                    comment = '', 
                    span_tags = [
                        antimatter_api.models.write_context_classifier_tag.WriteContextClassifierTag(
                            name = 'tag.antimatter.io/pii/name', 
                            value = '', 
                            type = 'string', )
                        ], 
                    capsule_tags = [
                        antimatter_api.models.write_context_classifier_tag.WriteContextClassifierTag(
                            name = 'tag.antimatter.io/pii/name', 
                            value = '', 
                            type = 'string', )
                        ], 
                    llm_config = antimatter_api.models.llm_classifier_config.LLMClassifierConfig(
                        model = '', 
                        prompt = '', ), 
                    regex_config = antimatter_api.models.regex_classifier_config.RegexClassifierConfig(
                        pattern = '', 
                        match_on_key = True, ), ),
                input = antimatter_api.models.data_tagging_hook_input.DataTaggingHookInput(
                    records = [
                        antimatter_api.models.data_tagging_hook_input_records_inner.DataTaggingHookInput_records_inner(
                            elements = [
                                antimatter_api.models.data_tagging_hook_input_records_inner_elements_inner.DataTaggingHookInput_records_inner_elements_inner(
                                    content = 'some sentence', 
                                    path = 'foo.bar[2].baz', )
                                ], )
                        ], ),
        )
        """

    def testDomainDataTaggingHookTestRequest(self):
        """Test DomainDataTaggingHookTestRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
