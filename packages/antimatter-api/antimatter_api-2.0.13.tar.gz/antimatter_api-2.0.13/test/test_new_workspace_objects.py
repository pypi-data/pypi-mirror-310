# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from antimatter_api.models.new_workspace_objects import NewWorkspaceObjects

class TestNewWorkspaceObjects(unittest.TestCase):
    """NewWorkspaceObjects unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NewWorkspaceObjects:
        """Test NewWorkspaceObjects
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NewWorkspaceObjects`
        """
        model = NewWorkspaceObjects()
        if include_optional:
            return NewWorkspaceObjects(
                items = [
                    antimatter_api.models.workspace_object.WorkspaceObject(
                        request = antimatter_api.models.workspace_object_request.WorkspaceObject_request(
                            recipient_fingerprint = 'bf325375e030fccba00917317c574773', 
                            delegation_fingerprint = 'bf325375e030fccba00917317c574773', 
                            content = 'YQ==', ), 
                        approval = antimatter_api.models.workspace_object_approval.WorkspaceObject_approval(
                            recipient_fingerprint = 'bf325375e030fccba00917317c574773', 
                            delegation_fingerprint = 'bf325375e030fccba00917317c574773', 
                            affirming_fingerprint = 'bf325375e030fccba00917317c574773', 
                            content = 'YQ==', ), 
                        delegation_packet = antimatter_api.models.workspace_object_delegation_packet.WorkspaceObject_delegationPacket(
                            recipient_fingerprint = 'bf325375e030fccba00917317c574773', 
                            delegation_fingerprint = 'bf325375e030fccba00917317c574773', 
                            content = 'YQ==', ), 
                        keychain_info = antimatter_api.models.workspace_object_keychain_info.WorkspaceObject_keychainInfo(
                            fingerprint = 'bf325375e030fccba00917317c574773', 
                            content = 'YQ==', ), )
                    ]
            )
        else:
            return NewWorkspaceObjects(
                items = [
                    antimatter_api.models.workspace_object.WorkspaceObject(
                        request = antimatter_api.models.workspace_object_request.WorkspaceObject_request(
                            recipient_fingerprint = 'bf325375e030fccba00917317c574773', 
                            delegation_fingerprint = 'bf325375e030fccba00917317c574773', 
                            content = 'YQ==', ), 
                        approval = antimatter_api.models.workspace_object_approval.WorkspaceObject_approval(
                            recipient_fingerprint = 'bf325375e030fccba00917317c574773', 
                            delegation_fingerprint = 'bf325375e030fccba00917317c574773', 
                            affirming_fingerprint = 'bf325375e030fccba00917317c574773', 
                            content = 'YQ==', ), 
                        delegation_packet = antimatter_api.models.workspace_object_delegation_packet.WorkspaceObject_delegationPacket(
                            recipient_fingerprint = 'bf325375e030fccba00917317c574773', 
                            delegation_fingerprint = 'bf325375e030fccba00917317c574773', 
                            content = 'YQ==', ), 
                        keychain_info = antimatter_api.models.workspace_object_keychain_info.WorkspaceObject_keychainInfo(
                            fingerprint = 'bf325375e030fccba00917317c574773', 
                            content = 'YQ==', ), )
                    ],
        )
        """

    def testNewWorkspaceObjects(self):
        """Test NewWorkspaceObjects"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
