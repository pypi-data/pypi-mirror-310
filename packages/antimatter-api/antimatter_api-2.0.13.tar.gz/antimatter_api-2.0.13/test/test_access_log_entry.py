# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from antimatter_api.models.access_log_entry import AccessLogEntry

class TestAccessLogEntry(unittest.TestCase):
    """AccessLogEntry unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AccessLogEntry:
        """Test AccessLogEntry
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AccessLogEntry`
        """
        model = AccessLogEntry()
        if include_optional:
            return AccessLogEntry(
                id = 'bf325375e030fccba00917317c574773',
                time = '0480-72-88T80:01:52.021798096Z',
                domain = 'dm-dFZPn3BZqho',
                capsule = 'ca-dFZPn3BZqhoxS1o7RzixZR',
                operation = 'open',
                session = 'sn-w8q6zgckec0l3o4gi7xhk0',
                location = '',
                create_info = antimatter_api.models.access_log_entry_create_info.AccessLogEntry_createInfo(
                    write_context = 'ic3::ss7djuy2zme', ),
                open_info = antimatter_api.models.access_log_entry_open_info.AccessLogEntry_openInfo(
                    read_context = 'ic3::ss7djuy2zme', ),
                read_info = antimatter_api.models.access_log_entry_read_info.AccessLogEntry_readInfo(
                    parameters = {
                        'key' : ''
                        }, 
                    read_context = 'ic3::ss7djuy2zme', 
                    allowed_tags = antimatter_api.models.tag_summary.TagSummary(
                        unique_tags = [
                            antimatter_api.models.tag_summary_unique_tags_inner.TagSummary_uniqueTags_inner(
                                tag = antimatter_api.models.tag.Tag(
                                    name = 'tag.antimatter.io/pii/name', 
                                    value = '', 
                                    type = 'string', 
                                    source = '', 
                                    hook_version = '4.072888001528021798096225500850762068629.39333975650685139102691291732729478601482026', ), 
                                occurrences = 56, )
                            ], 
                        elided_tags = [
                            antimatter_api.models.tag_summary_elided_tags_inner.TagSummary_elidedTags_inner(
                                tag_name = '', 
                                num_unique_tags = 56, 
                                total_occurrences = 56, )
                            ], ), 
                    redacted_tags = antimatter_api.models.tag_summary.TagSummary(
                        unique_tags = [
                            antimatter_api.models.tag_summary_unique_tags_inner.TagSummary_uniqueTags_inner(
                                tag = antimatter_api.models.tag.Tag(
                                    name = 'tag.antimatter.io/pii/name', 
                                    value = '', 
                                    type = 'string', 
                                    source = '', 
                                    hook_version = '4.072888001528021798096225500850762068629.39333975650685139102691291732729478601482026', ), 
                                occurrences = 56, )
                            ], 
                        elided_tags = [
                            antimatter_api.models.tag_summary_elided_tags_inner.TagSummary_elidedTags_inner(
                                tag_name = '', 
                                num_unique_tags = 56, 
                                total_occurrences = 56, )
                            ], ), 
                    tokenized_tags = , 
                    returned_records = 56, 
                    filtered_records = 56, 
                    returned_spans = 56, 
                    filtered_spans = 56, ),
                capsule_tags = [
                    antimatter_api.models.tag.Tag(
                        name = 'tag.antimatter.io/pii/name', 
                        value = '', 
                        type = 'string', 
                        source = '', 
                        hook_version = '4.072888001528021798096225500850762068629.39333975650685139102691291732729478601482026', )
                    ],
                capsule_span_tags = antimatter_api.models.tag_summary.TagSummary(
                    unique_tags = [
                        antimatter_api.models.tag_summary_unique_tags_inner.TagSummary_uniqueTags_inner(
                            tag = antimatter_api.models.tag.Tag(
                                name = 'tag.antimatter.io/pii/name', 
                                value = '', 
                                type = 'string', 
                                source = '', 
                                hook_version = '4.072888001528021798096225500850762068629.39333975650685139102691291732729478601482026', ), 
                            occurrences = 56, )
                        ], 
                    elided_tags = [
                        antimatter_api.models.tag_summary_elided_tags_inner.TagSummary_elidedTags_inner(
                            tag_name = '', 
                            num_unique_tags = 56, 
                            total_occurrences = 56, )
                        ], ),
                capsule_size = 56,
                capsule_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                issuer = '',
                principal = ''
            )
        else:
            return AccessLogEntry(
                id = 'bf325375e030fccba00917317c574773',
                time = '0480-72-88T80:01:52.021798096Z',
                domain = 'dm-dFZPn3BZqho',
                capsule = 'ca-dFZPn3BZqhoxS1o7RzixZR',
                operation = 'open',
                session = 'sn-w8q6zgckec0l3o4gi7xhk0',
                capsule_tags = [
                    antimatter_api.models.tag.Tag(
                        name = 'tag.antimatter.io/pii/name', 
                        value = '', 
                        type = 'string', 
                        source = '', 
                        hook_version = '4.072888001528021798096225500850762068629.39333975650685139102691291732729478601482026', )
                    ],
                capsule_span_tags = antimatter_api.models.tag_summary.TagSummary(
                    unique_tags = [
                        antimatter_api.models.tag_summary_unique_tags_inner.TagSummary_uniqueTags_inner(
                            tag = antimatter_api.models.tag.Tag(
                                name = 'tag.antimatter.io/pii/name', 
                                value = '', 
                                type = 'string', 
                                source = '', 
                                hook_version = '4.072888001528021798096225500850762068629.39333975650685139102691291732729478601482026', ), 
                            occurrences = 56, )
                        ], 
                    elided_tags = [
                        antimatter_api.models.tag_summary_elided_tags_inner.TagSummary_elidedTags_inner(
                            tag_name = '', 
                            num_unique_tags = 56, 
                            total_occurrences = 56, )
                        ], ),
                capsule_size = 56,
                capsule_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                issuer = '',
                principal = '',
        )
        """

    def testAccessLogEntry(self):
        """Test AccessLogEntry"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
