# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from antimatter_api.api.contexts_api import ContextsApi


class TestContextsApi(unittest.TestCase):
    """ContextsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = ContextsApi()

    def tearDown(self) -> None:
        pass

    def test_domain_delete_read_context(self) -> None:
        """Test case for domain_delete_read_context

        Delete a read context
        """
        pass

    def test_domain_delete_write_context(self) -> None:
        """Test case for domain_delete_write_context

        Delete a write context
        """
        pass

    def test_domain_delete_write_context_classifier_rule(self) -> None:
        """Test case for domain_delete_write_context_classifier_rule

        """
        pass

    def test_domain_delete_write_context_regex_rule(self) -> None:
        """Test case for domain_delete_write_context_regex_rule

        """
        pass

    def test_domain_describe_write_context(self) -> None:
        """Test case for domain_describe_write_context

        Describe a write context
        """
        pass

    def test_domain_get_read_context(self) -> None:
        """Test case for domain_get_read_context

        Get a read context
        """
        pass

    def test_domain_get_write_context_classifier_rules(self) -> None:
        """Test case for domain_get_write_context_classifier_rules

        """
        pass

    def test_domain_get_write_context_regex_rules(self) -> None:
        """Test case for domain_get_write_context_regex_rules

        """
        pass

    def test_domain_insert_write_context_classifier_rule(self) -> None:
        """Test case for domain_insert_write_context_classifier_rule

        Insert a write context classifier rule
        """
        pass

    def test_domain_insert_write_context_regex_rule(self) -> None:
        """Test case for domain_insert_write_context_regex_rule

        Insert a write context regex rule
        """
        pass

    def test_domain_list_hooks(self) -> None:
        """Test case for domain_list_hooks

        Lists available hooks
        """
        pass

    def test_domain_list_read_contexts(self) -> None:
        """Test case for domain_list_read_contexts

        List domain read contexts
        """
        pass

    def test_domain_list_write_contexts(self) -> None:
        """Test case for domain_list_write_contexts

        List domain write contexts
        """
        pass

    def test_domain_upsert_read_context(self) -> None:
        """Test case for domain_upsert_read_context

        Update or create a read context
        """
        pass

    def test_domain_upsert_write_context(self) -> None:
        """Test case for domain_upsert_write_context

        Upsert a write context
        """
        pass

    def test_domain_upsert_write_context_configuration(self) -> None:
        """Test case for domain_upsert_write_context_configuration

        Update a write context configuration
        """
        pass


if __name__ == '__main__':
    unittest.main()
