# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from antimatter_api.models.new_access_log_entry import NewAccessLogEntry

class TestNewAccessLogEntry(unittest.TestCase):
    """NewAccessLogEntry unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NewAccessLogEntry:
        """Test NewAccessLogEntry
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NewAccessLogEntry`
        """
        model = NewAccessLogEntry()
        if include_optional:
            return NewAccessLogEntry(
                operation = 'read',
                location = '',
                read_info = antimatter_api.models.new_access_log_entry_read_info.NewAccessLogEntry_readInfo(
                    parameters = {
                        'key' : ''
                        }, 
                    allowed_tags = antimatter_api.models.tag_summary.TagSummary(
                        unique_tags = [
                            antimatter_api.models.tag_summary_unique_tags_inner.TagSummary_uniqueTags_inner(
                                tag = antimatter_api.models.tag.Tag(
                                    name = 'tag.antimatter.io/pii/name', 
                                    value = '', 
                                    type = 'string', 
                                    source = '', 
                                    hook_version = '4.072888001528021798096225500850762068629.39333975650685139102691291732729478601482026', ), 
                                occurrences = 56, )
                            ], 
                        elided_tags = [
                            antimatter_api.models.tag_summary_elided_tags_inner.TagSummary_elidedTags_inner(
                                tag_name = '', 
                                num_unique_tags = 56, 
                                total_occurrences = 56, )
                            ], ), 
                    redacted_tags = antimatter_api.models.tag_summary.TagSummary(
                        unique_tags = [
                            antimatter_api.models.tag_summary_unique_tags_inner.TagSummary_uniqueTags_inner(
                                tag = antimatter_api.models.tag.Tag(
                                    name = 'tag.antimatter.io/pii/name', 
                                    value = '', 
                                    type = 'string', 
                                    source = '', 
                                    hook_version = '4.072888001528021798096225500850762068629.39333975650685139102691291732729478601482026', ), 
                                occurrences = 56, )
                            ], 
                        elided_tags = [
                            antimatter_api.models.tag_summary_elided_tags_inner.TagSummary_elidedTags_inner(
                                tag_name = '', 
                                num_unique_tags = 56, 
                                total_occurrences = 56, )
                            ], ), 
                    tokenized_tags = , 
                    returned_records = 56, 
                    filtered_records = 56, )
            )
        else:
            return NewAccessLogEntry(
                operation = 'read',
                read_info = antimatter_api.models.new_access_log_entry_read_info.NewAccessLogEntry_readInfo(
                    parameters = {
                        'key' : ''
                        }, 
                    allowed_tags = antimatter_api.models.tag_summary.TagSummary(
                        unique_tags = [
                            antimatter_api.models.tag_summary_unique_tags_inner.TagSummary_uniqueTags_inner(
                                tag = antimatter_api.models.tag.Tag(
                                    name = 'tag.antimatter.io/pii/name', 
                                    value = '', 
                                    type = 'string', 
                                    source = '', 
                                    hook_version = '4.072888001528021798096225500850762068629.39333975650685139102691291732729478601482026', ), 
                                occurrences = 56, )
                            ], 
                        elided_tags = [
                            antimatter_api.models.tag_summary_elided_tags_inner.TagSummary_elidedTags_inner(
                                tag_name = '', 
                                num_unique_tags = 56, 
                                total_occurrences = 56, )
                            ], ), 
                    redacted_tags = antimatter_api.models.tag_summary.TagSummary(
                        unique_tags = [
                            antimatter_api.models.tag_summary_unique_tags_inner.TagSummary_uniqueTags_inner(
                                tag = antimatter_api.models.tag.Tag(
                                    name = 'tag.antimatter.io/pii/name', 
                                    value = '', 
                                    type = 'string', 
                                    source = '', 
                                    hook_version = '4.072888001528021798096225500850762068629.39333975650685139102691291732729478601482026', ), 
                                occurrences = 56, )
                            ], 
                        elided_tags = [
                            antimatter_api.models.tag_summary_elided_tags_inner.TagSummary_elidedTags_inner(
                                tag_name = '', 
                                num_unique_tags = 56, 
                                total_occurrences = 56, )
                            ], ), 
                    tokenized_tags = , 
                    returned_records = 56, 
                    filtered_records = 56, ),
        )
        """

    def testNewAccessLogEntry(self):
        """Test NewAccessLogEntry"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
