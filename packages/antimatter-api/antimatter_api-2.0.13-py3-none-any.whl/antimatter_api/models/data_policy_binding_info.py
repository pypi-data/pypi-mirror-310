# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from antimatter_api.models.data_policy_binding_info_read_contexts_inner import DataPolicyBindingInfoReadContextsInner
from typing import Optional, Set
from typing_extensions import Self

class DataPolicyBindingInfo(BaseModel):
    """
    DataPolicyBindingInfo
    """ # noqa: E501
    policy_id: Annotated[str, Field(strict=True)] = Field(description="An identifier for a potentially imported policy", alias="policyId")
    policy_name: Annotated[str, Field(strict=True, max_length=256)] = Field(alias="policyName")
    imported: StrictBool = Field(description="true if this policy is imported")
    source_domain_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="A globally unique identifier for a domain", alias="sourceDomainID")
    source_domain_name: Optional[StrictStr] = Field(default=None, alias="sourceDomainName")
    read_contexts: List[DataPolicyBindingInfoReadContextsInner] = Field(alias="readContexts")
    default_attachment: StrictStr = Field(description="what is our default binding? For imported policies, this defaults to Inherit, for our own policies this defaults to NotAttached ", alias="defaultAttachment")
    peer_default: Optional[StrictStr] = Field(default=None, description="if this is an imported policy, what is the peer's default binding config for it? ", alias="peerDefault")
    __properties: ClassVar[List[str]] = ["policyId", "policyName", "imported", "sourceDomainID", "sourceDomainName", "readContexts", "defaultAttachment", "peerDefault"]

    @field_validator('policy_id')
    def policy_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^((dm-[1-9A-HJ-NP-Za-km-z]{11}|[a-z][a-z0-9_]{2,31})::)?pl-[a-z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^((dm-[1-9A-HJ-NP-Za-km-z]{11}|[a-z][a-z0-9_]{2,31})::)?pl-[a-z0-9]{16}$/")
        return value

    @field_validator('policy_name')
    def policy_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_ \/-]{2,256}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_ \/-]{2,256}$/")
        return value

    @field_validator('source_domain_id')
    def source_domain_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^dm-[1-9A-HJ-NP-Za-km-z]{11}$", value):
            raise ValueError(r"must validate the regular expression /^dm-[1-9A-HJ-NP-Za-km-z]{11}$/")
        return value

    @field_validator('default_attachment')
    def default_attachment_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Inherit', 'NotAttached', 'Attached']):
            raise ValueError("must be one of enum values ('Inherit', 'NotAttached', 'Attached')")
        return value

    @field_validator('peer_default')
    def peer_default_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Attached', 'NotAttached', 'NoConfiguration']):
            raise ValueError("must be one of enum values ('Attached', 'NotAttached', 'NoConfiguration')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataPolicyBindingInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in read_contexts (list)
        _items = []
        if self.read_contexts:
            for _item_read_contexts in self.read_contexts:
                if _item_read_contexts:
                    _items.append(_item_read_contexts.to_dict())
            _dict['readContexts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataPolicyBindingInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "policyId": obj.get("policyId"),
            "policyName": obj.get("policyName"),
            "imported": obj.get("imported"),
            "sourceDomainID": obj.get("sourceDomainID"),
            "sourceDomainName": obj.get("sourceDomainName"),
            "readContexts": [DataPolicyBindingInfoReadContextsInner.from_dict(_item) for _item in obj["readContexts"]] if obj.get("readContexts") is not None else None,
            "defaultAttachment": obj.get("defaultAttachment"),
            "peerDefault": obj.get("peerDefault")
        })
        return _obj


