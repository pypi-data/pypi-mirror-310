# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DomainControlLogEntry(BaseModel):
    """
    Results for a domain control log query 
    """ # noqa: E501
    domain: Annotated[str, Field(strict=True)] = Field(description="A globally unique identifier for a domain")
    id: Annotated[str, Field(strict=True)] = Field(description="A globally unique chronological identifier for a log record. If you sort by this identifier, your logs will be in chronological order ")
    time: Annotated[str, Field(strict=True)] = Field(description="the time of an operation, in UTC")
    session: Annotated[str, Field(strict=True)] = Field(description="An identifier for an authentication session")
    url: StrictStr
    summary: Annotated[str, Field(strict=True, max_length=100)]
    description: Dict[str, StrictStr]
    issuer: StrictStr = Field(description="the principal's issuer")
    principal: StrictStr = Field(description="the principal for this operation")
    __properties: ClassVar[List[str]] = ["domain", "id", "time", "session", "url", "summary", "description", "issuer", "principal"]

    @field_validator('domain')
    def domain_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^dm-[1-9A-HJ-NP-Za-km-z]{11}$", value):
            raise ValueError(r"must validate the regular expression /^dm-[1-9A-HJ-NP-Za-km-z]{11}$/")
        return value

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9a-f]{32}", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-f]{32}/")
        return value

    @field_validator('time')
    def time_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]{9})?Z$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]{9})?Z$/")
        return value

    @field_validator('session')
    def session_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^sn-[a-z0-9]{22}$", value):
            raise ValueError(r"must validate the regular expression /^sn-[a-z0-9]{22}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainControlLogEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainControlLogEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domain": obj.get("domain"),
            "id": obj.get("id"),
            "time": obj.get("time"),
            "session": obj.get("session"),
            "url": obj.get("url"),
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "issuer": obj.get("issuer"),
            "principal": obj.get("principal")
        })
        return _obj


