# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DataPolicyBindingInfoReadContextsInner(BaseModel):
    """
    DataPolicyBindingInfoReadContextsInner
    """ # noqa: E501
    name: Annotated[str, Field(strict=True)] = Field(description="A human readable name for a read context")
    configuration: StrictStr = Field(description="This is the configuration of this policy binding in our domain")
    status: StrictStr = Field(description="This is the actual status of this binding, looking at our config, the peer config, and the actual  availability of the policy ")
    source: StrictStr = Field(description="This defines where the status is coming from ")
    peer_configuration: Optional[StrictStr] = Field(default=None, description="This is the configuration of this policy binding in the peer domain (for imported policies)", alias="peerConfiguration")
    __properties: ClassVar[List[str]] = ["name", "configuration", "status", "source", "peerConfiguration"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^((dm-[1-9A-HJ-NP-Za-km-z]{11}|[a-z][a-z0-9_]{2,31})::)?[a-z][a-z0-9_]{2,31}$", value):
            raise ValueError(r"must validate the regular expression /^((dm-[1-9A-HJ-NP-Za-km-z]{11}|[a-z][a-z0-9_]{2,31})::)?[a-z][a-z0-9_]{2,31}$/")
        return value

    @field_validator('configuration')
    def configuration_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Inherit', 'NotAttached', 'Attached', 'NoConfiguration']):
            raise ValueError("must be one of enum values ('Inherit', 'NotAttached', 'Attached', 'NoConfiguration')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Attached', 'NotAttached', 'Unavailable']):
            raise ValueError("must be one of enum values ('Attached', 'NotAttached', 'Unavailable')")
        return value

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Default', 'PeerDefault', 'PeerContextConfiguration', 'ContextConfiguration', 'NoConfiguration']):
            raise ValueError("must be one of enum values ('Default', 'PeerDefault', 'PeerContextConfiguration', 'ContextConfiguration', 'NoConfiguration')")
        return value

    @field_validator('peer_configuration')
    def peer_configuration_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Attached', 'NotAttached', 'NoConfiguration']):
            raise ValueError("must be one of enum values ('Attached', 'NotAttached', 'NoConfiguration')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataPolicyBindingInfoReadContextsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataPolicyBindingInfoReadContextsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "configuration": obj.get("configuration"),
            "status": obj.get("status"),
            "source": obj.get("source"),
            "peerConfiguration": obj.get("peerConfiguration")
        })
        return _obj


