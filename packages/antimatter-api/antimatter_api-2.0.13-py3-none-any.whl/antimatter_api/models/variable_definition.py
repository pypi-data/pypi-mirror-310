# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from antimatter_api.models.variable_definition_fact_arguments_inner import VariableDefinitionFactArgumentsInner
from typing import Optional, Set
from typing_extensions import Self

class VariableDefinition(BaseModel):
    """
    VariableDefinition
    """ # noqa: E501
    variable_name: Annotated[str, Field(strict=True)] = Field(alias="variableName")
    source: StrictStr
    tag_name: Optional[StrictStr] = Field(default=None, description="This should be a TagName but can contain variables", alias="tagName")
    capability_name: Optional[StrictStr] = Field(default=None, description="This should be a CapabilityReference but can contain variables", alias="capabilityName")
    read_parameter_name: Optional[StrictStr] = Field(default=None, description="This should be the name of a read parameter but can contain variables", alias="readParameterName")
    fact_type: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="An identifier for a fact type that might be imported from a peer domain. If it is, it will bear an imported resource prefix (either a domain identifier or an alias, followed by ::) ", alias="factType")
    fact_arguments: Optional[Annotated[List[VariableDefinitionFactArgumentsInner], Field(max_length=16)]] = Field(default=None, alias="factArguments")
    variables: Optional[Annotated[List[VariableDefinition], Field(max_length=16)]] = None
    __properties: ClassVar[List[str]] = ["variableName", "source", "tagName", "capabilityName", "readParameterName", "factType", "factArguments", "variables"]

    @field_validator('variable_name')
    def variable_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z_][a-zA-Z0-9_]{0,32}", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z_][a-zA-Z0-9_]{0,32}/")
        return value

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['TagValue', 'FactArgument', 'CapabilityValue', 'ReadParamValue']):
            raise ValueError("must be one of enum values ('TagValue', 'FactArgument', 'CapabilityValue', 'ReadParamValue')")
        return value

    @field_validator('fact_type')
    def fact_type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^((dm-[1-9A-HJ-NP-Za-km-z]{11}|[a-z][a-z0-9_]{2,31})::)?[a-z][a-z0-9_]{2,31}$", value):
            raise ValueError(r"must validate the regular expression /^((dm-[1-9A-HJ-NP-Za-km-z]{11}|[a-z][a-z0-9_]{2,31})::)?[a-z][a-z0-9_]{2,31}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VariableDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fact_arguments (list)
        _items = []
        if self.fact_arguments:
            for _item_fact_arguments in self.fact_arguments:
                if _item_fact_arguments:
                    _items.append(_item_fact_arguments.to_dict())
            _dict['factArguments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in variables (list)
        _items = []
        if self.variables:
            for _item_variables in self.variables:
                if _item_variables:
                    _items.append(_item_variables.to_dict())
            _dict['variables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VariableDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "variableName": obj.get("variableName"),
            "source": obj.get("source"),
            "tagName": obj.get("tagName"),
            "capabilityName": obj.get("capabilityName"),
            "readParameterName": obj.get("readParameterName"),
            "factType": obj.get("factType"),
            "factArguments": [VariableDefinitionFactArgumentsInner.from_dict(_item) for _item in obj["factArguments"]] if obj.get("factArguments") is not None else None,
            "variables": [VariableDefinition.from_dict(_item) for _item in obj["variables"]] if obj.get("variables") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
VariableDefinition.model_rebuild(raise_errors=False)

