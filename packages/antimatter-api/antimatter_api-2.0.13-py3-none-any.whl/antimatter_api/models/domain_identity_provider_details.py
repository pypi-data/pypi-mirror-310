# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from antimatter_api.models.api_key_domain_identity_provider_details import APIKeyDomainIdentityProviderDetails
from antimatter_api.models.google_o_auth_domain_identity_provider_details import GoogleOAuthDomainIdentityProviderDetails
from antimatter_api.models.microsoft_o_auth_domain_identity_provider_details import MicrosoftOAuthDomainIdentityProviderDetails
from typing import Optional, Set
from typing_extensions import Self

class DomainIdentityProviderDetails(BaseModel):
    """
    DomainIdentityProviderDetails
    """ # noqa: E501
    google_o_auth: Optional[GoogleOAuthDomainIdentityProviderDetails] = Field(default=None, alias="GoogleOAuth")
    microsoft_o_auth: Optional[MicrosoftOAuthDomainIdentityProviderDetails] = Field(default=None, alias="MicrosoftOAuth")
    api_key: Optional[APIKeyDomainIdentityProviderDetails] = Field(default=None, alias="APIKey")
    __properties: ClassVar[List[str]] = ["GoogleOAuth", "MicrosoftOAuth", "APIKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainIdentityProviderDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of google_o_auth
        if self.google_o_auth:
            _dict['GoogleOAuth'] = self.google_o_auth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of microsoft_o_auth
        if self.microsoft_o_auth:
            _dict['MicrosoftOAuth'] = self.microsoft_o_auth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of api_key
        if self.api_key:
            _dict['APIKey'] = self.api_key.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainIdentityProviderDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "GoogleOAuth": GoogleOAuthDomainIdentityProviderDetails.from_dict(obj["GoogleOAuth"]) if obj.get("GoogleOAuth") is not None else None,
            "MicrosoftOAuth": MicrosoftOAuthDomainIdentityProviderDetails.from_dict(obj["MicrosoftOAuth"]) if obj.get("MicrosoftOAuth") is not None else None,
            "APIKey": APIKeyDomainIdentityProviderDetails.from_dict(obj["APIKey"]) if obj.get("APIKey") is not None else None
        })
        return _obj


