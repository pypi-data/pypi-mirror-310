# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from antimatter_api.models.data_policy_clause import DataPolicyClause
from antimatter_api.models.data_policy_rule_effect import DataPolicyRuleEffect
from typing import Optional, Set
from typing_extensions import Self

class NewDataPolicyRule(BaseModel):
    """
    NewDataPolicyRule
    """ # noqa: E501
    comment: Optional[Annotated[str, Field(strict=True, max_length=256)]] = None
    clauses: Annotated[List[DataPolicyClause], Field(min_length=1, max_length=64)]
    effect: DataPolicyRuleEffect
    token_scope: Optional[StrictStr] = Field(default=None, description="if the effect is Tokenize, what scope to use for the token ", alias="tokenScope")
    token_format: Optional[StrictStr] = Field(default=None, description="if the effect is Tokenize, what format should the token take. Explicit is of the form tk-xxxxxx and synthetic returns something that looks like the original data type (e.g. John Smith for a name) but is in fact a token ", alias="tokenFormat")
    priority: Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]] = Field(default=None, description="This rule's priority. Lower priority numbers rules are evaluated first. if \"assignPriority\" is specified, this field is ignored. ")
    assign_priority: Optional[StrictStr] = Field(default=None, description="Automatically determines the rule's priority based on the priority numbers of rules already in the policy. If \"first\", this rule will be assigned a priority number lower than any other rule in the policy, causing it to be evaluated first. If \"last\" this rule will be assigned a priority number higher than any other rule in the policy, causing it to be evaluated last. Specifying this field will also cause the priorities of other rules in the policy to be re-assigned to unique multiples of 10, preserving order. ", alias="assignPriority")
    __properties: ClassVar[List[str]] = ["comment", "clauses", "effect", "tokenScope", "tokenFormat", "priority", "assignPriority"]

    @field_validator('token_scope')
    def token_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unique', 'capsule', 'domain']):
            raise ValueError("must be one of enum values ('unique', 'capsule', 'domain')")
        return value

    @field_validator('token_format')
    def token_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['explicit', 'synthetic']):
            raise ValueError("must be one of enum values ('explicit', 'synthetic')")
        return value

    @field_validator('assign_priority')
    def assign_priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['first', 'last']):
            raise ValueError("must be one of enum values ('first', 'last')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewDataPolicyRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in clauses (list)
        _items = []
        if self.clauses:
            for _item_clauses in self.clauses:
                if _item_clauses:
                    _items.append(_item_clauses.to_dict())
            _dict['clauses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewDataPolicyRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "clauses": [DataPolicyClause.from_dict(_item) for _item in obj["clauses"]] if obj.get("clauses") is not None else None,
            "effect": obj.get("effect"),
            "tokenScope": obj.get("tokenScope"),
            "tokenFormat": obj.get("tokenFormat"),
            "priority": obj.get("priority"),
            "assignPriority": obj.get("assignPriority")
        })
        return _obj


