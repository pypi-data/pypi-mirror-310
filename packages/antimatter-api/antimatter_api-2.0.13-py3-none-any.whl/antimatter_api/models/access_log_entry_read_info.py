# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from antimatter_api.models.tag_summary import TagSummary
from typing import Optional, Set
from typing_extensions import Self

class AccessLogEntryReadInfo(BaseModel):
    """
    information available if the operation is of type \"read\". allowedTags are those that were allowed without transformation during the read. redactedTags are those that were redacted during the read. tokenizedTags are those that were tokenized during the read. 
    """ # noqa: E501
    parameters: Dict[str, StrictStr] = Field(description="the client-specified parameters representing the user on whose behalf this read is being carried out. Valid only for operation = read ")
    read_context: Annotated[str, Field(strict=True)] = Field(description="A human readable name for a read context", alias="readContext")
    allowed_tags: TagSummary = Field(alias="allowedTags")
    redacted_tags: TagSummary = Field(alias="redactedTags")
    tokenized_tags: TagSummary = Field(alias="tokenizedTags")
    returned_records: StrictInt = Field(description="the number of records returned by the read, including those with allowed, redacted or tokenized spans ", alias="returnedRecords")
    filtered_records: StrictInt = Field(description="the number of records that were completely filtered out during the read operation ", alias="filteredRecords")
    returned_spans: StrictInt = Field(description="the number of spans that were allowed during the read operation ", alias="returnedSpans")
    filtered_spans: StrictInt = Field(description="the number of spans that were redacted during the read operation ", alias="filteredSpans")
    __properties: ClassVar[List[str]] = ["parameters", "readContext", "allowedTags", "redactedTags", "tokenizedTags", "returnedRecords", "filteredRecords", "returnedSpans", "filteredSpans"]

    @field_validator('read_context')
    def read_context_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^((dm-[1-9A-HJ-NP-Za-km-z]{11}|[a-z][a-z0-9_]{2,31})::)?[a-z][a-z0-9_]{2,31}$", value):
            raise ValueError(r"must validate the regular expression /^((dm-[1-9A-HJ-NP-Za-km-z]{11}|[a-z][a-z0-9_]{2,31})::)?[a-z][a-z0-9_]{2,31}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessLogEntryReadInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of allowed_tags
        if self.allowed_tags:
            _dict['allowedTags'] = self.allowed_tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redacted_tags
        if self.redacted_tags:
            _dict['redactedTags'] = self.redacted_tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tokenized_tags
        if self.tokenized_tags:
            _dict['tokenizedTags'] = self.tokenized_tags.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessLogEntryReadInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "parameters": obj.get("parameters"),
            "readContext": obj.get("readContext"),
            "allowedTags": TagSummary.from_dict(obj["allowedTags"]) if obj.get("allowedTags") is not None else None,
            "redactedTags": TagSummary.from_dict(obj["redactedTags"]) if obj.get("redactedTags") is not None else None,
            "tokenizedTags": TagSummary.from_dict(obj["tokenizedTags"]) if obj.get("tokenizedTags") is not None else None,
            "returnedRecords": obj.get("returnedRecords"),
            "filteredRecords": obj.get("filteredRecords"),
            "returnedSpans": obj.get("returnedSpans"),
            "filteredSpans": obj.get("filteredSpans")
        })
        return _obj


