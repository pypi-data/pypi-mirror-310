# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from antimatter_api.models.write_context_config_info import WriteContextConfigInfo
from typing import Optional, Set
from typing_extensions import Self

class CapsuleCreateResponse(BaseModel):
    """
    The response for the creation of a new capsule 
    """ # noqa: E501
    id: Annotated[str, Field(strict=True)] = Field(description="A globally unique identifier for a capsule")
    data_key: Union[StrictBytes, StrictStr] = Field(description="a CBOR encoded encryption key for the capsule", alias="dataKey")
    encrypted_data_key: Union[StrictBytes, StrictStr] = Field(description="a CBOR encoded encryption key for the capsule", alias="encryptedDataKey")
    key_encryption_key_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The ID of the encryption key used to encrypt the data key. ", alias="keyEncryptionKeyID")
    create_token: Annotated[str, Field(min_length=64, strict=True)] = Field(description="A token used to tie requests together when creating and reading capsules.", alias="createToken")
    write_context_configuration: WriteContextConfigInfo = Field(alias="writeContextConfiguration")
    disaster_recovery_token: Optional[StrictStr] = Field(default=None, description="Contains a CBOR encoded encryption key for the capsule that has been encrypted using the Disaster Recovery key. This field is ony set if disaster recovery has been enabled. ", alias="disasterRecoveryToken")
    __properties: ClassVar[List[str]] = ["id", "dataKey", "encryptedDataKey", "keyEncryptionKeyID", "createToken", "writeContextConfiguration", "disasterRecoveryToken"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^ca-[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{22}$", value):
            raise ValueError(r"must validate the regular expression /^ca-[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{22}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CapsuleCreateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of write_context_configuration
        if self.write_context_configuration:
            _dict['writeContextConfiguration'] = self.write_context_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CapsuleCreateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "dataKey": obj.get("dataKey"),
            "encryptedDataKey": obj.get("encryptedDataKey"),
            "keyEncryptionKeyID": obj.get("keyEncryptionKeyID"),
            "createToken": obj.get("createToken"),
            "writeContextConfiguration": WriteContextConfigInfo.from_dict(obj["writeContextConfiguration"]) if obj.get("writeContextConfiguration") is not None else None,
            "disasterRecoveryToken": obj.get("disasterRecoveryToken")
        })
        return _obj


