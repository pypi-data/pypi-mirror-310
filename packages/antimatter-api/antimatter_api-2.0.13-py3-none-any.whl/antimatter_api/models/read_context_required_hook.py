# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ReadContextRequiredHook(BaseModel):
    """
    ReadContextRequiredHook
    """ # noqa: E501
    hook: Annotated[str, Field(strict=True)] = Field(description="An identifier for a hook")
    constraint: Annotated[str, Field(strict=True)] = Field(description="A pattern for expressing hook version requirements. Note that this is used for expressing two things. The first is which major version of the hook to run on new data. Here, if the version starts with > or no special character, the newest version of the hook is used. If it starts with ~, then the major version is respected, but the newest minor and patch version available on the server will be used. The second function of this pattern is to express a minimum version for read contexts such that if the capsule does not have hook data meeting the requirement, the hook data will be generated just in time. For this, you may express ~1.2.3 to say \"if the hook data is older than 1.2.3, generate it with 1.x.x\" or you may say >1.2.3 to say \"if the hook data is older than 1.2.3, generate it with the newest version\" (which could be 2.x.x). ")
    write_context: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="A human readable name for a write context", alias="writeContext")
    __properties: ClassVar[List[str]] = ["hook", "constraint", "writeContext"]

    @field_validator('hook')
    def hook_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z][a-z0-9-]{2,32}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z][a-z0-9-]{2,32}$/")
        return value

    @field_validator('constraint')
    def constraint_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?:\^|>)?\d+\.\d+\.\d+$", value):
            raise ValueError(r"must validate the regular expression /^(?:\^|>)?\d+\.\d+\.\d+$/")
        return value

    @field_validator('write_context')
    def write_context_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z][a-z0-9_]{2,31}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z][a-z0-9_]{2,31}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReadContextRequiredHook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReadContextRequiredHook from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hook": obj.get("hook"),
            "constraint": obj.get("constraint"),
            "writeContext": obj.get("writeContext")
        })
        return _obj


