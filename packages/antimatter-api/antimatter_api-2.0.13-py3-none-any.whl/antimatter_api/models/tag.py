# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from antimatter_api.models.tag_type_field import TagTypeField
from typing import Optional, Set
from typing_extensions import Self

class Tag(BaseModel):
    """
    Tag
    """ # noqa: E501
    name: Annotated[str, Field(strict=True, max_length=64)] = Field(description="the full name of this tag")
    value: Annotated[str, Field(strict=True, max_length=256)] = Field(description="the value of this tag, or the empty string if the tag is of type \"unary\". For a number type tag, numbers of the form \"3.14\" are supported (no exponential notation). For a boolean, \"true\" or \"false\" are supported. For a date, RFC3339 form must be used, but it can      be truncated to end before the \"T\" if no time is required. ")
    type: TagTypeField
    source: StrictStr = Field(description="where this tag came from. If it came from a hook, this will be of the form \"hooks/the_hookname\". Otherwise, this will be \"create\" indicating it was given by the user at the time the capsule was created, or it will be \"manual\" indicating it was added later. ")
    hook_version: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="if this tag came from a hook, which version of that hook emitted the tag ")
    __properties: ClassVar[List[str]] = ["name", "value", "type", "source", "hook_version"]

    @field_validator('hook_version')
    def hook_version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+\.\d+\.\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+\.\d+\.\d+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Tag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Tag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "value": obj.get("value"),
            "type": obj.get("type"),
            "source": obj.get("source"),
            "hook_version": obj.get("hook_version")
        })
        return _obj


