# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from antimatter_api.models.capability_expression import CapabilityExpression
from antimatter_api.models.fact_expression import FactExpression
from antimatter_api.models.read_parameter_expression import ReadParameterExpression
from antimatter_api.models.tag_expression import TagExpression
from typing import Optional, Set
from typing_extensions import Self

class DataPolicyClause(BaseModel):
    """
    DataPolicyClause
    """ # noqa: E501
    operator: StrictStr
    tags: Optional[List[TagExpression]] = None
    capabilities: Optional[List[CapabilityExpression]] = None
    facts: Optional[List[FactExpression]] = None
    read_parameters: Optional[List[ReadParameterExpression]] = Field(default=None, alias="readParameters")
    __properties: ClassVar[List[str]] = ["operator", "tags", "capabilities", "facts", "readParameters"]

    @field_validator('operator')
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AllOf', 'NotAllOf', 'AnyOf', 'NotAnyOf', 'Always']):
            raise ValueError("must be one of enum values ('AllOf', 'NotAllOf', 'AnyOf', 'NotAnyOf', 'Always')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataPolicyClause from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in capabilities (list)
        _items = []
        if self.capabilities:
            for _item_capabilities in self.capabilities:
                if _item_capabilities:
                    _items.append(_item_capabilities.to_dict())
            _dict['capabilities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facts (list)
        _items = []
        if self.facts:
            for _item_facts in self.facts:
                if _item_facts:
                    _items.append(_item_facts.to_dict())
            _dict['facts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in read_parameters (list)
        _items = []
        if self.read_parameters:
            for _item_read_parameters in self.read_parameters:
                if _item_read_parameters:
                    _items.append(_item_read_parameters.to_dict())
            _dict['readParameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataPolicyClause from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operator": obj.get("operator"),
            "tags": [TagExpression.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "capabilities": [CapabilityExpression.from_dict(_item) for _item in obj["capabilities"]] if obj.get("capabilities") is not None else None,
            "facts": [FactExpression.from_dict(_item) for _item in obj["facts"]] if obj.get("facts") is not None else None,
            "readParameters": [ReadParameterExpression.from_dict(_item) for _item in obj["readParameters"]] if obj.get("readParameters") is not None else None
        })
        return _obj


