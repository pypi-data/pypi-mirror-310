# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreatePeerDomain(BaseModel):
    """
    Configuration options for creating a new subdomain. 
    """ # noqa: E501
    nicknames: Optional[List[Annotated[str, Field(strict=True, max_length=128)]]] = Field(default=None, description="a list of names for this domain. These can be used to look up this domain later by using domainFromNickname. All nicknames for peer domains must be unique within a domain ")
    import_alias_for_parent: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="An alias for a peer domain. It must be unique within a domain. The alias is used to refer to the peer domain in policies. A peer may have only one alias ", alias="importAliasForParent")
    import_alias_for_child: Annotated[str, Field(strict=True)] = Field(description="An alias for a peer domain. It must be unique within a domain. The alias is used to refer to the peer domain in policies. A peer may have only one alias ", alias="importAliasForChild")
    display_name_for_parent: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=40)]] = Field(default=None, description="The default display name used for this domain. The display name is also treated as a nickname and so can be used from domainFromNickname. ", alias="displayNameForParent")
    display_name_for_child: Annotated[str, Field(min_length=1, strict=True, max_length=40)] = Field(description="The default display name used for this domain. The display name is also treated as a nickname and so can be used from domainFromNickname. ", alias="displayNameForChild")
    link_all: Optional[StrictBool] = Field(default=False, alias="linkAll")
    link_identity_providers: Optional[StrictBool] = Field(default=False, alias="linkIdentityProviders")
    link_facts: Optional[StrictBool] = Field(default=False, alias="linkFacts")
    link_read_contexts: Optional[StrictBool] = Field(default=False, alias="linkReadContexts")
    link_write_contexts: Optional[StrictBool] = Field(default=False, alias="linkWriteContexts")
    link_capabilities: Optional[StrictBool] = Field(default=False, alias="linkCapabilities")
    link_domain_policy: Optional[StrictBool] = Field(default=False, alias="linkDomainPolicy")
    link_data_policy: Optional[StrictBool] = Field(default=False, alias="linkDataPolicy")
    link_root_encryption_keys: Optional[StrictBool] = Field(default=False, alias="linkRootEncryptionKeys")
    link_capsule_access_log: Optional[StrictBool] = Field(default=False, alias="linkCapsuleAccessLog")
    link_control_log: Optional[StrictBool] = Field(default=False, alias="linkControlLog")
    link_capsule_manifest: Optional[StrictBool] = Field(default=False, alias="linkCapsuleManifest")
    __properties: ClassVar[List[str]] = ["nicknames", "importAliasForParent", "importAliasForChild", "displayNameForParent", "displayNameForChild", "linkAll", "linkIdentityProviders", "linkFacts", "linkReadContexts", "linkWriteContexts", "linkCapabilities", "linkDomainPolicy", "linkDataPolicy", "linkRootEncryptionKeys", "linkCapsuleAccessLog", "linkControlLog", "linkCapsuleManifest"]

    @field_validator('import_alias_for_parent')
    def import_alias_for_parent_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z][a-z0-9_]{2,31}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z][a-z0-9_]{2,31}$/")
        return value

    @field_validator('import_alias_for_child')
    def import_alias_for_child_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z][a-z0-9_]{2,31}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z][a-z0-9_]{2,31}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePeerDomain from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePeerDomain from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nicknames": obj.get("nicknames"),
            "importAliasForParent": obj.get("importAliasForParent"),
            "importAliasForChild": obj.get("importAliasForChild"),
            "displayNameForParent": obj.get("displayNameForParent"),
            "displayNameForChild": obj.get("displayNameForChild"),
            "linkAll": obj.get("linkAll") if obj.get("linkAll") is not None else False,
            "linkIdentityProviders": obj.get("linkIdentityProviders") if obj.get("linkIdentityProviders") is not None else False,
            "linkFacts": obj.get("linkFacts") if obj.get("linkFacts") is not None else False,
            "linkReadContexts": obj.get("linkReadContexts") if obj.get("linkReadContexts") is not None else False,
            "linkWriteContexts": obj.get("linkWriteContexts") if obj.get("linkWriteContexts") is not None else False,
            "linkCapabilities": obj.get("linkCapabilities") if obj.get("linkCapabilities") is not None else False,
            "linkDomainPolicy": obj.get("linkDomainPolicy") if obj.get("linkDomainPolicy") is not None else False,
            "linkDataPolicy": obj.get("linkDataPolicy") if obj.get("linkDataPolicy") is not None else False,
            "linkRootEncryptionKeys": obj.get("linkRootEncryptionKeys") if obj.get("linkRootEncryptionKeys") is not None else False,
            "linkCapsuleAccessLog": obj.get("linkCapsuleAccessLog") if obj.get("linkCapsuleAccessLog") is not None else False,
            "linkControlLog": obj.get("linkControlLog") if obj.get("linkControlLog") is not None else False,
            "linkCapsuleManifest": obj.get("linkCapsuleManifest") if obj.get("linkCapsuleManifest") is not None else False
        })
        return _obj


