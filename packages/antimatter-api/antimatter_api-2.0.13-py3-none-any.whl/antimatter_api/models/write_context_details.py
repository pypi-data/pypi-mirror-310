# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from antimatter_api.models.write_context_config_info import WriteContextConfigInfo
from typing import Optional, Set
from typing_extensions import Self

class WriteContextDetails(BaseModel):
    """
    Details about a write context 
    """ # noqa: E501
    name: Annotated[str, Field(strict=True)] = Field(description="An identifier for a write context that might be imported from a peer domain. If it is, it will bear an imported resource prefix (either a domain identifier or an alias, followed by ::) ")
    summary: Annotated[str, Field(strict=True, max_length=140)] = Field(description="A short, single sentence description of this write context")
    description: Annotated[str, Field(strict=True, max_length=4096)] = Field(description="A longer form description of this write context")
    config: WriteContextConfigInfo
    imported: StrictBool = Field(description="true if this write context is imported")
    source_domain_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="A globally unique identifier for a domain", alias="sourceDomainID")
    source_domain_name: Optional[StrictStr] = Field(default=None, alias="sourceDomainName")
    __properties: ClassVar[List[str]] = ["name", "summary", "description", "config", "imported", "sourceDomainID", "sourceDomainName"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^((dm-[1-9A-HJ-NP-Za-km-z]{11}|[a-z][a-z0-9_]{2,31})::)?[a-z][a-z0-9_]{2,31}$", value):
            raise ValueError(r"must validate the regular expression /^((dm-[1-9A-HJ-NP-Za-km-z]{11}|[a-z][a-z0-9_]{2,31})::)?[a-z][a-z0-9_]{2,31}$/")
        return value

    @field_validator('source_domain_id')
    def source_domain_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^dm-[1-9A-HJ-NP-Za-km-z]{11}$", value):
            raise ValueError(r"must validate the regular expression /^dm-[1-9A-HJ-NP-Za-km-z]{11}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WriteContextDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WriteContextDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "config": WriteContextConfigInfo.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "imported": obj.get("imported"),
            "sourceDomainID": obj.get("sourceDomainID"),
            "sourceDomainName": obj.get("sourceDomainName")
        })
        return _obj


