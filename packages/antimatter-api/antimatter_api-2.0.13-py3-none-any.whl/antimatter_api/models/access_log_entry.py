# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from antimatter_api.models.access_log_entry_create_info import AccessLogEntryCreateInfo
from antimatter_api.models.access_log_entry_open_info import AccessLogEntryOpenInfo
from antimatter_api.models.access_log_entry_read_info import AccessLogEntryReadInfo
from antimatter_api.models.tag import Tag
from antimatter_api.models.tag_summary import TagSummary
from typing import Optional, Set
from typing_extensions import Self

class AccessLogEntry(BaseModel):
    """
    An individual capsule data-plane log entry. If adding a new read log entry, the session should  be omitted (the server will fill it in) 
    """ # noqa: E501
    id: Annotated[str, Field(strict=True)] = Field(description="A globally unique chronological identifier for a log record. If you sort by this identifier, your logs will be in chronological order ")
    time: Annotated[str, Field(strict=True)] = Field(description="the time of a read operation, in UTC")
    domain: Annotated[str, Field(strict=True)] = Field(description="A globally unique identifier for a domain")
    capsule: Annotated[str, Field(strict=True)] = Field(description="A globally unique identifier for a capsule")
    operation: StrictStr
    session: Annotated[str, Field(strict=True)] = Field(description="An identifier for an authentication session")
    location: Optional[StrictStr] = Field(default=None, description="the location URL that this capsule resided in during the operation, if known ")
    create_info: Optional[AccessLogEntryCreateInfo] = Field(default=None, alias="createInfo")
    open_info: Optional[AccessLogEntryOpenInfo] = Field(default=None, alias="openInfo")
    read_info: Optional[AccessLogEntryReadInfo] = Field(default=None, alias="readInfo")
    capsule_tags: List[Tag] = Field(alias="capsuleTags")
    capsule_span_tags: TagSummary = Field(alias="capsuleSpanTags")
    capsule_size: StrictInt = Field(description="how big this capsule is", alias="capsuleSize")
    capsule_created: datetime = Field(description="when this capsule was created", alias="capsuleCreated")
    issuer: StrictStr = Field(description="the principal's issuer")
    principal: StrictStr = Field(description="the principal for this operation")
    __properties: ClassVar[List[str]] = ["id", "time", "domain", "capsule", "operation", "session", "location", "createInfo", "openInfo", "readInfo", "capsuleTags", "capsuleSpanTags", "capsuleSize", "capsuleCreated", "issuer", "principal"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9a-f]{32}", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-f]{32}/")
        return value

    @field_validator('time')
    def time_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]{9})?Z$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]{9})?Z$/")
        return value

    @field_validator('domain')
    def domain_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^dm-[1-9A-HJ-NP-Za-km-z]{11}$", value):
            raise ValueError(r"must validate the regular expression /^dm-[1-9A-HJ-NP-Za-km-z]{11}$/")
        return value

    @field_validator('capsule')
    def capsule_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^ca-[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{22}$", value):
            raise ValueError(r"must validate the regular expression /^ca-[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{22}$/")
        return value

    @field_validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['open', 'read', 'create']):
            raise ValueError("must be one of enum values ('open', 'read', 'create')")
        return value

    @field_validator('session')
    def session_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^sn-[a-z0-9]{22}$", value):
            raise ValueError(r"must validate the regular expression /^sn-[a-z0-9]{22}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessLogEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of create_info
        if self.create_info:
            _dict['createInfo'] = self.create_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_info
        if self.open_info:
            _dict['openInfo'] = self.open_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of read_info
        if self.read_info:
            _dict['readInfo'] = self.read_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in capsule_tags (list)
        _items = []
        if self.capsule_tags:
            for _item_capsule_tags in self.capsule_tags:
                if _item_capsule_tags:
                    _items.append(_item_capsule_tags.to_dict())
            _dict['capsuleTags'] = _items
        # override the default output from pydantic by calling `to_dict()` of capsule_span_tags
        if self.capsule_span_tags:
            _dict['capsuleSpanTags'] = self.capsule_span_tags.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessLogEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "time": obj.get("time"),
            "domain": obj.get("domain"),
            "capsule": obj.get("capsule"),
            "operation": obj.get("operation"),
            "session": obj.get("session"),
            "location": obj.get("location"),
            "createInfo": AccessLogEntryCreateInfo.from_dict(obj["createInfo"]) if obj.get("createInfo") is not None else None,
            "openInfo": AccessLogEntryOpenInfo.from_dict(obj["openInfo"]) if obj.get("openInfo") is not None else None,
            "readInfo": AccessLogEntryReadInfo.from_dict(obj["readInfo"]) if obj.get("readInfo") is not None else None,
            "capsuleTags": [Tag.from_dict(_item) for _item in obj["capsuleTags"]] if obj.get("capsuleTags") is not None else None,
            "capsuleSpanTags": TagSummary.from_dict(obj["capsuleSpanTags"]) if obj.get("capsuleSpanTags") is not None else None,
            "capsuleSize": obj.get("capsuleSize"),
            "capsuleCreated": obj.get("capsuleCreated"),
            "issuer": obj.get("issuer"),
            "principal": obj.get("principal")
        })
        return _obj


