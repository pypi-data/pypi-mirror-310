# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 2.0.13
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, field_validator
from typing import Any, Dict, Optional
from typing_extensions import Annotated
from antimatter_api.models.add_capsule_log_entry_request import AddCapsuleLogEntryRequest
from antimatter_api.models.capsule_create_response import CapsuleCreateResponse
from antimatter_api.models.capsule_open_request import CapsuleOpenRequest
from antimatter_api.models.capsule_open_response import CapsuleOpenResponse
from antimatter_api.models.capsule_seal_request import CapsuleSealRequest
from antimatter_api.models.data_tagging_hook_input import DataTaggingHookInput
from antimatter_api.models.data_tagging_hook_response import DataTaggingHookResponse
from antimatter_api.models.domain_data_tagging_hook_test_request import DomainDataTaggingHookTestRequest
from antimatter_api.models.upsert_span_tags_request import UpsertSpanTagsRequest

from antimatter_api.api_client import ApiClient, RequestSerialized
from antimatter_api.api_response import ApiResponse
from antimatter_api.rest import RESTResponseType


class InternalApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def domain_add_access_log_entry(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        capsule_id: Annotated[str, Field(strict=True)],
        open_token: Annotated[str, Field(min_length=64, strict=True)],
        add_capsule_log_entry_request: AddCapsuleLogEntryRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Add a capsule audit log entry

        Adds a data-plane audit log entry for this capsule. Contains information about the originating principal and about read tag rollups. Contains an open capsule token (read from the file) to ensure that you legitimately read the capsule. Note that not all audit log entry types may be added with this method. Some (like open records) are generated server side. 

        :param domain_id: (required)
        :type domain_id: str
        :param capsule_id: (required)
        :type capsule_id: str
        :param open_token: (required)
        :type open_token: str
        :param add_capsule_log_entry_request: (required)
        :type add_capsule_log_entry_request: AddCapsuleLogEntryRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_add_access_log_entry_serialize(
            domain_id=domain_id,
            capsule_id=capsule_id,
            open_token=open_token,
            add_capsule_log_entry_request=add_capsule_log_entry_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '403': None,
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def domain_add_access_log_entry_with_http_info(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        capsule_id: Annotated[str, Field(strict=True)],
        open_token: Annotated[str, Field(min_length=64, strict=True)],
        add_capsule_log_entry_request: AddCapsuleLogEntryRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Add a capsule audit log entry

        Adds a data-plane audit log entry for this capsule. Contains information about the originating principal and about read tag rollups. Contains an open capsule token (read from the file) to ensure that you legitimately read the capsule. Note that not all audit log entry types may be added with this method. Some (like open records) are generated server side. 

        :param domain_id: (required)
        :type domain_id: str
        :param capsule_id: (required)
        :type capsule_id: str
        :param open_token: (required)
        :type open_token: str
        :param add_capsule_log_entry_request: (required)
        :type add_capsule_log_entry_request: AddCapsuleLogEntryRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_add_access_log_entry_serialize(
            domain_id=domain_id,
            capsule_id=capsule_id,
            open_token=open_token,
            add_capsule_log_entry_request=add_capsule_log_entry_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '403': None,
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def domain_add_access_log_entry_without_preload_content(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        capsule_id: Annotated[str, Field(strict=True)],
        open_token: Annotated[str, Field(min_length=64, strict=True)],
        add_capsule_log_entry_request: AddCapsuleLogEntryRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add a capsule audit log entry

        Adds a data-plane audit log entry for this capsule. Contains information about the originating principal and about read tag rollups. Contains an open capsule token (read from the file) to ensure that you legitimately read the capsule. Note that not all audit log entry types may be added with this method. Some (like open records) are generated server side. 

        :param domain_id: (required)
        :type domain_id: str
        :param capsule_id: (required)
        :type capsule_id: str
        :param open_token: (required)
        :type open_token: str
        :param add_capsule_log_entry_request: (required)
        :type add_capsule_log_entry_request: AddCapsuleLogEntryRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_add_access_log_entry_serialize(
            domain_id=domain_id,
            capsule_id=capsule_id,
            open_token=open_token,
            add_capsule_log_entry_request=add_capsule_log_entry_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '403': None,
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _domain_add_access_log_entry_serialize(
        self,
        domain_id,
        capsule_id,
        open_token,
        add_capsule_log_entry_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domain_id is not None:
            _path_params['domainID'] = domain_id
        if capsule_id is not None:
            _path_params['capsuleID'] = capsule_id
        # process the query parameters
        if open_token is not None:
            
            _query_params.append(('openToken', open_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if add_capsule_log_entry_request is not None:
            _body_params = add_capsule_log_entry_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'domain_identity'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/domains/{domainID}/capsules/{capsuleID}/log',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def domain_create_capsule(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        write_context: Annotated[str, Field(strict=True)],
        body: Dict[str, Any],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CapsuleCreateResponse:
        """Create a capsule

        Create a new capsule. The ID will be returned. Capsule will be \"unsealed\" first, meaning it's still in a creating state. Returns a capsule create token that can be used to feed in additional data about the capsule while it's still unsealed. Also returns a DEK and an encrypted DEK. 

        :param domain_id: (required)
        :type domain_id: str
        :param write_context: (required)
        :type write_context: str
        :param body: (required)
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_create_capsule_serialize(
            domain_id=domain_id,
            write_context=write_context,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CapsuleCreateResponse",
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '403': "ForbiddenError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def domain_create_capsule_with_http_info(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        write_context: Annotated[str, Field(strict=True)],
        body: Dict[str, Any],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CapsuleCreateResponse]:
        """Create a capsule

        Create a new capsule. The ID will be returned. Capsule will be \"unsealed\" first, meaning it's still in a creating state. Returns a capsule create token that can be used to feed in additional data about the capsule while it's still unsealed. Also returns a DEK and an encrypted DEK. 

        :param domain_id: (required)
        :type domain_id: str
        :param write_context: (required)
        :type write_context: str
        :param body: (required)
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_create_capsule_serialize(
            domain_id=domain_id,
            write_context=write_context,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CapsuleCreateResponse",
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '403': "ForbiddenError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def domain_create_capsule_without_preload_content(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        write_context: Annotated[str, Field(strict=True)],
        body: Dict[str, Any],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a capsule

        Create a new capsule. The ID will be returned. Capsule will be \"unsealed\" first, meaning it's still in a creating state. Returns a capsule create token that can be used to feed in additional data about the capsule while it's still unsealed. Also returns a DEK and an encrypted DEK. 

        :param domain_id: (required)
        :type domain_id: str
        :param write_context: (required)
        :type write_context: str
        :param body: (required)
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_create_capsule_serialize(
            domain_id=domain_id,
            write_context=write_context,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CapsuleCreateResponse",
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '403': "ForbiddenError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _domain_create_capsule_serialize(
        self,
        domain_id,
        write_context,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domain_id is not None:
            _path_params['domainID'] = domain_id
        # process the query parameters
        if write_context is not None:
            
            _query_params.append(('writeContext', write_context))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'domain_identity'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/domains/{domainID}/capsules',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def domain_data_tagging_hook_invoke(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        hook_name: Annotated[str, Field(strict=True)],
        data_tagging_hook_input: DataTaggingHookInput,
        write_context: Optional[Annotated[str, Field(strict=True)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DataTaggingHookResponse:
        """Invoke a hook

        Invoke a hook that operates on data and returns tags 

        :param domain_id: (required)
        :type domain_id: str
        :param hook_name: (required)
        :type hook_name: str
        :param data_tagging_hook_input: (required)
        :type data_tagging_hook_input: DataTaggingHookInput
        :param write_context:
        :type write_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_data_tagging_hook_invoke_serialize(
            domain_id=domain_id,
            hook_name=hook_name,
            data_tagging_hook_input=data_tagging_hook_input,
            write_context=write_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DataTaggingHookResponse",
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def domain_data_tagging_hook_invoke_with_http_info(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        hook_name: Annotated[str, Field(strict=True)],
        data_tagging_hook_input: DataTaggingHookInput,
        write_context: Optional[Annotated[str, Field(strict=True)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DataTaggingHookResponse]:
        """Invoke a hook

        Invoke a hook that operates on data and returns tags 

        :param domain_id: (required)
        :type domain_id: str
        :param hook_name: (required)
        :type hook_name: str
        :param data_tagging_hook_input: (required)
        :type data_tagging_hook_input: DataTaggingHookInput
        :param write_context:
        :type write_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_data_tagging_hook_invoke_serialize(
            domain_id=domain_id,
            hook_name=hook_name,
            data_tagging_hook_input=data_tagging_hook_input,
            write_context=write_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DataTaggingHookResponse",
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def domain_data_tagging_hook_invoke_without_preload_content(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        hook_name: Annotated[str, Field(strict=True)],
        data_tagging_hook_input: DataTaggingHookInput,
        write_context: Optional[Annotated[str, Field(strict=True)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Invoke a hook

        Invoke a hook that operates on data and returns tags 

        :param domain_id: (required)
        :type domain_id: str
        :param hook_name: (required)
        :type hook_name: str
        :param data_tagging_hook_input: (required)
        :type data_tagging_hook_input: DataTaggingHookInput
        :param write_context:
        :type write_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_data_tagging_hook_invoke_serialize(
            domain_id=domain_id,
            hook_name=hook_name,
            data_tagging_hook_input=data_tagging_hook_input,
            write_context=write_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DataTaggingHookResponse",
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _domain_data_tagging_hook_invoke_serialize(
        self,
        domain_id,
        hook_name,
        data_tagging_hook_input,
        write_context,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domain_id is not None:
            _path_params['domainID'] = domain_id
        if hook_name is not None:
            _path_params['hookName'] = hook_name
        # process the query parameters
        if write_context is not None:
            
            _query_params.append(('writeContext', write_context))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if data_tagging_hook_input is not None:
            _body_params = data_tagging_hook_input


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'domain_identity'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/domains/{domainID}/hooks/data-tagging/{hookName}/invoke',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def domain_data_tagging_hook_test(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        hook_name: Annotated[str, Field(strict=True)],
        domain_data_tagging_hook_test_request: DomainDataTaggingHookTestRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DataTaggingHookResponse:
        """Test a classifier rule with real input

        Invoke a hook that operates on data and returns tags. This endpoint is intended for testing purposes when creating regex or llm rules before adding them to write contexts, or for one-off classification of data without configuring a write context and so forth. 

        :param domain_id: (required)
        :type domain_id: str
        :param hook_name: (required)
        :type hook_name: str
        :param domain_data_tagging_hook_test_request: (required)
        :type domain_data_tagging_hook_test_request: DomainDataTaggingHookTestRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_data_tagging_hook_test_serialize(
            domain_id=domain_id,
            hook_name=hook_name,
            domain_data_tagging_hook_test_request=domain_data_tagging_hook_test_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DataTaggingHookResponse",
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def domain_data_tagging_hook_test_with_http_info(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        hook_name: Annotated[str, Field(strict=True)],
        domain_data_tagging_hook_test_request: DomainDataTaggingHookTestRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DataTaggingHookResponse]:
        """Test a classifier rule with real input

        Invoke a hook that operates on data and returns tags. This endpoint is intended for testing purposes when creating regex or llm rules before adding them to write contexts, or for one-off classification of data without configuring a write context and so forth. 

        :param domain_id: (required)
        :type domain_id: str
        :param hook_name: (required)
        :type hook_name: str
        :param domain_data_tagging_hook_test_request: (required)
        :type domain_data_tagging_hook_test_request: DomainDataTaggingHookTestRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_data_tagging_hook_test_serialize(
            domain_id=domain_id,
            hook_name=hook_name,
            domain_data_tagging_hook_test_request=domain_data_tagging_hook_test_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DataTaggingHookResponse",
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def domain_data_tagging_hook_test_without_preload_content(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        hook_name: Annotated[str, Field(strict=True)],
        domain_data_tagging_hook_test_request: DomainDataTaggingHookTestRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Test a classifier rule with real input

        Invoke a hook that operates on data and returns tags. This endpoint is intended for testing purposes when creating regex or llm rules before adding them to write contexts, or for one-off classification of data without configuring a write context and so forth. 

        :param domain_id: (required)
        :type domain_id: str
        :param hook_name: (required)
        :type hook_name: str
        :param domain_data_tagging_hook_test_request: (required)
        :type domain_data_tagging_hook_test_request: DomainDataTaggingHookTestRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_data_tagging_hook_test_serialize(
            domain_id=domain_id,
            hook_name=hook_name,
            domain_data_tagging_hook_test_request=domain_data_tagging_hook_test_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DataTaggingHookResponse",
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _domain_data_tagging_hook_test_serialize(
        self,
        domain_id,
        hook_name,
        domain_data_tagging_hook_test_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domain_id is not None:
            _path_params['domainID'] = domain_id
        if hook_name is not None:
            _path_params['hookName'] = hook_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if domain_data_tagging_hook_test_request is not None:
            _body_params = domain_data_tagging_hook_test_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'domain_identity'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/domains/{domainID}/hooks/data-tagging/{hookName}/test',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def domain_open_capsule(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        capsule_id: Annotated[str, Field(strict=True)],
        read_context: Annotated[str, Field(strict=True)],
        capsule_open_request: CapsuleOpenRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CapsuleOpenResponse:
        """Open a capsule for reading

        Given the encrypted DEK for this capsule, get back the decrypted DEK. contains the read context 

        :param domain_id: (required)
        :type domain_id: str
        :param capsule_id: (required)
        :type capsule_id: str
        :param read_context: (required)
        :type read_context: str
        :param capsule_open_request: (required)
        :type capsule_open_request: CapsuleOpenRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_open_capsule_serialize(
            domain_id=domain_id,
            capsule_id=capsule_id,
            read_context=read_context,
            capsule_open_request=capsule_open_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CapsuleOpenResponse",
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '403': "ForbiddenError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def domain_open_capsule_with_http_info(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        capsule_id: Annotated[str, Field(strict=True)],
        read_context: Annotated[str, Field(strict=True)],
        capsule_open_request: CapsuleOpenRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CapsuleOpenResponse]:
        """Open a capsule for reading

        Given the encrypted DEK for this capsule, get back the decrypted DEK. contains the read context 

        :param domain_id: (required)
        :type domain_id: str
        :param capsule_id: (required)
        :type capsule_id: str
        :param read_context: (required)
        :type read_context: str
        :param capsule_open_request: (required)
        :type capsule_open_request: CapsuleOpenRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_open_capsule_serialize(
            domain_id=domain_id,
            capsule_id=capsule_id,
            read_context=read_context,
            capsule_open_request=capsule_open_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CapsuleOpenResponse",
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '403': "ForbiddenError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def domain_open_capsule_without_preload_content(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        capsule_id: Annotated[str, Field(strict=True)],
        read_context: Annotated[str, Field(strict=True)],
        capsule_open_request: CapsuleOpenRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Open a capsule for reading

        Given the encrypted DEK for this capsule, get back the decrypted DEK. contains the read context 

        :param domain_id: (required)
        :type domain_id: str
        :param capsule_id: (required)
        :type capsule_id: str
        :param read_context: (required)
        :type read_context: str
        :param capsule_open_request: (required)
        :type capsule_open_request: CapsuleOpenRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_open_capsule_serialize(
            domain_id=domain_id,
            capsule_id=capsule_id,
            read_context=read_context,
            capsule_open_request=capsule_open_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CapsuleOpenResponse",
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '403': "ForbiddenError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _domain_open_capsule_serialize(
        self,
        domain_id,
        capsule_id,
        read_context,
        capsule_open_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domain_id is not None:
            _path_params['domainID'] = domain_id
        if capsule_id is not None:
            _path_params['capsuleID'] = capsule_id
        # process the query parameters
        if read_context is not None:
            
            _query_params.append(('readContext', read_context))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if capsule_open_request is not None:
            _body_params = capsule_open_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'domain_identity'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/domains/{domainID}/capsules/{capsuleID}/open',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def domain_seal_capsule(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        capsule_id: Annotated[str, Field(strict=True)],
        create_token: Annotated[str, Field(min_length=64, strict=True)],
        capsule_seal_request: CapsuleSealRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Seal a capsule

        Seal this capsule, if it's unsealed. Requires capsule create token

        :param domain_id: (required)
        :type domain_id: str
        :param capsule_id: (required)
        :type capsule_id: str
        :param create_token: (required)
        :type create_token: str
        :param capsule_seal_request: (required)
        :type capsule_seal_request: CapsuleSealRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_seal_capsule_serialize(
            domain_id=domain_id,
            capsule_id=capsule_id,
            create_token=create_token,
            capsule_seal_request=capsule_seal_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def domain_seal_capsule_with_http_info(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        capsule_id: Annotated[str, Field(strict=True)],
        create_token: Annotated[str, Field(min_length=64, strict=True)],
        capsule_seal_request: CapsuleSealRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Seal a capsule

        Seal this capsule, if it's unsealed. Requires capsule create token

        :param domain_id: (required)
        :type domain_id: str
        :param capsule_id: (required)
        :type capsule_id: str
        :param create_token: (required)
        :type create_token: str
        :param capsule_seal_request: (required)
        :type capsule_seal_request: CapsuleSealRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_seal_capsule_serialize(
            domain_id=domain_id,
            capsule_id=capsule_id,
            create_token=create_token,
            capsule_seal_request=capsule_seal_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def domain_seal_capsule_without_preload_content(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        capsule_id: Annotated[str, Field(strict=True)],
        create_token: Annotated[str, Field(min_length=64, strict=True)],
        capsule_seal_request: CapsuleSealRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Seal a capsule

        Seal this capsule, if it's unsealed. Requires capsule create token

        :param domain_id: (required)
        :type domain_id: str
        :param capsule_id: (required)
        :type capsule_id: str
        :param create_token: (required)
        :type create_token: str
        :param capsule_seal_request: (required)
        :type capsule_seal_request: CapsuleSealRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_seal_capsule_serialize(
            domain_id=domain_id,
            capsule_id=capsule_id,
            create_token=create_token,
            capsule_seal_request=capsule_seal_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _domain_seal_capsule_serialize(
        self,
        domain_id,
        capsule_id,
        create_token,
        capsule_seal_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domain_id is not None:
            _path_params['domainID'] = domain_id
        if capsule_id is not None:
            _path_params['capsuleID'] = capsule_id
        # process the query parameters
        if create_token is not None:
            
            _query_params.append(('createToken', create_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if capsule_seal_request is not None:
            _body_params = capsule_seal_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'domain_identity'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/domains/{domainID}/capsules/{capsuleID}/seal',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def domain_upsert_span_tags(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        capsule_id: Annotated[str, Field(strict=True)],
        create_token: Annotated[str, Field(min_length=64, strict=True)],
        upsert_span_tags_request: UpsertSpanTagsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Upsert span-scope tags

        Upsert span tag rollups. This is only permitted when a capsule is not sealed. It requires a special \"capsule owner\" token that is returned by create capsule. Note that the rollup calculations must be done on the client side. This method only permits storing the entire rollup, not aggregating serverside. This is idempotent 

        :param domain_id: (required)
        :type domain_id: str
        :param capsule_id: (required)
        :type capsule_id: str
        :param create_token: (required)
        :type create_token: str
        :param upsert_span_tags_request: (required)
        :type upsert_span_tags_request: UpsertSpanTagsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_upsert_span_tags_serialize(
            domain_id=domain_id,
            capsule_id=capsule_id,
            create_token=create_token,
            upsert_span_tags_request=upsert_span_tags_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def domain_upsert_span_tags_with_http_info(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        capsule_id: Annotated[str, Field(strict=True)],
        create_token: Annotated[str, Field(min_length=64, strict=True)],
        upsert_span_tags_request: UpsertSpanTagsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Upsert span-scope tags

        Upsert span tag rollups. This is only permitted when a capsule is not sealed. It requires a special \"capsule owner\" token that is returned by create capsule. Note that the rollup calculations must be done on the client side. This method only permits storing the entire rollup, not aggregating serverside. This is idempotent 

        :param domain_id: (required)
        :type domain_id: str
        :param capsule_id: (required)
        :type capsule_id: str
        :param create_token: (required)
        :type create_token: str
        :param upsert_span_tags_request: (required)
        :type upsert_span_tags_request: UpsertSpanTagsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_upsert_span_tags_serialize(
            domain_id=domain_id,
            capsule_id=capsule_id,
            create_token=create_token,
            upsert_span_tags_request=upsert_span_tags_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def domain_upsert_span_tags_without_preload_content(
        self,
        domain_id: Annotated[str, Field(strict=True)],
        capsule_id: Annotated[str, Field(strict=True)],
        create_token: Annotated[str, Field(min_length=64, strict=True)],
        upsert_span_tags_request: UpsertSpanTagsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upsert span-scope tags

        Upsert span tag rollups. This is only permitted when a capsule is not sealed. It requires a special \"capsule owner\" token that is returned by create capsule. Note that the rollup calculations must be done on the client side. This method only permits storing the entire rollup, not aggregating serverside. This is idempotent 

        :param domain_id: (required)
        :type domain_id: str
        :param capsule_id: (required)
        :type capsule_id: str
        :param create_token: (required)
        :type create_token: str
        :param upsert_span_tags_request: (required)
        :type upsert_span_tags_request: UpsertSpanTagsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._domain_upsert_span_tags_serialize(
            domain_id=domain_id,
            capsule_id=capsule_id,
            create_token=create_token,
            upsert_span_tags_request=upsert_span_tags_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '308': None,
            '400': "InvalidRequestError",
            '401': "UnauthorizedError",
            '404': "ResourceNotFoundError",
            '409': "ConflictError",
            '412': "PreconditionFailedError",
            '429': "ResourceExhaustedError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _domain_upsert_span_tags_serialize(
        self,
        domain_id,
        capsule_id,
        create_token,
        upsert_span_tags_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if domain_id is not None:
            _path_params['domainID'] = domain_id
        if capsule_id is not None:
            _path_params['capsuleID'] = capsule_id
        # process the query parameters
        if create_token is not None:
            
            _query_params.append(('createToken', create_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if upsert_span_tags_request is not None:
            _body_params = upsert_span_tags_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'domain_identity'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/domains/{domainID}/capsules/{capsuleID}/span-tags',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


