import{z as O,bh as R,a7 as I,bi as M,k as h,be as k,ac as F,ad as G,U as V,j as H}from"./three.module-Czcx_5AS.js";import{LineSegmentsGeometry as J}from"./LineSegmentsGeometry-C_72cvla.js";import{LineMaterial as K}from"./LineMaterial-CSIiXijU.js";const L=new M,P=new h,W=new h,i=new M,r=new M,f=new M,A=new h,T=new H,o=new k,E=new h,z=new F,B=new G,y=new M;let x,g;function D(u,e,a){return y.set(0,0,-e,1).applyMatrix4(u.projectionMatrix),y.multiplyScalar(1/y.w),y.x=g/a.width,y.y=g/a.height,y.applyMatrix4(u.projectionMatrixInverse),y.multiplyScalar(1/y.w),Math.abs(Math.max(y.x,y.y))}function N(u,e){const a=u.matrixWorld,l=u.geometry,n=l.attributes.instanceStart,m=l.attributes.instanceEnd,c=Math.min(l.instanceCount,n.count);for(let t=0,d=c;t<d;t++){o.start.fromBufferAttribute(n,t),o.end.fromBufferAttribute(m,t),o.applyMatrix4(a);const w=new h,s=new h;x.distanceSqToSegment(o.start,o.end,s,w),s.distanceTo(w)<g*.5&&e.push({point:s,pointOnLine:w,distance:x.origin.distanceTo(s),object:u,face:null,faceIndex:t,uv:null,uv1:null})}}function Q(u,e,a){const l=e.projectionMatrix,n=u.material.resolution,m=u.matrixWorld,c=u.geometry,t=c.attributes.instanceStart,d=c.attributes.instanceEnd,w=Math.min(c.instanceCount,t.count),s=-e.near;x.at(1,f),f.w=1,f.applyMatrix4(e.matrixWorldInverse),f.applyMatrix4(l),f.multiplyScalar(1/f.w),f.x*=n.x/2,f.y*=n.y/2,f.z=0,A.copy(f),T.multiplyMatrices(e.matrixWorldInverse,m);for(let p=0,U=w;p<U;p++){if(i.fromBufferAttribute(t,p),r.fromBufferAttribute(d,p),i.w=1,r.w=1,i.applyMatrix4(T),r.applyMatrix4(T),i.z>s&&r.z>s)continue;if(i.z>s){const S=i.z-r.z,b=(i.z-s)/S;i.lerp(r,b)}else if(r.z>s){const S=r.z-i.z,b=(r.z-s)/S;r.lerp(i,b)}i.applyMatrix4(l),r.applyMatrix4(l),i.multiplyScalar(1/i.w),r.multiplyScalar(1/r.w),i.x*=n.x/2,i.y*=n.y/2,r.x*=n.x/2,r.y*=n.y/2,o.start.copy(i),o.start.z=0,o.end.copy(r),o.end.z=0;const v=o.closestPointToPointParameter(A,!0);o.at(v,E);const j=V.lerp(i.z,r.z,v),q=j>=-1&&j<=1,C=A.distanceTo(E)<g*.5;if(q&&C){o.start.fromBufferAttribute(t,p),o.end.fromBufferAttribute(d,p),o.start.applyMatrix4(m),o.end.applyMatrix4(m);const S=new h,b=new h;x.distanceSqToSegment(o.start,o.end,b,S),a.push({point:b,pointOnLine:S,distance:x.origin.distanceTo(b),object:u,face:null,faceIndex:p,uv:null,uv1:null})}}}class _ extends O{constructor(e=new J,a=new K({color:Math.random()*16777215})){super(e,a),this.isLineSegments2=!0,this.type="LineSegments2"}computeLineDistances(){const e=this.geometry,a=e.attributes.instanceStart,l=e.attributes.instanceEnd,n=new Float32Array(2*a.count);for(let c=0,t=0,d=a.count;c<d;c++,t+=2)P.fromBufferAttribute(a,c),W.fromBufferAttribute(l,c),n[t]=t===0?0:n[t-1],n[t+1]=n[t]+P.distanceTo(W);const m=new R(n,2,1);return e.setAttribute("instanceDistanceStart",new I(m,1,0)),e.setAttribute("instanceDistanceEnd",new I(m,1,1)),this}raycast(e,a){const l=this.material.worldUnits,n=e.camera;n===null&&!l&&console.error('LineSegments2: "Raycaster.camera" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.');const m=e.params.Line2!==void 0&&e.params.Line2.threshold||0;x=e.ray;const c=this.matrixWorld,t=this.geometry,d=this.material;g=d.linewidth+m,t.boundingSphere===null&&t.computeBoundingSphere(),B.copy(t.boundingSphere).applyMatrix4(c);let w;if(l)w=g*.5;else{const p=Math.max(n.near,B.distanceToPoint(x.origin));w=D(n,p,d.resolution)}if(B.radius+=w,x.intersectsSphere(B)===!1)return;t.boundingBox===null&&t.computeBoundingBox(),z.copy(t.boundingBox).applyMatrix4(c);let s;if(l)s=g*.5;else{const p=Math.max(n.near,z.distanceToPoint(x.origin));s=D(n,p,d.resolution)}z.expandByScalar(s),x.intersectsBox(z)!==!1&&(l?N(this,a):Q(this,n,a))}onBeforeRender(e){const a=this.material.uniforms;a&&a.resolution&&(e.getViewport(L),this.material.uniforms.resolution.value.set(L.z,L.w))}}export{_ as LineSegments2};
