Metadata-Version: 2.3
Name: grami-ai
Version: 0.3.112
Summary: A dynamic and flexible AI agent framework for building intelligent, multi-modal AI agents
Project-URL: Homepage, https://github.com/YAFATEK/grami-ai
Project-URL: Documentation, https://grami-ai.readthedocs.io
Project-URL: Repository, https://github.com/YAFATEK/grami-ai
Project-URL: Issues, https://github.com/YAFATEK/grami-ai/issues
Author-email: YAFATEK Solutions / GRAMI Team <support@yafatek.dev>
Maintainer-email: YAFATEK Solutions <support@yafatek.dev>
License: MIT
Keywords: agent,ai,artificial-intelligence,generative-ai,llm,machine-learning
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Requires-Dist: anthropic>=0.7.0
Requires-Dist: asyncio>=3.4.3
Requires-Dist: google-generativeai>=0.3.1
Requires-Dist: openai>=1.3.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: requests>=2.28.0
Provides-Extra: dev
Requires-Dist: black>=23.3.0; extra == 'dev'
Requires-Dist: flake8>=6.0.0; extra == 'dev'
Requires-Dist: isort>=5.12.0; extra == 'dev'
Requires-Dist: mypy>=1.3.0; extra == 'dev'
Requires-Dist: pytest-asyncio>=0.21.0; extra == 'dev'
Requires-Dist: pytest>=7.3.1; extra == 'dev'
Provides-Extra: docs
Requires-Dist: myst-parser>=1.0.0; extra == 'docs'
Requires-Dist: sphinx-rtd-theme>=1.2.0; extra == 'docs'
Requires-Dist: sphinx>=5.3.0; extra == 'docs'
Description-Content-Type: text/markdown

# GRAMI-AI: Dynamic AI Agent Framework

<div align="center">
    <img src="https://img.shields.io/badge/version-{{PACKAGE_VERSION}}-blue.svg" alt="Version">
    <img src="https://img.shields.io/badge/python-3.8+-blue.svg" alt="Python Versions">
    <img src="https://img.shields.io/badge/license-MIT-green.svg" alt="License">
    <img src="https://img.shields.io/github/stars/YAFATEK/grami-ai?style=social" alt="GitHub Stars">
</div>

## Vision and Purpose

GRAMI-AI is a revolutionary, async-first AI agent framework designed to solve complex computational challenges through intelligent, collaborative agent interactions. Our mission is to create a highly flexible, extensible platform that empowers developers to build sophisticated, context-aware AI systems capable of adapting and collaborating across diverse domains.

## Framework Philosophy

The core philosophy of GRAMI-AI is to provide an abstraction layer that:
- Enables dynamic creation of AI agents with specific roles and capabilities
- Supports multiple Language Models (LLMs) with their unique interfaces
- Allows seamless integration of communication protocols
- Provides flexible memory management
- Supports extensible tool ecosystems

## Key Architectural Goals

### 1. Dynamic Agent Creation
- Define agents with precise roles (e.g., Growth Manager, Content Creator)
- Customize system instructions and behavior
- Support multi-modal capabilities (text, image, video generation)

### 2. LLM Abstraction
- Unified interface for different LLMs (Gemini, OpenAI, Anthropic, Ollama)
- Handle provider-specific nuances (prompt building, chat interfaces)
- Flexible function/tool integration

### 3. Communication Interfaces
- Support multiple protocols (WebSocket, REST, Kafka)
- Enable inter-agent communication
- Implement global state management

### 4. Memory Management
- Pluggable memory providers (In-Memory, Redis, DynamoDB)
- Persistent conversation and task history
- Scalable state storage

### 5. Tool Ecosystem
- Default utility tools (Kafka publisher, web search)
- Easy custom tool development
- Provider-specific function handling

## Roadmap and TODO List

### Development Checklist

#### Core Framework Design
- [ ] Implement `AsyncAgent` base class with dynamic configuration
- [ ] Create flexible system instruction definition mechanism
- [ ] Design abstract LLM provider interface
- [ ] Develop dynamic role and persona assignment system
- [ ] Implement multi-modal agent capabilities (text, image, video)

#### LLM Provider Abstraction
- [ ] Unified interface for diverse LLM providers
  - [ ] Google Gemini integration (start_chat(), send_message())
  - [ ] OpenAI ChatGPT integration
  - [ ] Anthropic Claude integration
  - [ ] Ollama local LLM support
- [ ] Standardize function/tool calling across providers
- [ ] Dynamic prompt engineering support
- [ ] Provider-specific configuration handling

#### Communication Interfaces
- [ ] WebSocket real-time communication
- [ ] REST API endpoint design
- [ ] Kafka inter-agent communication
- [ ] gRPC support
- [ ] Event-driven agent notification system
- [ ] Secure communication protocols

#### Memory and State Management
- [ ] Pluggable memory providers
  - [ ] In-memory state storage
  - [ ] Redis distributed memory
  - [ ] DynamoDB scalable storage
  - [ ] S3 content storage
- [ ] Conversation and task history tracking
- [ ] Global state management for agent crews
- [ ] Persistent task and interaction logs

#### Tool and Function Ecosystem
- [ ] Extensible tool integration framework
- [ ] Default utility tools
  - [ ] Kafka message publisher
  - [ ] Web search utility
  - [ ] Content analysis tool
- [ ] Provider-specific function calling support
- [ ] Community tool marketplace
- [ ] Easy custom tool development

#### Agent Crew Collaboration
- [ ] Inter-agent communication protocol
- [ ] Workflow and task delegation mechanisms
- [ ] Approval and review workflows
- [ ] Notification and escalation systems
- [ ] Dynamic team composition
- [ ] Shared context and memory management

#### Use Case Implementations
- [ ] Digital Agency workflow template
  - [ ] Growth Manager agent
  - [ ] Content Creator agent
  - [ ] Trend Researcher agent
  - [ ] Media Creation agent
- [ ] Customer interaction management
- [ ] Approval and revision cycles

#### Security and Compliance
- [ ] Secure credential management
- [ ] Role-based access control
- [ ] Audit logging
- [ ] Compliance with data protection regulations

#### Performance and Scalability
- [ ] Async-first design
- [ ] Horizontal scaling support
- [ ] Performance benchmarking
- [ ] Resource optimization

#### Testing and Quality
- [ ] Comprehensive unit testing
- [ ] Integration testing for agent interactions
- [ ] Mocking frameworks for LLM providers
- [ ] Continuous integration setup

#### Documentation and Community
- [ ] Detailed API documentation
- [ ] Comprehensive developer guides
- [ ] Example use case implementations
- [ ] Contribution guidelines
- [ ] Community tool submission process
- [ ] Regular maintenance and updates

#### Future Roadmap
- [ ] Payment integration solutions
- [ ] Advanced context understanding
- [ ] Multi-language support
- [ ] Enterprise-grade security features
- [ ] AI agent marketplace

## Conceptual Agent Example

```python
agent = AsyncAgent(
    llm=GeminiProvider(),            # LLM Provider
    memory=RedisMemoryProvider(),    # Memory Management
    tools=[                          # Extensible Tools
        KafkaPublisher(),
        WebSearchTool(),
        ContentAnalysisTool()
    ],
    system_instructions="You are a Growth Manager...",  # Role Definition
    communication_interface=WebSocketInterface(),
    storage=S3StorageProvider(),     # Optional Storage
    crew_config={                    # Optional Crew Configuration
        'team_members': ['ContentCreator', 'Researcher'],
        'communication_protocol': 'kafka'
    }
)
```

## Community Contribution

We envision GRAMI-AI as a collaborative ecosystem where developers can:
- Create and share custom tools
- Develop new LLM integrations
- Build memory providers
- Implement communication interfaces
- Contribute to core framework development

## Current Capabilities

- [x] Async-first architecture
- [x] Basic agent creation
- [x] Gemini LLM integration
- [x] Simple tool support
- [ ] Advanced inter-agent communication
- [ ] Multiple memory providers
- [ ] Comprehensive LLM support

## Getting Started

```bash
pip install grami-ai
```

## License

MIT License - Empowering open-source innovation

## About YAFATEK Solutions

Pioneering AI innovation through flexible, powerful frameworks.

## Contact & Support

- **Email**: support@yafatek.dev
- **GitHub**: [GRAMI-AI Issues](https://github.com/YAFATEK/grami-ai/issues)

---

**Star ‚≠ê the project if you believe in collaborative AI innovation!**