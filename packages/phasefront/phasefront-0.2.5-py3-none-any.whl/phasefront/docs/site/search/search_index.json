{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"PhaseFront","text":"<p>PQ strEEm Exploratory Data Analysis tool</p>"},{"location":"index.html#installation","title":"Installation","text":"<p>Use pip to automatically download and install the <code>phasefront</code> package from its hosted location on PyPI.</p> <pre><code>pip install phasefront\n</code></pre>"},{"location":"index.html#configuration","title":"Configuration","text":"<p>Configuration is through a TOML file named <code>phasefront.toml</code> and placed in an accessible location. The software will check the following locations in priority order: 1. Path specified by <code>--config</code> argument 2. Path in <code>PHASEFRONT_CONFIG</code> environment variable 3. <code>./phasefront.toml</code> (current directory) 4. <code>~/.config/phasefront.toml</code> 5. <code>/etc/phasefront.toml</code></p> <p>If you do not have <code>phasefront.toml</code> file, you can create one in a text editor using the following entries:</p> <pre><code>[host]\naddress = \"192.168.1.2\"\nusername = \"admin\"\npassword = \"secret\"\n</code></pre>"},{"location":"index.html#connection","title":"Connection","text":"<p>The</p> <p>with your host credentials.  Typically the host is a PQ strEEm gateway but it can be any computer that supports SSH access and hosts PQ strEEM waveform and power monitor files 'wave' and 'pmon' folders respectively.</p> <p>with SSH acc that possible hosts include but are not limited to PQ strEEm gateways.</p>"},{"location":"index.html#usage","title":"Usage","text":""},{"location":"index.html#basic-commands","title":"Basic Commands","text":"<p>List remote files:</p> <pre><code>wave-list --config phasefront.toml '*.parquet'\n</code></pre> <p>Download files:</p> <pre><code>wave-fetch --config phasefront.toml '202411*.parquet'\n</code></pre> <p>Create plots:</p> <pre><code>wave-plot data.parquet\n</code></pre>"},{"location":"index.html#windows-powershell-usage","title":"Windows PowerShell Usage","text":"<p>When using patterns on Windows PowerShell, be sure to wrap them in single quotes to prevent glob expansion:</p> <pre><code>wave-list '*.parquet'\nwave-list '20241113_*.parquet'\n</code></pre>"},{"location":"index.html#remote-file-patterns","title":"Remote File Patterns","text":"<p>The <code>wave-list</code> command supports flexible file matching patterns:</p> <pre><code># List all Parquet files in a directory\nwave-list '*.parquet'\n# List files for a specific date\nwave-list '20241113_*.parquet'\n# List files for a specific hour\nwave-list '20241113_12*.parquet'\n# List files within a time range\nwave-list '20241113_{12,13,14}*.parquet'\n</code></pre> <p>The pattern matching uses Python's <code>Path.match()</code> function, which supports: - <code>*</code>: Matches any number of characters except slashes - <code>?</code>: Matches any single character except slashes - <code>[seq]</code>: Matches any character in seq - <code>[!seq]</code>: Matches any character not in seq - <code>{a,b,c}</code>: Matches any of the comma-separated alternatives</p>"},{"location":"index.html#pipeline-usage","title":"Pipeline Usage","text":"<p>Chain commands together:</p> <pre><code>wave-list '24111*.parquet' | wave-fetch | wave-plot\n</code></pre>"},{"location":"index.html#plot-options","title":"Plot Options","text":""},{"location":"index.html#wave-plot-options","title":"Wave Plot Options","text":"<p>Wave Plot supports multiple plot types that can be combined</p> <pre><code># All plots (default)\nwave-plot data.parquet\n\n# Combine any plot types\nwave-plot --wave --vhist data.parquet # Show waveforms and voltage histograms\nwave-plot --vhist --ihist data.parquet # Show both histogram types\nwave-plot --vderiv --ideriv data.parquet # Show both derivative plots\n\n# Available plot types:\n--wave # Voltage and current waveforms\n--vhist # Voltage histograms\n--ihist # Current histograms\n--vderiv # Voltage derivative histograms\n--ideriv # Current derivative histograms\n\n# Show metadata for each file\nwave-plot --verbose data.parquet\n</code></pre>"},{"location":"index.html#power-monitoring-plot-options","title":"Power Monitoring Plot Options","text":"<p>Power monitoring plots support different metrics that can be combined:</p> <pre><code># All plots (default)\npmon-plot data.parquet\n\n# Combine any metrics\npmon-plot --freq --voltage data.parquet # Show frequency and voltage\npmon-plot --current --power data.parquet # Show current and power\n\n# Available metrics:\n--freq Frequency over time\n--voltage RMS voltage\n--current RMS current\n--power Active and reactive power\n\n# Show metadata for each file\npmon-plot --verbose data.parquet\n</code></pre>"},{"location":"index.html#time-slicing","title":"Time Slicing","text":"<pre><code># First 100ms (default for wave plots)\nwave-plot data.parquet\n\n# Start at 2.0 seconds, show 500ms\nwave-plot --start 2.0 --duration-millis 500 data.parquet\n\n# Show 2 hours of power monitoring data starting at 14:00 UTC\npmon-plot --start 14:00 --duration-hrs 2 data.parquet\n</code></pre>"},{"location":"index.html#file-handling","title":"File Handling","text":"<p>When downloading files that already exist: - <code>wave-fetch</code> will prompt for action:   - <code>[s]kip once</code>: Skip this file   - <code>[S]kip all</code>: Skip all existing files   - <code>[f]orce once</code>: Overwrite this file   - <code>[F]orce all</code>: Overwrite all existing files - Use <code>-f</code> or <code>--force</code> to always overwrite without prompting</p>"},{"location":"index.html#exit-codes","title":"Exit Codes","text":"<p>All commands: - <code>0</code>: Success - <code>1</code>: Complete failure - <code>2</code>: Partial success (some files processed)</p>"},{"location":"development.html","title":"Development Guide","text":""},{"location":"development.html#getting-started","title":"Getting Started","text":"<p>Clone and install in development mode:</p> <pre><code>git clone https://github.com/edge-energy/streem.git\ncd phasefront\npip install -e .\n</code></pre>"},{"location":"development.html#version-management","title":"Version Management","text":"<p>The package version is managed automatically using git tags. Here's how it works:</p>"},{"location":"development.html#development-mode","title":"Development Mode","text":"<p>When installed with <code>pip install -e .</code>: - Version is dynamically fetched from git tags - Changes to code take effect immediately - Supports version formats:   <code>v0.1.2      # Release version   v0.1.2rc1   # Release candidate   v0.2.2_ti   # Variant (adds +ti suffix)</code> - Development versions show commits since last tag:   <code>0.1.2+dev5.gabc123f  # 5 commits after v0.1.2   0.1.2+dev5.gabc123f.dirty  # Uncommitted changes</code></p>"},{"location":"development.html#release-mode","title":"Release Mode","text":"<p>For building releases:</p> <pre><code># Tag the version you want to release\ngit tag v0.2.2 # or v0.2.2_xx for variants\n\n#Generate version file and build package\n./build.sh\n</code></pre> <p>Important notes: - Working directory must be clean (no uncommitted changes) - Version is frozen in .build_version.txt during build - Dirty working directory will cause build errors</p>"},{"location":"development.html#common-issues","title":"Common Issues","text":"<ol> <li>Build fails with version error:</li> <li>Ensure you've run <code>./build.sh</code></li> <li>Check that git tags are correct</li> <li> <p>Commit or stash changes</p> </li> <li> <p>Version shows as \"dirty\":</p> </li> <li>Only allowed in development mode</li> <li> <p>Commit or stash changes before release</p> </li> <li> <p>Wrong version appearing:</p> </li> <li>Check current git tag (<code>git describe --tags</code>)</li> <li>Ensure you're on the right branch</li> </ol>"}]}